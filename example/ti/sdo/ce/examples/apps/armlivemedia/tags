!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
$$DEFAULT	package/ti_sdo_ce_examples_apps_armlivemedia.java	/^    static final XScriptO $$DEFAULT = Value.DEFAULT;$/;"	f	class:ti_sdo_ce_examples_apps_armlivemedia
$$IMPORTS	package/ti_sdo_ce_examples_apps_armlivemedia.java	/^    void $$IMPORTS()$/;"	m	class:ti_sdo_ce_examples_apps_armlivemedia
$$INITIALIZATION	package/ti_sdo_ce_examples_apps_armlivemedia.java	/^    void $$INITIALIZATION()$/;"	m	class:ti_sdo_ce_examples_apps_armlivemedia
$$Instance	package/ti_sdo_ce_examples_apps_armlivemedia.java	/^    static final Proto.Obj $$Instance = (Proto.Obj)Global.get("$$Instance");$/;"	f	class:ti_sdo_ce_examples_apps_armlivemedia
$$Module	package/ti_sdo_ce_examples_apps_armlivemedia.java	/^    static final Proto.Obj $$Module = (Proto.Obj)Global.get("$$Module");$/;"	f	class:ti_sdo_ce_examples_apps_armlivemedia
$$OBJECTS	package/ti_sdo_ce_examples_apps_armlivemedia.java	/^    void $$OBJECTS()$/;"	m	class:ti_sdo_ce_examples_apps_armlivemedia
$$Package	package/ti_sdo_ce_examples_apps_armlivemedia.java	/^    static final Proto.Obj $$Package = (Proto.Obj)Global.get("$$Package");$/;"	f	class:ti_sdo_ce_examples_apps_armlivemedia
$$Params	package/ti_sdo_ce_examples_apps_armlivemedia.java	/^    static final Proto.Obj $$Params = (Proto.Obj)Global.get("$$Params");$/;"	f	class:ti_sdo_ce_examples_apps_armlivemedia
$$SINGLETONS	package/ti_sdo_ce_examples_apps_armlivemedia.java	/^    void $$SINGLETONS()$/;"	m	class:ti_sdo_ce_examples_apps_armlivemedia
$$T_Bool	package/ti_sdo_ce_examples_apps_armlivemedia.java	/^    static final Proto.Elm $$T_Bool = Proto.Elm.newBool();$/;"	f	class:ti_sdo_ce_examples_apps_armlivemedia
$$T_Map	package/ti_sdo_ce_examples_apps_armlivemedia.java	/^    static final Proto.Map $$T_Map = new Proto.Map($$T_Obj);$/;"	f	class:ti_sdo_ce_examples_apps_armlivemedia
$$T_Met	package/ti_sdo_ce_examples_apps_armlivemedia.java	/^    static final Proto.Fxn $$T_Met = new Proto.Fxn(null, null, 0, -1, false);$/;"	f	class:ti_sdo_ce_examples_apps_armlivemedia
$$T_Num	package/ti_sdo_ce_examples_apps_armlivemedia.java	/^    static final Proto.Elm $$T_Num = Proto.Elm.newNum();$/;"	f	class:ti_sdo_ce_examples_apps_armlivemedia
$$T_Obj	package/ti_sdo_ce_examples_apps_armlivemedia.java	/^    static final Proto.Elm $$T_Obj = Proto.Elm.newObj();$/;"	f	class:ti_sdo_ce_examples_apps_armlivemedia
$$T_Str	package/ti_sdo_ce_examples_apps_armlivemedia.java	/^    static final Proto.Elm $$T_Str = Proto.Elm.newStr();$/;"	f	class:ti_sdo_ce_examples_apps_armlivemedia
$$T_Vec	package/ti_sdo_ce_examples_apps_armlivemedia.java	/^    static final Proto.Arr $$T_Vec = new Proto.Arr($$T_Obj);$/;"	f	class:ti_sdo_ce_examples_apps_armlivemedia
$$UNDEF	package/ti_sdo_ce_examples_apps_armlivemedia.java	/^    static final Object $$UNDEF = Undefined.instance;$/;"	f	class:ti_sdo_ce_examples_apps_armlivemedia
$$delegGet	package/ti_sdo_ce_examples_apps_armlivemedia.java	/^    static final Object $$delegGet = Global.get("$$delegGet");$/;"	f	class:ti_sdo_ce_examples_apps_armlivemedia
$$delegSet	package/ti_sdo_ce_examples_apps_armlivemedia.java	/^    static final Object $$delegSet = Global.get("$$delegSet");$/;"	f	class:ti_sdo_ce_examples_apps_armlivemedia
$$objFldGet	package/ti_sdo_ce_examples_apps_armlivemedia.java	/^    static final Object $$objFldGet = Global.get("$$objFldGet");$/;"	f	class:ti_sdo_ce_examples_apps_armlivemedia
$$objFldSet	package/ti_sdo_ce_examples_apps_armlivemedia.java	/^    static final Object $$objFldSet = Global.get("$$objFldSet");$/;"	f	class:ti_sdo_ce_examples_apps_armlivemedia
$$proxyGet	package/ti_sdo_ce_examples_apps_armlivemedia.java	/^    static final Object $$proxyGet = Global.get("$$proxyGet");$/;"	f	class:ti_sdo_ce_examples_apps_armlivemedia
$$proxySet	package/ti_sdo_ce_examples_apps_armlivemedia.java	/^    static final Object $$proxySet = Global.get("$$proxySet");$/;"	f	class:ti_sdo_ce_examples_apps_armlivemedia
AAC_DATA_LENGTH	KVideo/audio/codec_engine.cpp	24;"	d	file:
AAC_DATA_OFFSET	KVideo/audio/codec_engine.cpp	25;"	d	file:
AAC_LEN	KVideo/audio/SpeexCod.h	6;"	d
ACCUrl	netprotocal/TPCCommandStruct.h	/^	char ACCUrl[512];$/;"	m	struct:tagWebServiceParam
AENC_ENCODER_END_OF_STREAM	core/audioEncodeOMX.h	20;"	d
AENC_ENCODER_ERROR_EVENT	core/audioEncodeOMX.h	19;"	d
AENC_ENCODER_INPUT_READY	core/audioEncodeOMX.h	17;"	d
AENC_ENCODER_OUTPUT_READY	core/audioEncodeOMX.h	18;"	d
AENC_EmptyBufferDone	core/audioEncode.cpp	/^static OMX_ERRORTYPE AENC_EmptyBufferDone(OMX_HANDLETYPE hComponent,$/;"	f	file:
AENC_EmptyBufferDone	core/audioEncodeOMX.cpp	/^static OMX_ERRORTYPE AENC_EmptyBufferDone(OMX_HANDLETYPE hComponent,$/;"	f	file:
AENC_EventHandler	core/audioEncode.cpp	/^static OMX_ERRORTYPE AENC_EventHandler(OMX_HANDLETYPE hComponent,$/;"	f	file:
AENC_EventHandler	core/audioEncodeOMX.cpp	/^static OMX_ERRORTYPE AENC_EventHandler(OMX_HANDLETYPE hComponent,$/;"	f	file:
AENC_FillBufferDone	core/audioEncode.cpp	/^static OMX_ERRORTYPE AENC_FillBufferDone(OMX_HANDLETYPE hComponent,$/;"	f	file:
AENC_FillBufferDone	core/audioEncodeOMX.cpp	/^static OMX_ERRORTYPE AENC_FillBufferDone(OMX_HANDLETYPE hComponent,$/;"	f	file:
AFAIL	Command/AssistCommandDefines.h	105;"	d
ALL2SE	Command/AssistCommandDefines.h	/^}ALL2SE;$/;"	t	typeref:enum:tagALL2SE
ALL2SE_QUERY_FILENAME	Command/AssistCommandDefines.h	/^	,ALL2SE_QUERY_FILENAME							\/\/\/ 其它系统查询流媒体录制的文件名$/;"	e	enum:tagALL2SE
ALL2SE_QUERY_SHAREPATH	Command/AssistCommandDefines.h	/^	,ALL2SE_QUERY_SHAREPATH							\/\/\/ 其它系统查询流媒体服务器的共享路径信息$/;"	e	enum:tagALL2SE
ALL2SE_QUERY_STATE	Command/AssistCommandDefines.h	/^	,ALL2SE_QUERY_STATE				=	0x00004200	\/\/\/ 其它系统查询流媒体服务器当前状态$/;"	e	enum:tagALL2SE
ALL2SE_QUERY_TIME	Command/AssistCommandDefines.h	/^	,ALL2SE_QUERY_TIME								\/\/\/ 其它系统查询流媒体服务器当前时间$/;"	e	enum:tagALL2SE
ALL_DATA_LENGTH	Command/AssistCommandDefines.h	9;"	d
ALL_DEVICE_TYPE	Command/AssistCommandDefines.h	52;"	d
ALSA_BUFFER_SIZE_MAX	KVideo/audioCapture.cpp	9;"	d	file:
ALSA_BUFFER_SIZE_MAX	core/audioEncode.cpp	11;"	d	file:
ASCommonInfo	netprotocal/TPCCommandStruct.h	/^} ASCommonInfo;$/;"	t	typeref:struct:tagASCommonInfo
AS_AVInfo	netprotocal/TPCCommandStruct.h	/^} AS_AVInfo;$/;"	t	typeref:struct:tagAVInfo
AUDIO_ATTACK_A	KVideo/audio/audio_mixer.cpp	33;"	d	file:
AUDIO_ATTACK_B	KVideo/audio/audio_mixer.cpp	34;"	d	file:
AUDIO_CAP_ENCODE_H	KVideo/audio/audio_capture.h	2;"	d
AUDIO_CHECK_TYPE	Command/AssistCommandDefines.h	57;"	d
AUDIO_DECAY_A	KVideo/audio/audio_mixer.cpp	35;"	d	file:
AUDIO_DECAY_B	KVideo/audio/audio_mixer.cpp	36;"	d	file:
AUDIO_IS_OVERFLOW	KVideo/audio/audio_mixer.cpp	47;"	d	file:
AUDIO_MAX_LEVEL	KVideo/audio/audio_mixer.cpp	44;"	d	file:
AUDIO_MIN_LEVEL	KVideo/audio/audio_mixer.cpp	45;"	d	file:
AUDIO_MIXER_H	KVideo/audio/audio_mixer.h	2;"	d
AUDIO_MIX_LINEAR2ULAW_TABLE_H	KVideo/audio/audio_mix_linear2ulaw_table.h	2;"	d
AUDIO_NORMAL_LEVEL	KVideo/audio/audio_mixer.cpp	31;"	d	file:
AUDIO_PLAYBACK_H	KVideo/audio/audio_playback.h	2;"	d
AUDIO_SIMPLE_AGC	KVideo/audio/audio_mixer.cpp	38;"	d	file:
AVC_ERR_INSUFFICIENT_INPUT	core/DecodeUtils.h	15;"	d
AVC_ERR_INTERNAL_ERROR	core/DecodeUtils.h	11;"	d
AVC_ERR_INVALID_ARGS	core/DecodeUtils.h	12;"	d
AVC_ERR_MALLOC_FAILED	core/DecodeUtils.h	10;"	d
AVC_ERR_NOT_SUPPORTED	core/DecodeUtils.h	9;"	d
AVC_ERR_NO_OUTPUT_CHANNEL	core/DecodeUtils.h	13;"	d
AVC_ERR_WRONG_STATE	core/DecodeUtils.h	14;"	d
AVC_Err	core/DecodeUtils.h	/^typedef unsigned int AVC_Err;$/;"	t
AVC_SUCCESS	core/DecodeUtils.h	8;"	d
AVChunk_Buf	core/DecodeUtils.h	/^} AVChunk_Buf;$/;"	t	typeref:struct:__anon12
AmplifierState	netprotocal/ICIICommandStruct.h	/^	eCommonState	AmplifierState;$/;"	m	struct:tagPR2COM_UnitState
Args	monitor/value.h	/^      typedef std::vector<PathArgument> Args;$/;"	t	class:Json::Path
ArrayIndex	monitor/value.h	/^      typedef UInt ArrayIndex;$/;"	t	class:Json::Value
ArrayIndex	monitor/value.h	/^      typedef Value::ArrayIndex ArrayIndex;$/;"	t	class:Json::ValueInternalArray
AssistCommandHandle	Command/AssistCommandHandle.cpp	/^AssistCommandHandle::AssistCommandHandle() : m_bIsInit(false)  {$/;"	f	class:AssistCommandHandle
AssistCommandHandle	Command/AssistCommandHandle.h	/^class AssistCommandHandle : public IUdpListener {$/;"	c
AudioCapture	KVideo/audioCapture.cpp	/^AudioCapture::AudioCapture()$/;"	f	class:AudioCapture
AudioCapture	KVideo/audioCapture.h	/^class AudioCapture  {$/;"	c
AudioCardConnect	netprotocal/ICIICommandStruct.h	/^	eCommonState	AudioCardConnect;$/;"	m	struct:tagPR2COM_UnitState
AudioEncode	core/audioEncode.cpp	/^AudioEncode::AudioEncode() : m_pHandle(NULL),$/;"	f	class:AudioEncode
AudioEncodeFAAC	core/audioEncodeFAAC.cpp	/^AudioEncodeFAAC::AudioEncodeFAAC()$/;"	f	class:AudioEncodeFAAC
AudioEncodeFAAC	core/audioEncodeFAAC.h	/^class AudioEncodeFAAC : public IAudioEncodeInterface {$/;"	c
AudioEncodeFactory	core/audioEncodeFactory.h	/^class AudioEncodeFactory {$/;"	c
AudioEncodeOMX	core/audioEncodeOMX.cpp	/^AudioEncodeOMX::AudioEncodeOMX() : m_pHandle(NULL),$/;"	f	class:AudioEncodeOMX
AudioEncodeOMX	core/audioEncodeOMX.h	/^class AudioEncodeOMX : public IAudioEncodeInterface, public IAudioCaptureObserver {$/;"	c
AutoSavePath	netprotocal/TPCCommandStruct.h	/^	char AutoSavePath[512];$/;"	m	struct:tagPRACCParam
BASE_ADDR	core/constDefines.h	6;"	d
BITMAPFILE	utils/bmpfile.h	/^} BITMAPFILE;$/;"	t	typeref:struct:tagBITMAP
BITMAPFILEHEADER	utils/bmpfile.h	/^} BITMAPFILEHEADER;$/;"	t	typeref:struct:tagBITMAPFILEHEADER
BITMAPINFO	utils/bmpfile.h	/^} BITMAPINFO;$/;"	t	typeref:struct:tagBITMAPINFO
BITMAPINFOHEADER	utils/bmpfile.h	/^} BITMAPINFOHEADER;$/;"	t	typeref:struct:tagBITMAPINFOHEADER
BMPUtils	utils/bmpfile.h	/^class BMPUtils {$/;"	c
BOOL	typedef.h	/^typedef     int BOOL;$/;"	t
BPIPINFO	netprotocal/SCSMCommandStruct.h	/^}BPIPINFO;$/;"	t	typeref:struct:tagBPIPINFO
BP_SM_CONNECT	Command/AssistCommandDefines.h	/^	,BP_SM_CONNECT									\/\/\/ 通知小助手连接$/;"	e	enum:tagALL2SE
BP_SM_DISCONNECT	Command/AssistCommandDefines.h	/^	,BP_SM_DISCONNECT								\/\/\/ 通知小助手断开连接$/;"	e	enum:tagALL2SE
BP_SM_LIVEPLAY	Command/AssistCommandDefines.h	/^	,BP_SM_LIVEPLAY$/;"	e	enum:tagALL2SE
BP_SM_LIVESTOP	Command/AssistCommandDefines.h	/^	,BP_SM_LIVESTOP$/;"	e	enum:tagALL2SE
BP_SM_PLAYMEDIA	Command/AssistCommandDefines.h	/^	,BP_SM_PLAYMEDIA								\/\/\/ 通知小助手播放指定媒体文件，后接PR2COM_Data1，cValue指定要播放的文件名$/;"	e	enum:tagALL2SE
BP_SM_SAVEMEDIA	Command/AssistCommandDefines.h	/^	,BP_SM_SAVEMEDIA								\/\/\/ 通知小助手保存的文件名，小助手收到此命令后可提示用户是否保存，后接PR2COM_Data1，cValue指定要播放的文件名$/;"	e	enum:tagALL2SE
BP_SM_STOPMEDIA	Command/AssistCommandDefines.h	/^	,BP_SM_STOPMEDIA								\/\/\/ 通知小助手停止播放$/;"	e	enum:tagALL2SE
BP_SM_STREAMNOTIFY	Command/AssistCommandDefines.h	/^	,BP_SM_STREAMNOTIFY								\/\/\/ 流媒体提示消息，小助手收到此命令后提示用户，后接PR2COM_Data1，cValue指定错误内容$/;"	e	enum:tagALL2SE
BP_SM_TEMPLATELIST	Command/AssistCommandDefines.h	/^	,BP_SM_TEMPLATELIST				= 	0x00004390	\/\/\/ Template List From BP Stream$/;"	e	enum:tagALL2SE
BUFALIGN	KVideo/audio/codec_engine.cpp	34;"	d	file:
BUFALIGN	KVideo/audio/codec_engine.cpp	38;"	d	file:
BUFALIGN	core/audioEncodeFAAC.h	38;"	d
BYTE	typedef.h	/^typedef  	unsigned char	BYTE ;$/;"	t
BaseInfo	netprotocal/ICIICommandStruct.h	/^	UnitBaseInfo		BaseInfo;$/;"	m	struct:tagPR2COM_UnitBaseInfo
BaseInfoIndex	netprotocal/ICIIUnitCellDef.h	6;"	d
BaseMode	core/baseMode.cpp	/^BaseMode::BaseMode(Kernel* pKernel) {$/;"	f	class:BaseMode
BaseMode	core/baseMode.h	/^class BaseMode {$/;"	c
BaseRecordParam	netprotocal/SCSMCommandStruct.h	/^}BaseRecordParam;$/;"	t	typeref:struct:tagPRParam
BatchAllocator	monitor/json_batchallocator.h	/^   BatchAllocator( unsigned int objectsPerPage = 255 )$/;"	f	class:Json::BatchAllocator
BatchAllocator	monitor/json_batchallocator.h	/^class BatchAllocator$/;"	c	namespace:Json
BatchInfo	monitor/json_batchallocator.h	/^   struct BatchInfo$/;"	s	class:Json::BatchAllocator
BucketIndex	monitor/value.h	/^      typedef unsigned int BucketIndex;$/;"	t	class:Json::ValueInternalMap
CAMERA_TYPE	Command/AssistCommandDefines.h	60;"	d
CAPTURE_DEVICE	KVideo/captureVideoDefines.h	21;"	d
CAPTURE_NAME	KVideo/captureVideoDefines.h	22;"	d
CARD_INFO_H	KVideo/CardInfo.h	2;"	d
CENTRE_CONTROL_TYPE	Command/AssistCommandDefines.h	59;"	d
CFunction	Command/Function.cpp	/^CFunction::CFunction(): m_pKernel(NULL),$/;"	f	class:CFunction
CFunction	Command/Function.h	/^class CFunction : public IUDPCommandListener , public ITimerListener {$/;"	c
CHECK_SUM_LEN	Command/AssistCommandDefines.h	3;"	d
CHUNKSIZE	core/DecodeUtils.h	29;"	d
CHUNK_TO_READ	core/DecodeUtils.h	30;"	d
CMD_ABLE_ICII	netprotocal/ICIICommandDef.h	15;"	d
CMD_AD_RECVMSG	kerneldef.h	13;"	d
CMD_AD_RECVMSG	netprotocal/ICIICommandDef.h	95;"	d
CMD_AD_SENDMSG	kerneldef.h	12;"	d
CMD_AD_SENDMSG	netprotocal/ICIICommandDef.h	94;"	d
CMD_AP_QUERYTPC	netprotocal/ICIICommandDef.h	168;"	d
CMD_AP_TPCENTER	netprotocal/ICIICommandDef.h	170;"	d
CMD_AP_TPCRESPONSE	netprotocal/ICIICommandDef.h	169;"	d
CMD_AP_VIDEOBROADCAST	netprotocal/ICIICommandDef.h	172;"	d
CMD_AS_CONTROL	netprotocal/ICIICommandDef.h	180;"	d
CMD_AS_RESPONSE	netprotocal/ICIICommandDef.h	182;"	d
CMD_CT_ASSISUSER	netprotocal/ICIICommandDef.h	164;"	d
CMD_CT_BEGIN	netprotocal/ICIICommandDef.h	99;"	d
CMD_CT_END	netprotocal/ICIICommandDef.h	100;"	d
CMD_CT_FROMUNITMESSAGE	netprotocal/ICIICommandDef.h	139;"	d
CMD_CT_HEART	netprotocal/ICIICommandDef.h	137;"	d
CMD_CT_ICCONTROL	netprotocal/ICIICommandDef.h	129;"	d
CMD_CT_LOGIN	netprotocal/ICIICommandDef.h	102;"	d
CMD_CT_LOGINRESULT	netprotocal/ICIICommandDef.h	109;"	d
CMD_CT_LOGOUT	netprotocal/ICIICommandDef.h	131;"	d
CMD_CT_MVW2SVWSYNC	netprotocal/ICIICommandDef.h	147;"	d
CMD_CT_QUERYRECSTATE	netprotocal/ICIICommandDef.h	135;"	d
CMD_CT_QUERYUNITSTATE	netprotocal/ICIICommandDef.h	133;"	d
CMD_CT_RECSTATE	netprotocal/ICIICommandDef.h	118;"	d
CMD_CT_SVW2MVW	netprotocal/ICIICommandDef.h	143;"	d
CMD_CT_TOUNITMESSAGE	netprotocal/ICIICommandDef.h	141;"	d
CMD_CT_TVREC_CHECK	netprotocal/ICIICommandDef.h	149;"	d
CMD_CT_TVREC_REC	netprotocal/ICIICommandDef.h	150;"	d
CMD_CT_TVREC_STOP	netprotocal/ICIICommandDef.h	151;"	d
CMD_CT_TVWALLCTRL	netprotocal/ICIICommandDef.h	123;"	d
CMD_CT_TVWALLMAIN	netprotocal/ICIICommandDef.h	127;"	d
CMD_CT_TVWALLSYNC	netprotocal/ICIICommandDef.h	125;"	d
CMD_CT_UNITSTATE	netprotocal/ICIICommandDef.h	116;"	d
CMD_CT_UPDATEUNITRESULT	netprotocal/ICIICommandDef.h	160;"	d
CMD_EVA_LOGIN	netprotocal/ICIICommandDef.h	184;"	d
CMD_EVA_LOGINRESULT	netprotocal/ICIICommandDef.h	187;"	d
CMD_PR_FROMSTREAM	netprotocal/SCSMCommandDef.h	5;"	d
CMD_PR_FROMTPC	netprotocal/TPCCommandDef.h	4;"	d
CMD_PR_TOSTREAM	netprotocal/SCSMCommandDef.h	33;"	d
CMD_PR_TOTPC	netprotocal/TPCCommandDef.h	28;"	d
CMD_RP_TVREC_REC	netprotocal/ICIICommandDef.h	154;"	d
CMD_RP_TVREC_STATE	netprotocal/ICIICommandDef.h	153;"	d
CMD_RP_TVREC_STOP	netprotocal/ICIICommandDef.h	155;"	d
CMD_SENDER_AD	netprotocal/CmdSenderRoleDef.h	6;"	d
CMD_SENDER_EVA	netprotocal/CmdSenderRoleDef.h	12;"	d
CMD_SENDER_ICII	netprotocal/CmdSenderRoleDef.h	7;"	d
CMD_SENDER_ITV	netprotocal/CmdSenderRoleDef.h	5;"	d
CMD_SENDER_KERNEL	netprotocal/CmdSenderRoleDef.h	13;"	d
CMD_SENDER_MS	netprotocal/CmdSenderRoleDef.h	11;"	d
CMD_SENDER_PT	netprotocal/CmdSenderRoleDef.h	8;"	d
CMD_SENDER_RS	netprotocal/CmdSenderRoleDef.h	9;"	d
CMD_SENDER_SVR	netprotocal/CmdSenderRoleDef.h	3;"	d
CMD_SENDER_TC	netprotocal/CmdSenderRoleDef.h	10;"	d
CMD_SENDER_WTV	netprotocal/CmdSenderRoleDef.h	4;"	d
CMD_SVR_RECVMSG	netprotocal/ICIICommandDef.h	96;"	d
CMD_SVR_SENDMSG	netprotocal/ICIICommandDef.h	97;"	d
CMD_TEST	netprotocal/ICIICommandDef.h	91;"	d
CMD_TYPE_ACK	netprotocal/ICIICommandDef.h	29;"	d
CMD_TYPE_COMMAND	netprotocal/ICIICommandDef.h	30;"	d
CMD_TYPE_POS	Command/AssistCommandDefines.h	16;"	d
CMD_WAITCHANGE	KVideo/captureVideoDefines.h	32;"	d
CODEC_ENGINE_ENABLE	config.h	3;"	d
CODEC_ENGINE_H	KVideo/audio/codec_engine.h	2;"	d
CODEC_PARAM_IN	KVideo/audio/SpeexCod.h	18;"	d
CODEC_PARAM_OUT	KVideo/audio/SpeexCod.h	24;"	d
COMMAND_BUF_COUNT	Command/AssistCommandDefines.h	110;"	d
COMMAND_MAXLEN	Command/AssistCommandDefines.h	109;"	d
CONFIGCLIENT_PORT	netprotocal/ICIICommandDef.h	27;"	d
CONTROL_PANEL_TYPE	Command/AssistCommandDefines.h	58;"	d
COURSE_ADDR_OFFSET	core/constDefines.h	23;"	d
COURSE_IMAGE_SIZE	core/constDefines.h	24;"	d
CPPTL_AUTOLINK_DLL	monitor/autolink.h	12;"	d
CPPTL_AUTOLINK_DLL	monitor/autolink.h	14;"	d
CPPTL_AUTOLINK_NAME	monitor/autolink.h	11;"	d
CPPTL_JSON_FEATURES_H_INCLUDED	monitor/features.h	2;"	d
CPPTL_JSON_H_INCLUDED	monitor/value.h	2;"	d
CPPTL_JSON_READER_H_INCLUDED	monitor/reader.h	2;"	d
CPU_LOAD	KVideo/audio/SpeexCod.h	25;"	d
CPU_OCCUPY	utils/commonUtils.cpp	/^}CPU_OCCUPY;$/;"	t	typeref:struct:__anon1	file:
CZString	monitor/json_value.cpp	/^Value::CZString::CZString( const CZString &other )$/;"	f	class:Json::Value::CZString
CZString	monitor/json_value.cpp	/^Value::CZString::CZString( const char *cstr, DuplicationPolicy allocate )$/;"	f	class:Json::Value::CZString
CZString	monitor/json_value.cpp	/^Value::CZString::CZString( int index )$/;"	f	class:Json::Value::CZString
CZString	monitor/value.h	/^      class CZString $/;"	c	class:Json::Value
CameraBufferPool	core/cameraBufferPool.cpp	/^CameraBufferPool::CameraBufferPool() {$/;"	f	class:CameraBufferPool
CameraBufferPool	core/cameraBufferPool.h	/^class CameraBufferPool$/;"	c
CameraCurControl_CurCamera_Offset	netprotocal/ICIIUnitCellDef.h	342;"	d
CameraCurControl_Len	netprotocal/ICIIUnitCellDef.h	340;"	d
CameraCurControl_Offset	netprotocal/ICIIUnitCellDef.h	339;"	d
CameraFrameBuffer	core/cameraBufferPool.h	/^}CameraFrameBuffer;$/;"	t	typeref:struct:stCameraFrameBuffer
CameraID	netprotocal/ICIICommandStruct.h	/^	BYTE			CameraID;$/;"	m	struct:tagPR2COM_UnitState
CaptureSDI	KVideo/captureSDIVideo.cpp	/^CaptureSDI::CaptureSDI(int aIndex) : m_bExit(false) {$/;"	f	class:CaptureSDI
CaptureSDI	KVideo/captureSDIVideo.h	/^class CaptureSDI {$/;"	c
CaptureSDI0SIZE	core/constDefines.h	10;"	d
CaptureSDI1SIZE	core/constDefines.h	11;"	d
CaptureSDITask	KVideo/captureSDIVideo.cpp	/^void* CaptureSDI::CaptureSDITask(void* pParam) {$/;"	f	class:CaptureSDI
CaptureVGA	KVideo/captureVga.cpp	/^CaptureVGA::CaptureVGA() : m_bExit(false) {$/;"	f	class:CaptureVGA
CaptureVGA	KVideo/captureVga.h	/^class CaptureVGA {$/;"	c
CaptureVGASIZE	core/constDefines.h	9;"	d
CaptureVGATask	KVideo/captureVga.cpp	/^void* CaptureVGA::CaptureVGATask(void* pParam) {$/;"	f	class:CaptureVGA
CardInfo	KVideo/CardInfo.cpp	/^CardInfo::CardInfo() :$/;"	f	class:CardInfo
CardInfo	KVideo/CardInfo.h	/^class CardInfo {$/;"	c	namespace:KVideo
Char	monitor/reader.h	/^      typedef char Char;$/;"	t	class:Json::Reader
CheckVGAStateTask	utils/vgaState.cpp	/^void* VGAStateHandle::CheckVGAStateTask(void* pParam) {$/;"	f	class:VGAStateHandle
ChildValues	monitor/writer.h	/^      typedef std::vector<std::string> ChildValues;$/;"	t	class:Json::StyledStreamWriter
ChildValues	monitor/writer.h	/^      typedef std::vector<std::string> ChildValues;$/;"	t	class:Json::StyledWriter
ClassState	netprotocal/ICIICommandStruct.h	/^typedef tagPR2COM_UnitState ClassState;$/;"	t
ClassState_AutoTrack_BitMask	netprotocal/ICIIUnitCellDef.h	214;"	d
ClassState_AutoTrack_BitOffset	netprotocal/ICIIUnitCellDef.h	213;"	d
ClassState_AutoTrack_Offset	netprotocal/ICIIUnitCellDef.h	212;"	d
ClassState_Interaction_BitMask	netprotocal/ICIIUnitCellDef.h	222;"	d
ClassState_Interaction_BitOffset	netprotocal/ICIIUnitCellDef.h	221;"	d
ClassState_Interaction_Offset	netprotocal/ICIIUnitCellDef.h	220;"	d
ClassState_Len	netprotocal/ICIIUnitCellDef.h	206;"	d
ClassState_Offset	netprotocal/ICIIUnitCellDef.h	205;"	d
ClassState_Policy_BitMask	netprotocal/ICIIUnitCellDef.h	218;"	d
ClassState_Policy_BitOffset	netprotocal/ICIIUnitCellDef.h	217;"	d
ClassState_Policy_Offset	netprotocal/ICIIUnitCellDef.h	216;"	d
ClassState_Record_BitMask	netprotocal/ICIIUnitCellDef.h	226;"	d
ClassState_Record_BitOffset	netprotocal/ICIIUnitCellDef.h	225;"	d
ClassState_Record_Offset	netprotocal/ICIIUnitCellDef.h	224;"	d
ClassState_State_BitMask	netprotocal/ICIIUnitCellDef.h	210;"	d
ClassState_State_BitOffset	netprotocal/ICIIUnitCellDef.h	209;"	d
ClassState_State_Offset	netprotocal/ICIIUnitCellDef.h	208;"	d
ClassWxManager	liveCourse/classWxManager.cpp	/^ClassWxManager::ClassWxManager()$/;"	f	class:ClassWxManager
ClassWxManager	liveCourse/classWxManager.h	/^class ClassWxManager : public IMtgListener, public ITimerListener {$/;"	c
CodeConverter	utils/codeConverter.cpp	/^CodeConverter::CodeConverter(const char *from_charset,const char *to_charset) {$/;"	f	class:CodeConverter
CodeConverter	utils/codeConverter.h	/^class CodeConverter {$/;"	c
ColorConvertUtils	utils/colorConvert.h	/^class ColorConvertUtils {$/;"	c
CommentInfo	monitor/json_value.cpp	/^Value::CommentInfo::CommentInfo()$/;"	f	class:Json::Value::CommentInfo
CommentInfo	monitor/value.h	/^      struct CommentInfo$/;"	s	class:Json::Value
CommentPlacement	monitor/value.h	/^   enum CommentPlacement$/;"	g	namespace:Json
CommonUtils	utils/commonUtils.h	/^class CommonUtils {$/;"	c
CommuniteConnectParam	netprotocal/ICIIUnitCellDef.h	/^	BYTE				CommuniteConnectParam[8];$/;"	m	struct:tagUnitDevInfo
CommuniteConnectType	netprotocal/ICIIUnitCellDef.h	/^	WORD				CommuniteConnectType;$/;"	m	struct:tagUnitDevInfo
ComponentWrapper	core/OMXCommonDef.h	/^} ComponentWrapper;$/;"	t	typeref:struct:tagComponentWrapper
ConfigureUIA	core/msgq.h	/^typedef struct ConfigureUIA$/;"	s
ConfigureUIA	core/msgq.h	/^} ConfigureUIA;$/;"	t	typeref:struct:ConfigureUIA
ConnInConnOutTask	core/Mp4Player.cpp	/^void* Mp4FilePlayer::ConnInConnOutTask(void *threadsArg) {$/;"	f	class:Mp4FilePlayer
ConnInConnOutTask	core/mixtureMode_IPC.cpp	/^void* MixtureMode_IPC::ConnInConnOutTask(void *threadsArg) {$/;"	f	class:MixtureMode_IPC
ConnInConnOutTask	core/mixtureMode_SDI.cpp	/^void* MixtureMode_SDI::ConnInConnOutTask(void *threadsArg) {$/;"	f	class:MixtureMode_SDI
ConnInConnOutTask	core/movieHeaderTail.cpp	/^void* MovieHeaderTail::ConnInConnOutTask(void *threadsArg) {$/;"	f	class:MovieHeaderTail
ConnInConnOutTask	core/resourceMode_SDI.cpp	/^void* ResourceModeHandle_SDI::ConnInConnOutTask(void *threadsArg) {$/;"	f	class:ResourceModeHandle_SDI
ConnectParam	netprotocal/ICIIUnitCellDef.h	/^struct ConnectParam$/;"	s
CourseName	netprotocal/TPCCommandStruct.h	/^	char CourseName[50];$/;"	m	struct:tagPRCourseParam
CourseWxManager	liveCourse/courseWxManager.cpp	/^CourseWxManager::CourseWxManager()$/;"	f	class:CourseWxManager
CourseWxManager	liveCourse/courseWxManager.h	/^class CourseWxManager : public IMtgListener, public ITimerListener {$/;"	c
CurState	netprotocal/SCSMCommandStruct.h	/^	WORD CurState;$/;"	m	struct:tagStreamMediaState
CustomerMaxCount	netprotocal/ICIICommandStruct.h	222;"	d
DATA1_C_LEN	netprotocal/ICIICommandDef.h	42;"	d
DCARGS	.xdcenv.mak	/^override XDCARGS = DEVICE="TI816X" PROGRAMS="APP_CLIENT DSP_SERVER" GPPOS="LINUX_GCC" ti.targets.C64P="" ti.targets.C674="\/home\/houstar\/ezsdk\/dsp-devkit\/cgt6x_7_3_4" ti.targets.arm.elf.M3="" ti.targets.elf.C64P="" ti.targets.elf.C64T="" ti.targets.elf.C66="" ti.targets.elf.C674="\/home\/houstar\/ezsdk\/dsp-devkit\/cgt6x_7_3_4" gnu.targets.arm.GCArmv5T=";LONGNAME=\/home\/houstar\/CodeSourcery\/Sourcery_G++_Lite\/bin\/arm-none-linux-gnueabi-gcc;profiles.release.compileOpts.copts=-O2 -ffunction-sections" google.targets.arm.Bionic=";LONGNAME=;libcDir=;fsDir="$/;"	m
DCBUILDCFG	.xdcenv.mak	/^override XDCBUILDCFG = \/home\/houstar\/ezsdk\/component-sources\/codec_engine_3_22_01_06\/codec_engine.bld$/;"	m
DCPATH	.xdcenv.mak	/^override XDCPATH = \/home\/houstar\/DM8168\/code\/codec_engine\/example\/ti\/sdo\/ce\/examples\/apps\/armlivemedia\/..\/..\/..\/..\/..\/..;\/home\/houstar\/ezsdk\/\/component-sources\/xdctools_3_23_03_53\/packages;\/home\/houstar\/ezsdk\/component-sources\/xdais_7_22_00_03\/packages;\/home\/houstar\/ezsdk\/component-sources\/bios_6_33_05_46\/packages;\/home\/houstar\/ezsdk\/component-sources\/linuxutils_3_22_00_02\/packages;\/home\/houstar\/ezsdk\/component-sources\/syslink_2_20_02_20\/packages;\/home\/houstar\/ezsdk\/component-sources\/osal_1_22_01_09\/packages;\/home\/houstar\/ezsdk\/component-sources\/framework_components_3_22_01_07\/packages;\/home\/houstar\/ezsdk\/component-sources\/edma3lld_02_11_05_02\/packages;\/home\/houstar\/ezsdk\/component-sources\/ipc_1_24_03_32\/packages;\/home\/houstar\/ezsdk\/component-sources\/codec_engine_3_22_01_06\/\/packages$/;"	m
DCROOT	.xdcenv.mak	/^override XDCROOT = \/home\/houstar\/ezsdk\/component-sources\/xdctools_3_23_03_53$/;"	m
DCTARGETS	.xdcenv.mak	/^override XDCTARGETS = $/;"	m
DEC_ADDR_OFFSET_C1	KVideo/audio/SpeexCod.h	13;"	d
DEC_CHANNEL_SIZE	KVideo/audio/SpeexCod.h	15;"	d
DEF_PIX_FMT	KVideo/captureVga.cpp	14;"	d	file:
DESTINATION_POS	Command/AssistCommandDefines.h	14;"	d
DEVICE_ADDR_ONE_FRAME_LEN	Command/AssistCommandDefines.h	46;"	d
DEVICE_CONTROL_FLAG	Command/AssistCommandDefines.h	102;"	d
DEVICE_DATA_HEAD_LEN	Command/AssistCommandDefines.h	97;"	d
DEVICE_DATA_LEN	Command/AssistCommandDefines.h	98;"	d
DEVICE_DATA_PROTOCOL	Command/AssistCommandDefines.h	36;"	d
DEVICE_ERROR_NO_SPACE	web/modelStatus.h	15;"	d
DEVICE_ONE_FRAME_LEN	Command/AssistCommandDefines.h	99;"	d
DEVICE_SUB_ADDR_HEAD_LEN	Command/AssistCommandDefines.h	45;"	d
DFRAMESIZE	KVideo/audio/codec_engine.cpp	/^	int DFRAMESIZE = 0;$/;"	m	namespace:__anon3	file:
DISPLAY_DEVICE	core/v4lDisplay.h	18;"	d
DISPLAY_HEIGHT	core/constDefines.h	101;"	d
DISPLAY_MAX_BUFFER	core/v4lDisplay.h	21;"	d
DISPLAY_NAME	core/v4lDisplay.h	19;"	d
DISPLAY_VENC_MODE	core/constDefines.h	102;"	d
DISPLAY_WIDTH	core/constDefines.h	100;"	d
DSPSERVERNAME	core/msgq.h	85;"	d
DWORD	typedef.h	/^typedef     unsigned long    DWORD;$/;"	t
DataCallback	KVideo/HikVideo.cpp	/^void HikVideo::DataCallback(DWORD dwDataType, BYTE *pBuffer, DWORD dwBufSize) {$/;"	f	class:HikVideo
DebugPortState	netprotocal/ICIICommandStruct.h	/^	eCommonState	DebugPortState;$/;"	m	struct:tagPR2COM_UnitState
DecodeThread	KVideo/audio/codec_engine.cpp	/^void* DecodeThread(void* param)$/;"	f
DecodeUtils	core/DecodeUtils.h	/^class DecodeUtils {$/;"	c
Decode_ChunkingCtxInit	core/DecodeUtils.cpp	/^void DecodeUtils::Decode_ChunkingCtxInit(H264_ChunkingCtx *c) {$/;"	f	class:DecodeUtils
Decode_DoChunking	core/DecodeUtils.cpp	/^AVC_Err DecodeUtils::Decode_DoChunking(H264_ChunkingCtx *c, AVChunk_Buf *opBufs,$/;"	f	class:DecodeUtils
Decode_GetNextFrameSize	core/DecodeUtils.cpp	/^unsigned int DecodeUtils::Decode_GetNextFrameSize(H264_ParsingCtx *pc) {$/;"	f	class:DecodeUtils
Decode_ParserInit	core/DecodeUtils.cpp	/^void DecodeUtils::Decode_ParserInit(H264_ParsingCtx *pc) {$/;"	f	class:DecodeUtils
Decode_VDEC_Reset_Parser	core/DecodeUtils.cpp	/^void DecodeUtils::Decode_VDEC_Reset_Parser(void *parserPtr) {$/;"	f	class:DecodeUtils
DefaultValueAllocator	monitor/json_value.cpp	/^class DefaultValueAllocator : public ValueAllocator$/;"	c	namespace:Json	file:
DevInfoStartIndex	netprotocal/ICIIUnitCellDef.h	9;"	d
DevStatTable	netprotocal/ICIIUnitCellDef.h	/^}DevStatTable;$/;"	t	typeref:struct:tagDevStatTable
DevStatisticsIndex	netprotocal/ICIIUnitCellDef.h	10;"	d
DeviceCurCtr_CurDev_Offset	netprotocal/ICIIUnitCellDef.h	181;"	d
DeviceCurCtr_Len	netprotocal/ICIIUnitCellDef.h	179;"	d
DeviceCurCtr_Offset	netprotocal/ICIIUnitCellDef.h	178;"	d
DeviceCurUse_CurDev_Offset	netprotocal/ICIIUnitCellDef.h	233;"	d
DeviceCurUse_Len	netprotocal/ICIIUnitCellDef.h	231;"	d
DeviceCurUse_Offset	netprotocal/ICIIUnitCellDef.h	230;"	d
DisplayHandle	core/v4lDisplay.cpp	/^DisplayHandle::DisplayHandle() {$/;"	f	class:DisplayHandle
DisplayHandle	core/v4lDisplay.h	/^class DisplayHandle {$/;"	c
DualScreenMode_IPC	core/dualScreenMode_IPC.cpp	/^DualScreenMode_IPC::DualScreenMode_IPC(Kernel *pKernel)$/;"	f	class:DualScreenMode_IPC
DualScreenMode_IPC	core/dualScreenMode_IPC.h	/^class DualScreenMode_IPC : public MixtureMode_IPC$/;"	c
DualScreenMode_SDI	core/dualScreenMode_SDI.cpp	/^DualScreenMode_SDI::DualScreenMode_SDI(Kernel *pKernel)$/;"	f	class:DualScreenMode_SDI
DualScreenMode_SDI	core/dualScreenMode_SDI.h	/^class DualScreenMode_SDI : public MixtureMode_SDI$/;"	c
DummyValueAllocatorInitializer	monitor/json_value.cpp	/^   DummyValueAllocatorInitializer() $/;"	f	struct:Json::DummyValueAllocatorInitializer
DummyValueAllocatorInitializer	monitor/json_value.cpp	/^static struct DummyValueAllocatorInitializer {$/;"	s	namespace:Json	file:
DuplicationPolicy	monitor/value.h	/^         enum DuplicationPolicy $/;"	g	class:Json::Value::CZString
EC_DELAY_100	KVideo/audio/codec_engine.cpp	/^	const int EC_DELAY_100 = 5;	 \/\/ 100ms$/;"	m	namespace:__anon3	file:
EC_DELAY_200	KVideo/audio/codec_engine.cpp	/^	const int EC_DELAY_200 = 10; \/\/ 200ms$/;"	m	namespace:__anon3	file:
EC_DELAY_300	KVideo/audio/codec_engine.cpp	/^	const int EC_DELAY_300 = 15; \/\/ 300ms$/;"	m	namespace:__anon3	file:
EC_DELAY_400	KVideo/audio/codec_engine.cpp	/^	const int EC_DELAY_400 = 20; \/\/ 400ms$/;"	m	namespace:__anon3	file:
EC_DELAY_500	KVideo/audio/codec_engine.cpp	/^	const int EC_DELAY_500 = 25; \/\/ 500ms$/;"	m	namespace:__anon3	file:
EC_DELAY_600	KVideo/audio/codec_engine.cpp	/^	const int EC_DELAY_600 = 30; \/\/ 600ms$/;"	m	namespace:__anon3	file:
EColorFormat	utils/colorConvert.h	/^enum EColorFormat{$/;"	g
EDeviceChannel	setting.h	/^enum EDeviceChannel {$/;"	g
EDisplayContext	core/HDMIDisplayManager.h	/^	enum EDisplayContext {$/;"	g	class:HDMIDisplayManager
EFRAMESIZE	KVideo/audio/codec_engine.cpp	/^	int EFRAMESIZE = 0;$/;"	m	namespace:__anon3	file:
ELiveCourseCmd	liveCourse/livemtgConstDefine.h	/^enum ELiveCourseCmd {$/;"	g
ELiveCourseMediaType	liveCourse/livemtgConstDefine.h	/^enum ELiveCourseMediaType {$/;"	g
ELiveCourseRole	liveCourse/livemtgConstDefine.h	/^enum ELiveCourseRole {$/;"	g
ENABLE_AAC_OFFSET	KVideo/audio/SpeexCod.h	19;"	d
ENABLE_ECHO_CANCAL_OFFSET	KVideo/audio/SpeexCod.h	20;"	d
ENABLE_MIX_REMOTE_OFFSET	KVideo/audio/SpeexCod.h	21;"	d
ENCODE_NAME	KVideo/audio/codec_engine.cpp	/^	const String ENCODE_NAME   = "speexenc";$/;"	m	namespace:__anon3	file:
ENC_ADDR_OFFSET	KVideo/audio/SpeexCod.h	12;"	d
EPipeCmdType	core/constDefines.h	/^enum EPipeCmdType$/;"	g
EPortType	core/constDefines.h	/^enum EPortType {$/;"	g
EPrimeScene	core/constDefines.h	/^enum EPrimeScene {$/;"	g
ERecordMode	setting.h	/^enum ERecordMode{$/;"	g
ERecordResolution	setting.h	/^enum ERecordResolution{$/;"	g
EVGAStatus	KVideo/vgaProviderSystem.h	/^enum EVGAStatus {$/;"	g
EWebEventType	liveCourse/livemtgConstDefine.h	/^enum EWebEventType {$/;"	g
EWebMessageType	liveCourse/livemtgConstDefine.h	/^enum EWebMessageType {$/;"	g
EXAMPLES_ROOTDIR	makefile	/^EXAMPLES_ROOTDIR := $(CURDIR)\/..\/..\/..\/..\/..\/..$/;"	m
EdmaUtils	core/edma.cpp	/^EdmaUtils::EdmaUtils() {$/;"	f	class:EdmaUtils
EdmaUtils	core/edma.h	/^class EdmaUtils {$/;"	c
EncodeThread	KVideo/audio/codec_engine.cpp	/^void* EncodeThread(void* param)$/;"	f
EncodeType	netprotocal/TPCCommandStruct.h	/^	eEncodeType EncodeType;$/;"	m	struct:tagPRRecordParam
EncodeType_FLV	netprotocal/ICIICommandStruct.h	/^	, EncodeType_FLV$/;"	e	enum:tagEncodeType
EncodeType_MP4	netprotocal/ICIICommandStruct.h	/^	, EncodeType_MP4	=0x03$/;"	e	enum:tagEncodeType
EncodeType_WMV	netprotocal/ICIICommandStruct.h	/^	EncodeType_WMV		=0x00$/;"	e	enum:tagEncodeType
ErrorInfo	monitor/reader.h	/^      class ErrorInfo$/;"	c	class:Json::Reader
Errors	monitor/reader.h	/^      typedef std::deque<ErrorInfo> Errors;$/;"	t	class:Json::Reader
EventID	liveCourse/livemtgConstDefine.h	/^	int EventID; \/\/事件id参见对应关系Excel$/;"	m	struct:tagLiveMtgWebMessage
ExchangeState	netprotocal/ICIICommandStruct.h	/^	eCommonState	ExchangeState;	\/\/\/ ���߻������?���߻�����ֹ$/;"	m	struct:tagPR2COM_UnitState
Extra	netprotocal/ICIIUnitCellDef.h	/^	BYTE Extra;$/;"	m	struct:IOConnectParam
FALSE	typedef.h	21;"	d
FFMIN	KVideo/audioCapture.cpp	10;"	d	file:
FFMIN	core/audioEncode.cpp	12;"	d	file:
FIFO_H	KVideo/audio/fifo.h	2;"	d
FLAG_ASSISENTER	netprotocal/ICIICommandDef.h	165;"	d
FLAG_ASSISLEAVE	netprotocal/ICIICommandDef.h	166;"	d
FLAG_AS_CAMERA_DOWN	netprotocal/AssistFlagDef.h	21;"	d
FLAG_AS_CAMERA_FAR	netprotocal/AssistFlagDef.h	25;"	d
FLAG_AS_CAMERA_LEFT	netprotocal/AssistFlagDef.h	22;"	d
FLAG_AS_CAMERA_LEFT_DOWN	netprotocal/AssistFlagDef.h	31;"	d
FLAG_AS_CAMERA_LEFT_UP	netprotocal/AssistFlagDef.h	30;"	d
FLAG_AS_CAMERA_NEAR	netprotocal/AssistFlagDef.h	24;"	d
FLAG_AS_CAMERA_PRESET	netprotocal/AssistFlagDef.h	19;"	d
FLAG_AS_CAMERA_RIGHT	netprotocal/AssistFlagDef.h	23;"	d
FLAG_AS_CAMERA_RIGHT_DOWN	netprotocal/AssistFlagDef.h	33;"	d
FLAG_AS_CAMERA_RIGHT_UP	netprotocal/AssistFlagDef.h	32;"	d
FLAG_AS_CAMERA_SPEED	netprotocal/AssistFlagDef.h	28;"	d
FLAG_AS_CAMERA_STOP	netprotocal/AssistFlagDef.h	29;"	d
FLAG_AS_CAMERA_UP	netprotocal/AssistFlagDef.h	20;"	d
FLAG_AS_CAMERA_ZOOMADD	netprotocal/AssistFlagDef.h	26;"	d
FLAG_AS_CAMERA_ZOOMDEC	netprotocal/AssistFlagDef.h	27;"	d
FLAG_AS_COURSE	netprotocal/AssistFlagDef.h	37;"	d
FLAG_AS_ENTER	netprotocal/AssistFlagDef.h	3;"	d
FLAG_AS_LEAVE	netprotocal/AssistFlagDef.h	4;"	d
FLAG_AS_LIVEPAUSE	netprotocal/AssistFlagDef.h	7;"	d
FLAG_AS_LIVERESUME	netprotocal/AssistFlagDef.h	9;"	d
FLAG_AS_LIVESTART	netprotocal/AssistFlagDef.h	6;"	d
FLAG_AS_LIVESTOP	netprotocal/AssistFlagDef.h	8;"	d
FLAG_AS_SETTING	netprotocal/AssistFlagDef.h	17;"	d
FLAG_AS_SHAREPATH	netprotocal/AssistFlagDef.h	38;"	d
FLAG_AS_SWITCHSCENCE	netprotocal/AssistFlagDef.h	15;"	d
FLAG_AS_TAKEOVEREND	netprotocal/AssistFlagDef.h	13;"	d
FLAG_AS_TAKEOVERSTART	netprotocal/AssistFlagDef.h	12;"	d
FLAG_AS_TEACHER	netprotocal/AssistFlagDef.h	36;"	d
FLAG_AS_VOLADD	netprotocal/AssistFlagDef.h	10;"	d
FLAG_AS_VOLDEC	netprotocal/AssistFlagDef.h	11;"	d
FLAG_CT_TVREC_FAIL	netprotocal/ICIICommandDef.h	158;"	d
FLAG_CT_TVREC_SUCCEES	netprotocal/ICIICommandDef.h	157;"	d
FLAG_FROMAS_CAMERNCTRL	netprotocal/TPCCommandDef.h	25;"	d
FLAG_FROMAS_RESPONSE	netprotocal/TPCCommandDef.h	23;"	d
FLAG_FROMSTREAM_CONNECT	netprotocal/SCSMCommandDef.h	7;"	d
FLAG_FROMSTREAM_DISCONNECT	netprotocal/SCSMCommandDef.h	8;"	d
FLAG_FROMSTREAM_FREEZED	netprotocal/SCSMCommandDef.h	24;"	d
FLAG_FROMSTREAM_HEARTBEAT	netprotocal/SCSMCommandDef.h	10;"	d
FLAG_FROMSTREAM_NOTIFYERROR	netprotocal/SCSMCommandDef.h	30;"	d
FLAG_FROMSTREAM_REPONSESYSTEMSTATUS	netprotocal/SCSMCommandDef.h	96;"	d
FLAG_FROMSTREAM_RESPONSE	netprotocal/SCSMCommandDef.h	12;"	d
FLAG_FROMSTREAM_STATE	netprotocal/SCSMCommandDef.h	19;"	d
FLAG_FROMSTREAM_SWITCHMAIN	netprotocal/SCSMCommandDef.h	26;"	d
FLAG_FROMSTREAM_SWITCHSTUDENT	netprotocal/SCSMCommandDef.h	28;"	d
FLAG_FROMSTREAM_SWITCHTEACHER	netprotocal/SCSMCommandDef.h	27;"	d
FLAG_FROMTPC_ACCPARAM	netprotocal/TPCCommandDef.h	17;"	d
FLAG_FROMTPC_CONNECT	netprotocal/TPCCommandDef.h	6;"	d
FLAG_FROMTPC_COURSEPARAM	netprotocal/TPCCommandDef.h	13;"	d
FLAG_FROMTPC_DISCONNECT	netprotocal/TPCCommandDef.h	7;"	d
FLAG_FROMTPC_HEARTBEAT	netprotocal/TPCCommandDef.h	10;"	d
FLAG_FROMTPC_HOOK_KEY	netprotocal/TPCCommandDef.h	21;"	d
FLAG_FROMTPC_HOOK_MOUSE	netprotocal/TPCCommandDef.h	20;"	d
FLAG_FROMTPC_RECORDPARAM	netprotocal/TPCCommandDef.h	15;"	d
FLAG_HEART_QUERY	netprotocal/CTHeartbeatFlagDef.h	3;"	d
FLAG_HEART_RESPONSE	netprotocal/CTHeartbeatFlagDef.h	4;"	d
FLAG_ICCONTROL_EXIT	netprotocal/ICCmdFlagDef.h	3;"	d
FLAG_ICCONTROL_POWEROFF	netprotocal/ICCmdFlagDef.h	4;"	d
FLAG_ICCONTROL_REBOOT	netprotocal/ICCmdFlagDef.h	5;"	d
FLAG_LOGINRESULT_ASSFULL	netprotocal/ICIICommandDef.h	113;"	d
FLAG_LOGINRESULT_DOGFAIL	netprotocal/ICIICommandDef.h	114;"	d
FLAG_LOGINRESULT_FAIL	netprotocal/ICIICommandDef.h	112;"	d
FLAG_LOGINRESULT_SUC	netprotocal/ICIICommandDef.h	111;"	d
FLAG_LOGIN_ASS	netprotocal/ICIICommandDef.h	106;"	d
FLAG_LOGIN_EVA	netprotocal/ICIICommandDef.h	185;"	d
FLAG_LOGIN_IC	netprotocal/ICIICommandDef.h	104;"	d
FLAG_LOGIN_REC	netprotocal/ICIICommandDef.h	107;"	d
FLAG_LOGIN_TVWALL	netprotocal/ICIICommandDef.h	105;"	d
FLAG_NB2SE_UPLOAD_FINISH_PPT	Command/AssistCommandDefines.h	186;"	d
FLAG_NB2SE_UPLOAD_FINISH_XML	Command/AssistCommandDefines.h	187;"	d
FLAG_NULL	netprotocal/ICIICommandDef.h	92;"	d
FLAG_RECSTATE_START	netprotocal/ICIICommandDef.h	120;"	d
FLAG_RECSTATE_STOP	netprotocal/ICIICommandDef.h	121;"	d
FLAG_SVW2MVW_CONNECT	netprotocal/ICIICommandDef.h	144;"	d
FLAG_SVW2MVW_DISCONNECT	netprotocal/ICIICommandDef.h	145;"	d
FLAG_TOAS_AVINFO	netprotocal/TPCCommandDef.h	48;"	d
FLAG_TOAS_QUERY	netprotocal/TPCCommandDef.h	46;"	d
FLAG_TOSTREAM_ACCPARAM	netprotocal/SCSMCommandDef.h	39;"	d
FLAG_TOSTREAM_CHANNEL	netprotocal/SCSMCommandDef.h	67;"	d
FLAG_TOSTREAM_COURSEOVER	netprotocal/SCSMCommandDef.h	61;"	d
FLAG_TOSTREAM_DEVICE_CHANNEL	netprotocal/SCSMCommandDef.h	73;"	d
FLAG_TOSTREAM_ENCCARDINFO	netprotocal/SCSMCommandDef.h	80;"	d
FLAG_TOSTREAM_FREEZE	netprotocal/SCSMCommandDef.h	70;"	d
FLAG_TOSTREAM_HEAD	netprotocal/SCSMCommandDef.h	63;"	d
FLAG_TOSTREAM_HEARTBEAT	netprotocal/SCSMCommandDef.h	45;"	d
FLAG_TOSTREAM_IPCINFO	netprotocal/SCSMCommandDef.h	78;"	d
FLAG_TOSTREAM_IPINFO	netprotocal/SCSMCommandDef.h	48;"	d
FLAG_TOSTREAM_IPUPDATE	netprotocal/SCSMCommandDef.h	37;"	d
FLAG_TOSTREAM_PAUSE	netprotocal/SCSMCommandDef.h	57;"	d
FLAG_TOSTREAM_PREVIEW	netprotocal/SCSMCommandDef.h	59;"	d
FLAG_TOSTREAM_PRPARAM	netprotocal/SCSMCommandDef.h	35;"	d
FLAG_TOSTREAM_PRSTATE	netprotocal/SCSMCommandDef.h	41;"	d
FLAG_TOSTREAM_QUERY	netprotocal/SCSMCommandDef.h	50;"	d
FLAG_TOSTREAM_QUERYSMSTATE	netprotocal/SCSMCommandDef.h	53;"	d
FLAG_TOSTREAM_REBOOT	netprotocal/SCSMCommandDef.h	90;"	d
FLAG_TOSTREAM_RECORD_MODE	netprotocal/SCSMCommandDef.h	84;"	d
FLAG_TOSTREAM_REPLAY	netprotocal/SCSMCommandDef.h	60;"	d
FLAG_TOSTREAM_SCENE	netprotocal/SCSMCommandDef.h	65;"	d
FLAG_TOSTREAM_START	netprotocal/SCSMCommandDef.h	56;"	d
FLAG_TOSTREAM_STOP	netprotocal/SCSMCommandDef.h	58;"	d
FLAG_TOSTREAM_SWITCHEFFECT	netprotocal/SCSMCommandDef.h	82;"	d
FLAG_TOSTREAM_SWITCH_VGA	netprotocal/SCSMCommandDef.h	88;"	d
FLAG_TOSTREAM_SYSTEMSTATUS	netprotocal/SCSMCommandDef.h	93;"	d
FLAG_TOSTREAM_TAIL	netprotocal/SCSMCommandDef.h	64;"	d
FLAG_TOSTREAM_THAW	netprotocal/SCSMCommandDef.h	71;"	d
FLAG_TOSTREAM_UTF8_RecordParam	netprotocal/SCSMCommandDef.h	86;"	d
FLAG_TOSTREAM_VOLADD	netprotocal/SCSMCommandDef.h	75;"	d
FLAG_TOSTREAM_VOLDEC	netprotocal/SCSMCommandDef.h	76;"	d
FLAG_TOSTREAM_WEBSERVICEPARAM	netprotocal/SCSMCommandDef.h	43;"	d
FLAG_TOTPC_COURSEPARAM	netprotocal/TPCCommandDef.h	31;"	d
FLAG_TOTPC_HEARTBEAT	netprotocal/TPCCommandDef.h	44;"	d
FLAG_TOTPC_IPINFO	netprotocal/TPCCommandDef.h	38;"	d
FLAG_TOTPC_IPUPDATE	netprotocal/TPCCommandDef.h	42;"	d
FLAG_TOTPC_PRSTRATEGYPARAM	netprotocal/TPCCommandDef.h	40;"	d
FLAG_TOTPC_RECORDPARAM	netprotocal/TPCCommandDef.h	33;"	d
FLAG_TOTPC_WEBSERVICEPARAM	netprotocal/TPCCommandDef.h	35;"	d
FLAG_TVWALLCTRL_16SCR	netprotocal/TVWallCmdFlagDef.h	5;"	d
FLAG_TVWALLCTRL_4SCR	netprotocal/TVWallCmdFlagDef.h	3;"	d
FLAG_TVWALLCTRL_9SCR	netprotocal/TVWallCmdFlagDef.h	4;"	d
FLAG_TVWALLCTRL_FIRSTPAGE	netprotocal/TVWallCmdFlagDef.h	8;"	d
FLAG_TVWALLCTRL_LASTPAGE	netprotocal/TVWallCmdFlagDef.h	9;"	d
FLAG_TVWALLCTRL_NEXTPAGE	netprotocal/TVWallCmdFlagDef.h	7;"	d
FLAG_TVWALLCTRL_PREPAGE	netprotocal/TVWallCmdFlagDef.h	6;"	d
FLAG_TVWALLSYNC_NOPATROL	netprotocal/TVWallCmdFlagDef.h	13;"	d
FLAG_TVWALLSYNC_PATROL_MID	netprotocal/TVWallCmdFlagDef.h	11;"	d
FLAG_TVWALLSYNC_PATROL_QUICK	netprotocal/TVWallCmdFlagDef.h	10;"	d
FLAG_TVWALLSYNC_PATROL_SLOW	netprotocal/TVWallCmdFlagDef.h	12;"	d
FLAG_UPDATEUNIT_FAIL	netprotocal/ICIICommandDef.h	162;"	d
FLAG_UPDATEUNIT_SUC	netprotocal/ICIICommandDef.h	161;"	d
FLAG_VIDEO_PR	netprotocal/ICIICommandDef.h	176;"	d
FLAG_VIDEO_STOP	netprotocal/ICIICommandDef.h	178;"	d
FLAG_VIDEO_TITLE	netprotocal/ICIICommandDef.h	177;"	d
FLAG_VIDEO_TOPVS	netprotocal/ICIICommandDef.h	175;"	d
FLAG_VIDEO_WM	netprotocal/ICIICommandDef.h	174;"	d
FOUR_ENCODE_DEVICE_TYPE	Command/AssistCommandDefines.h	63;"	d
FRAMEBUFFER	core/framePool.h	/^}FRAMEBUFFER;$/;"	t	typeref:struct:stFrameBuffer
FRAME_NO_POS	Command/AssistCommandDefines.h	15;"	d
FRAME_POOL	core/mixtureMode_IPC.h	14;"	d
FUSION_ID	kerneldef.h	14;"	d
FastWriter	monitor/json_writer.cpp	/^FastWriter::FastWriter()$/;"	f	class:Json::FastWriter
FastWriter	monitor/writer.h	/^   class JSON_API FastWriter : public Writer$/;"	c	namespace:Json
Features	monitor/features.h	/^   class JSON_API Features$/;"	c	namespace:Json
Features	monitor/json_reader.cpp	/^Features::Features()$/;"	f	class:Json::Features
FilmMode	netprotocal/ICIICommandStruct.h	/^	FilmMode = 0$/;"	e	enum:tagPRMode
FollowCardConnect	netprotocal/ICIICommandStruct.h	/^	eCommonState	FollowCardConnect;$/;"	m	struct:tagPR2COM_UnitState
FollowState	netprotocal/ICIICommandStruct.h	/^	eCommonState	FollowState;$/;"	m	struct:tagPR2COM_UnitState
FrameBufferPool	core/framePool.cpp	/^FrameBufferPool::FrameBufferPool() {$/;"	f	class:FrameBufferPool
FrameBufferPool	core/framePool.h	/^class FrameBufferPool$/;"	c
GetFrame	core/cameraBufferPool.cpp	/^char* CameraBufferPool::GetFrame(int &frameLen, int &channel) {$/;"	f	class:CameraBufferPool
GetFrame	core/framePool.cpp	/^char* FrameBufferPool::GetFrame(int &frameLen) {$/;"	f	class:FrameBufferPool
GetFrameIndex	Command/AssistCommandHandle.cpp	/^BYTE AssistCommandHandle::GetFrameIndex() {$/;"	f	class:AssistCommandHandle
GetTickCount	KVideo/audio/codec_engine.cpp	/^unsigned long GetTickCount()$/;"	f
GetTickCount	utils/commonUtils.cpp	/^unsigned long CommonUtils::GetTickCount()$/;"	f	class:CommonUtils
H264_ChunkingCtx	core/DecodeUtils.h	/^} H264_ChunkingCtx;$/;"	t	typeref:struct:__anon14
H264_NAL_ACCESS_UNIT_CODEDSLICE_CODE_FOR_IDR	core/DecodeUtils.h	20;"	d
H264_NAL_ACCESS_UNIT_CODEDSLICE_CODE_FOR_NONIDR	core/DecodeUtils.h	19;"	d
H264_PPS_START_CODE	core/DecodeUtils.h	21;"	d
H264_ParsingCtx	core/DecodeUtils.h	/^} H264_ParsingCtx;$/;"	t	typeref:struct:__anon15
H264_SPS_START_CODE	core/DecodeUtils.h	22;"	d
H264_ST_HOLDING_SC	core/DecodeUtils.h	/^  H264_ST_HOLDING_SC              \/**< Intermediate state, when a new frame is detected *\/$/;"	e	enum:__anon13
H264_ST_INSIDE_PICTURE	core/DecodeUtils.h	/^  H264_ST_INSIDE_PICTURE,         \/**< Inside a picture, looking for next picure start *\/$/;"	e	enum:__anon13
H264_ST_LOOKING_FOR_SPS	core/DecodeUtils.h	/^  H264_ST_LOOKING_FOR_SPS,     \/**< Initial state at start, look for SPS *\/$/;"	e	enum:__anon13
H264_ST_LOOKING_FOR_ZERO_SLICE	core/DecodeUtils.h	/^  H264_ST_LOOKING_FOR_ZERO_SLICE,    \/**< Looking for slice header with zero MB num *\/$/;"	e	enum:__anon13
H264_ST_STREAM_ERR	core/DecodeUtils.h	/^  H264_ST_STREAM_ERR,             \/**< When some discontinuity was detected in the stream *\/$/;"	e	enum:__anon13
H264_WORKING_WORD_INIT	core/DecodeUtils.h	23;"	d
HANDLE	typedef.h	/^typedef 	void* 			HANDLE;$/;"	t
HDMIDisplayManager	core/HDMIDisplayManager.cpp	/^HDMIDisplayManager::HDMIDisplayManager()$/;"	f	class:HDMIDisplayManager
HDMIDisplayManager	core/HDMIDisplayManager.h	/^class HDMIDisplayManager : public ITimerListener {$/;"	c
HDMI_DISPLAY_OFFSET	core/constDefines.h	50;"	d
HDMI_DISPLAY_SIZE	core/constDefines.h	51;"	d
HD_HEIGHT	core/constDefines.h	105;"	d
HD_SDI0	KVideo/captureVideoDefines.h	24;"	d
HD_SDI1	KVideo/captureVideoDefines.h	26;"	d
HD_WIDTH	core/constDefines.h	104;"	d
HEAD_ADDR_OFFSET	core/constDefines.h	44;"	d
HEAD_IMAGE_SIZE	core/constDefines.h	45;"	d
HIKVISION	KVideo/VideoFactory.cpp	19;"	d	file:
HIK_VIDEO_H	KVideo/HikVideo.h	2;"	d
HOSTOS	.xdcenv.mak	/^HOSTOS = Linux$/;"	m
HashKey	monitor/value.h	/^      typedef unsigned int HashKey;$/;"	t	class:Json::ValueInternalMap
Head	netprotocal/ICIICommandStruct.h	/^	UpdateUnitHead		Head;		\/\/ fileType = 21$/;"	m	struct:tagPR2COM_UnitBaseInfo
Head	netprotocal/ICIICommandStruct.h	/^	UpdateUnitHead		Head;		\/\/ fileType = 22$/;"	m	struct:tagPR2COM_UnitSyllabus
HeadBackPic	setting.h	/^	SceneBackPicInfo	HeadBackPic;$/;"	m	struct:tagRecordTemplate
HeadCourseName	setting.h	/^	SceneStringInfo		HeadCourseName;$/;"	m	struct:tagRecordTemplate
HeadTailScaleInputBitStreamReadTask	core/mixtureMode_IPC.cpp	/^void* MixtureMode_IPC::HeadTailScaleInputBitStreamReadTask(void* threadsArg) {$/;"	f	class:MixtureMode_IPC
HeadTailScaleInputBitStreamReadTask	core/mixtureMode_SDI.cpp	/^void* MixtureMode_SDI::HeadTailScaleInputBitStreamReadTask(void* threadsArg) {$/;"	f	class:MixtureMode_SDI
HeadTailScaleWriteTask	core/mixtureMode_IPC.cpp	/^void* MixtureMode_IPC::HeadTailScaleWriteTask(void* threadsArg) {$/;"	f	class:MixtureMode_IPC
HeadTailScaleWriteTask	core/mixtureMode_SDI.cpp	/^void* MixtureMode_SDI::HeadTailScaleWriteTask(void* threadsArg) {$/;"	f	class:MixtureMode_SDI
HeadTeacherName	setting.h	/^	SceneStringInfo		HeadTeacherName;$/;"	m	struct:tagRecordTemplate
HeadTime	setting.h	/^	SceneStringInfo		HeadTime;$/;"	m	struct:tagRecordTemplate
HeadTitleName	setting.h	/^	SceneStringInfo		HeadTitleName;$/;"	m	struct:tagRecordTemplate
HikAnalyzeSoFile	KVideo/HikVideo.cpp	8;"	d	file:
HikAnalyzeSoFile	hikFunc.cpp	13;"	d	file:
HikSoFile	KVideo/HikVideo.cpp	6;"	d	file:
HikSoFile	hikFunc.cpp	11;"	d	file:
HikStreamSoFile	KVideo/HikVideo.cpp	7;"	d	file:
HikStreamSoFile	hikFunc.cpp	12;"	d	file:
HikVideo	KVideo/HikVideo.cpp	/^HikVideo::HikVideo() :$/;"	f	class:HikVideo
HikVideo	KVideo/HikVideo.h	/^class HikVideo: public KVideo::KVideoInterface {$/;"	c	namespace:KVideo
HudongMode	netprotocal/ICIICommandStruct.h	/^	, HudongMode$/;"	e	enum:tagPRMode
IAUDIO_H	KVideo/audio/iaudio.h	2;"	d
IAudioCaptureObserver	KVideo/audioCapture.h	/^class IAudioCaptureObserver {$/;"	c
IAudioEncodeInterface	core/audioEncodeInterface.h	/^class IAudioEncodeInterface : public IAudioCaptureObserver {$/;"	c
IAudioEncodeListener	core/audioEncodeInterface.h	/^class IAudioEncodeListener {$/;"	c
IC2CMD_AD_LanKey	netprotocal/ICIICommandDef.h	/^} IC2CMD_AD_LanKey;$/;"	t	typeref:struct:tagIC2CMD_AD_LanKey
IC2CMD_AD_Msg	netprotocal/ICIICommandDef.h	/^} IC2CMD_AD_Msg;$/;"	t	typeref:struct:tagIC2CMD_AD_Msg
IC2CMD_CmdID	netprotocal/ICIICommandDef.h	/^} IC2CMD_CmdID;$/;"	t	typeref:struct:tagIC2CMD_CmdID
IC2CMD_Data1	netprotocal/ICIICommandDef.h	/^} IC2CMD_Data1;$/;"	t	typeref:struct:tagIC2CMD_Data1
IC2CMD_Data2	netprotocal/ICIICommandDef.h	/^} IC2CMD_Data2;$/;"	t	typeref:struct:tagIC2CMD_Data2
IC2CMD_Header	netprotocal/ICIICommandDef.h	/^} IC2CMD_Header;$/;"	t	typeref:struct:tagIC2CMD_Header
IC2_COMMAND_BUF_COUNT	netprotocal/ICIICommandDef.h	19;"	d
IC2_COMMAND_HEADLEN	netprotocal/ICIICommandDef.h	20;"	d
IC2_COMMAND_MAXLEN	netprotocal/ICIICommandDef.h	18;"	d
IC2_COMMAND_PORT	netprotocal/ICIICommandDef.h	17;"	d
IC2_PPTCLIENT_PORT	netprotocal/ICIICommandDef.h	25;"	d
IC2_PPT_PORT	netprotocal/ICIICommandDef.h	24;"	d
IC2_PR1_CMDPORT	netprotocal/ICIICommandDef.h	22;"	d
ICII_ID	kerneldef.h	17;"	d
ICaptureSDIListener	KVideo/captureSDIVideo.h	/^class ICaptureSDIListener {$/;"	c
ICaptureVGAListener	KVideo/captureVga.h	/^class ICaptureVGAListener {$/;"	c
IClassWxObserver	liveCourse/classWxManager.h	/^class IClassWxObserver {$/;"	c
ICourseWxObserver	liveCourse/courseWxManager.h	/^class ICourseWxObserver {$/;"	c
ID_GUID_LEN	netprotocal/ICIICommandDef.h	41;"	d
IFRAMESIZE	KVideo/audio/codec_engine.cpp	/^	int IFRAMESIZE = 0;$/;"	m	namespace:__anon3	file:
IL_CLIENT_SR	core/constDefines.h	78;"	d
ILiveCourseManagerObserver	liveCourse/liveCourseManager.h	/^class ILiveCourseManagerObserver {$/;"	c
ILogListener	log.h	/^class ILogListener {$/;"	c
IMovieHeaderTailStreamListener	core/movieHeaderTail.h	/^class IMovieHeaderTailStreamListener  {$/;"	c
IMtgListener	core/mtgClient.h	/^class IMtgListener {$/;"	c
INPUT_BUF_SIZE	core/audioEncodeOMX.h	21;"	d
INTEGRATE_CONTROL_TYPE	Command/AssistCommandDefines.h	66;"	d
INTELLIGENT_PLATFORM_TYPE	Command/AssistCommandDefines.h	61;"	d
IOConnectParam	netprotocal/ICIIUnitCellDef.h	/^struct IOConnectParam$/;"	s
IPCChannelChanged	KVideo/streamVideoManager.cpp	/^bool StreamVideoManager::IPCChannelChanged() {$/;"	f	class:StreamVideoManager
IPCChannelChanged	core/baseMode.cpp	/^bool BaseMode::IPCChannelChanged() {$/;"	f	class:BaseMode
IPCChannelChanged	core/mixtureMode_IPC.cpp	/^bool MixtureMode_IPC::IPCChannelChanged() {$/;"	f	class:MixtureMode_IPC
IPCChannelChanged	core/mixtureMode_SDI.cpp	/^bool MixtureMode_SDI::IPCChannelChanged() {$/;"	f	class:MixtureMode_SDI
IPCInfo	netprotocal/SCSMCommandStruct.h	/^}IPCInfo;$/;"	t	typeref:struct:tagIPCInfo
IRtmpListener	core/rtmpHandle.h	/^class IRtmpListener {$/;"	c
ISDIVideoProviderObserver	KVideo/sdiVideoProviderSystem.h	/^class ISDIVideoProviderObserver {$/;"	c
IStreamVideoListener	KVideo/KVideoInterface.h	/^class IStreamVideoListener {$/;"	c	namespace:KVideo
IStreamVideoManagerListener	KVideo/streamVideoManager.h	/^class IStreamVideoManagerListener {$/;"	c
ITimerListener	timer.h	/^class ITimerListener {$/;"	c
IUDPCommandListener	Command/udpCommandListener.h	/^class IUDPCommandListener{$/;"	c
IUdpListener	Command/udp.h	/^class IUdpListener {$/;"	c
IVGAProviderObserver	KVideo/vgaProviderSystem.h	/^class IVGAProviderObserver {$/;"	c
IVGAStateListener	utils/vgaState.h	/^class IVGAStateListener {$/;"	c
InArgs	monitor/value.h	/^      typedef std::vector<const PathArgument *> InArgs;$/;"	t	class:Json::Path
InfoEndIndex	netprotocal/ICIIUnitCellDef.h	11;"	d
InportParams	core/OMXCommonDef.h	/^} InportParams;$/;"	t	typeref:struct:tagInportParams
InputBitStreamReadTask	core/Mp4Player.cpp	/^void* Mp4FilePlayer::InputBitStreamReadTask(void *threadsArg) {$/;"	f	class:Mp4FilePlayer
InputBitStreamReadTask	core/movieHeaderTail.cpp	/^void* MovieHeaderTail::InputBitStreamReadTask(void *threadsArg) {$/;"	f	class:MovieHeaderTail
InputMixStreamReadTask	core/mixtureMode_IPC.cpp	/^void* MixtureMode_IPC::InputMixStreamReadTask(void* threadsArg) {$/;"	f	class:MixtureMode_IPC
InputMixStreamReadTask	core/mixtureMode_SDI.cpp	/^void* MixtureMode_SDI::InputMixStreamReadTask(void* threadsArg) {$/;"	f	class:MixtureMode_SDI
Int	monitor/forwards.h	/^   typedef int Int;$/;"	t	namespace:Json
Int	monitor/value.h	/^      typedef Json::Int Int;$/;"	t	class:Json::Value
InteractionMode_IPC	core/interactionMode_IPC.cpp	/^InteractionMode_IPC::InteractionMode_IPC(Kernel* pKernel) :$/;"	f	class:InteractionMode_IPC
InteractionMode_IPC	core/interactionMode_IPC.h	/^class InteractionMode_IPC : public MixtureMode_IPC$/;"	c
InteractionMode_SDI	core/interactionMode_SDI.cpp	/^InteractionMode_SDI::InteractionMode_SDI(Kernel* pKernel) :$/;"	f	class:InteractionMode_SDI
InteractionMode_SDI	core/interactionMode_SDI.h	/^class InteractionMode_SDI : public MixtureMode_SDI {$/;"	c
InternalFlags	monitor/value.h	/^      enum InternalFlags { $/;"	g	class:Json::ValueInternalLink
IteratorState	monitor/value.h	/^         IteratorState() $/;"	f	struct:Json::ValueInternalArray::IteratorState
IteratorState	monitor/value.h	/^         IteratorState() $/;"	f	struct:Json::ValueInternalMap::IteratorState
IteratorState	monitor/value.h	/^      struct IteratorState \/\/ Must be a POD$/;"	s	class:Json::ValueInternalArray
IteratorState	monitor/value.h	/^      struct IteratorState$/;"	s	class:Json::ValueInternalMap
JOIN_UID_RES_MAX	core/mtgClient.h	9;"	d
JSONCPP_BATCHALLOCATOR_H_INCLUDED	monitor/json_batchallocator.h	2;"	d
JSON_API	monitor/config.h	34;"	d
JSON_API	monitor/config.h	36;"	d
JSON_API	monitor/config.h	38;"	d
JSON_API	monitor/config.h	40;"	d
JSON_ASSERT	monitor/json_value.cpp	17;"	d	file:
JSON_ASSERT_MESSAGE	monitor/json_value.cpp	18;"	d	file:
JSON_ASSERT_UNREACHABLE	monitor/json_value.cpp	16;"	d	file:
JSON_AUTOLINK_H_INCLUDED	monitor/autolink.h	2;"	d
JSON_CONFIG_H_INCLUDED	monitor/config.h	2;"	d
JSON_FORWARDS_H_INCLUDED	monitor/forwards.h	2;"	d
JSON_JSON_H_INCLUDED	monitor/json.h	2;"	d
JSON_USE_CPPTL	monitor/config.h	29;"	d
JSON_USE_EXCEPTION	monitor/config.h	24;"	d
JSON_WRITER_H_INCLUDED	monitor/writer.h	2;"	d
Json	monitor/features.h	/^namespace Json {$/;"	n
Json	monitor/forwards.h	/^namespace Json {$/;"	n
Json	monitor/json_batchallocator.h	/^namespace Json {$/;"	n
Json	monitor/json_reader.cpp	/^namespace Json {$/;"	n	file:
Json	monitor/json_value.cpp	/^namespace Json {$/;"	n	file:
Json	monitor/json_writer.cpp	/^namespace Json {$/;"	n	file:
Json	monitor/reader.h	/^namespace Json {$/;"	n
Json	monitor/value.h	/^namespace Json {$/;"	n
Json	monitor/writer.h	/^namespace Json {$/;"	n
K1080PBufferCountActual	core/constDefines.h	85;"	d
K720PBufferCountActual	core/constDefines.h	84;"	d
KAudioPriority	core/mtgClient.h	/^	static const int KAudioPriority = 2;$/;"	m	class:MtgClient
KBinaryPriority	core/mtgClient.h	/^	static const int KBinaryPriority = 0;$/;"	m	class:MtgClient
KBufferSize	core/mtgClient.h	/^	static const long KBufferSize = 1024 * 1024 * 4L;$/;"	m	class:MtgClient
KBuildDate	config.h	13;"	d
KBuildTime	config.h	12;"	d
KCaptureVGAHeight	core/constDefines.h	116;"	d
KCaptureVGAWidth	core/constDefines.h	115;"	d
KClassKey1	utils/liveCourseUtils.h	/^	static const int KClassKey1 = 5008;$/;"	m	class:LiveCourseUtils
KClassRoomLength	utils/liveCourseUtils.h	/^	static const int KClassRoomLength = 14;$/;"	m	class:LiveCourseUtils
KDecodeCmponentInOutNum	core/constDefines.h	87;"	d
KEY_ADV_EFFECT	netprotocal/LanKeyValueDef.h	27;"	d
KEY_ADV_HIGHT	netprotocal/LanKeyValueDef.h	29;"	d
KEY_ADV_MODE	netprotocal/LanKeyValueDef.h	25;"	d
KEY_ADV_RATE	netprotocal/LanKeyValueDef.h	28;"	d
KEY_ADV_SIZE	netprotocal/LanKeyValueDef.h	26;"	d
KEY_CAMERA_DL	netprotocal/LanKeyValueDef.h	56;"	d
KEY_CAMERA_DOWN	netprotocal/LanKeyValueDef.h	50;"	d
KEY_CAMERA_LEFT	netprotocal/LanKeyValueDef.h	51;"	d
KEY_CAMERA_LU	netprotocal/LanKeyValueDef.h	53;"	d
KEY_CAMERA_RD	netprotocal/LanKeyValueDef.h	55;"	d
KEY_CAMERA_RIGHT	netprotocal/LanKeyValueDef.h	52;"	d
KEY_CAMERA_UP	netprotocal/LanKeyValueDef.h	49;"	d
KEY_CAMERA_UR	netprotocal/LanKeyValueDef.h	54;"	d
KEY_CAMERA_ZOOMADD	netprotocal/LanKeyValueDef.h	47;"	d
KEY_CAMERA_ZOOMDEC	netprotocal/LanKeyValueDef.h	48;"	d
KEY_CLASS_BEGIN	netprotocal/LanKeyValueDef.h	62;"	d
KEY_CLASS_OVER	netprotocal/LanKeyValueDef.h	58;"	d
KEY_CTRL_BACK	netprotocal/LanKeyValueDef.h	41;"	d
KEY_CTRL_CHANNEL	netprotocal/LanKeyValueDef.h	37;"	d
KEY_CTRL_DOWN	netprotocal/LanKeyValueDef.h	35;"	d
KEY_CTRL_FORWARD	netprotocal/LanKeyValueDef.h	43;"	d
KEY_CTRL_LANGUAGE	netprotocal/LanKeyValueDef.h	39;"	d
KEY_CTRL_LEFT	netprotocal/LanKeyValueDef.h	34;"	d
KEY_CTRL_NEXT	netprotocal/LanKeyValueDef.h	44;"	d
KEY_CTRL_OK	netprotocal/LanKeyValueDef.h	33;"	d
KEY_CTRL_PLAY	netprotocal/LanKeyValueDef.h	42;"	d
KEY_CTRL_PRE	netprotocal/LanKeyValueDef.h	40;"	d
KEY_CTRL_RETURN	netprotocal/LanKeyValueDef.h	31;"	d
KEY_CTRL_RIGHT	netprotocal/LanKeyValueDef.h	36;"	d
KEY_CTRL_TITLE	netprotocal/LanKeyValueDef.h	38;"	d
KEY_CTRL_UP	netprotocal/LanKeyValueDef.h	32;"	d
KEY_DEV_DOWN	netprotocal/LanKeyValueDef.h	12;"	d
KEY_DEV_SEL	netprotocal/LanKeyValueDef.h	13;"	d
KEY_DEV_STOP	netprotocal/LanKeyValueDef.h	11;"	d
KEY_DEV_UP	netprotocal/LanKeyValueDef.h	10;"	d
KEY_MUTE	netprotocal/LanKeyValueDef.h	3;"	d
KEY_PC_POWER	netprotocal/LanKeyValueDef.h	63;"	d
KEY_PC_POWER_DOWN	netprotocal/LanKeyValueDef.h	59;"	d
KEY_PW_AMPLIFIER	netprotocal/LanKeyValueDef.h	7;"	d
KEY_PW_LIGHT	netprotocal/LanKeyValueDef.h	6;"	d
KEY_PW_PROJECTOR	netprotocal/LanKeyValueDef.h	8;"	d
KEY_PW_TPC	netprotocal/LanKeyValueDef.h	5;"	d
KEY_REC_DVD	netprotocal/LanKeyValueDef.h	21;"	d
KEY_REC_EX1	netprotocal/LanKeyValueDef.h	17;"	d
KEY_REC_EX2	netprotocal/LanKeyValueDef.h	23;"	d
KEY_REC_NB	netprotocal/LanKeyValueDef.h	16;"	d
KEY_REC_PLAY	netprotocal/LanKeyValueDef.h	18;"	d
KEY_REC_RECORDER	netprotocal/LanKeyValueDef.h	22;"	d
KEY_REC_STOP	netprotocal/LanKeyValueDef.h	19;"	d
KEY_REC_TPC	netprotocal/LanKeyValueDef.h	15;"	d
KEY_REC_VS	netprotocal/LanKeyValueDef.h	20;"	d
KEY_TYJ_POWER	netprotocal/LanKeyValueDef.h	65;"	d
KEY_TYJ_POWER_DOWN	netprotocal/LanKeyValueDef.h	61;"	d
KEY_TYM_POWER_DOWN	netprotocal/LanKeyValueDef.h	60;"	d
KEY_TYM_POWER_UP	netprotocal/LanKeyValueDef.h	64;"	d
KEncodeComponentInOutPutNum	core/constDefines.h	91;"	d
KFlvPushLibName	core/rtmpHandle.cpp	10;"	d	file:
KFunctionVersion	config.h	11;"	d
KGDIR	package.mak	/^override PKGDIR = ti\/sdo\/ce\/examples\/apps\/armlivemedia$/;"	m
KHeadPicHeight	core/constDefines.h	108;"	d
KHeadPicHeight	core/mixtureMode_IPC.h	17;"	d
KHeadPicHeight	core/mixtureMode_SDI.h	12;"	d
KHeadPicWidth	core/constDefines.h	107;"	d
KHeadPicWidth	core/mixtureMode_IPC.h	16;"	d
KHeadPicWidth	core/mixtureMode_SDI.h	11;"	d
KLCAACPrexfixPath	setting.cpp	/^const string KLCAACPrexfixPath = string(LIVEMTG_PATH_AUDIO_AAC) + string("\/");$/;"	v
KLCRecordPrefixPath	setting.cpp	/^const string KLCRecordPrefixPath = string(LIVECOURSE_PATH_VIDEO_RECODER_LOW) + string("\/");$/;"	v
KLCSpeexPrefixPath	setting.cpp	/^const string KLCSpeexPrefixPath = string(LIVEMTG_PATH_AUDIO_SPEEX) + string("\/");$/;"	v
KLCStudentPrefixPath	setting.cpp	/^const string KLCStudentPrefixPath = string(LIVECOURSE_PATH_VIDEO_STUDENT_LOW_1) + string("\/");$/;"	v
KLCTeacherPrefixPath	setting.cpp	/^const string KLCTeacherPrefixPath = string(LIVECOURSE_PATH_VIDEO_TEACHER_LOW_1) + string("\/");$/;"	v
KLCVGAPrefixPath	setting.cpp	/^const string KLCVGAPrefixPath = string(LIVECOURSE_PATH_VIDEO_VGA_MID) + string("\/");$/;"	v
KLeaveNormal	core/mtgClient.h	/^	static const int KLeaveNormal = 0;$/;"	m	class:MtgClient
KLeaveTerminate	core/mtgClient.h	/^	static const int KLeaveTerminate = 1;$/;"	m	class:MtgClient
KLiveMtgPathCmdEnterLength	liveCourse/livemtgConstDefine.h	39;"	d
KLiveMtgPathCmdLeaveLength	liveCourse/livemtgConstDefine.h	40;"	d
KLiveMtgPathCmdLength	liveCourse/livemtgConstDefine.h	38;"	d
KMajorVersion	config.h	9;"	d
KMaxDecComponentCount	core/baseMode.h	20;"	d
KMaxSDICount	core/resourceMode_SDI.h	10;"	d
KMaxVGABufferCount	core/baseMode.h	19;"	d
KMinorVersion	config.h	10;"	d
KOtherComponetInOutPutNum	core/constDefines.h	89;"	d
KResourceNum	core/baseMode.h	21;"	d
KShareMemCount	core/shareMem.h	11;"	d
KTeacherLiveHeight	core/mixtureMode_SDI.cpp	25;"	d	file:
KTeacherLiveWidth	core/mixtureMode_SDI.cpp	24;"	d	file:
KUninitFlagNormal	core/mtgClient.h	/^	static const int KUninitFlagNormal = 0;$/;"	m	class:MtgClient
KVIDEO_INTERFACE_H	KVideo/KVideoInterface.h	2;"	d
KVideo	KVideo/CardInfo.h	/^namespace KVideo {$/;"	n
KVideo	KVideo/HikVideo.h	/^namespace KVideo {$/;"	n
KVideo	KVideo/KVideoInterface.h	/^namespace KVideo {$/;"	n
KVideoCreatorFactory	KVideo/VideoFactory.h	/^class KVideoCreatorFactory{$/;"	c
KVideoInterface	KVideo/KVideoInterface.h	/^class KVideoInterface {$/;"	c	namespace:KVideo
KVideoPriority	core/mtgClient.h	/^	static const int KVideoPriority = 5;$/;"	m	class:MtgClient
Kernel	kernel.cpp	/^Kernel::Kernel() : m_RecordModeHandle(NULL), m_bReadyCourseOver(false) {$/;"	f	class:Kernel
Kernel	kernel.h	/^class Kernel : public ITimerListener, public IVGAProviderObserver, public IAudioCaptureObserver {$/;"	c
KernelBoardCommandHandle	Command/KernelBoardCommandHandle.cpp	/^KernelBoardCommandHandle::KernelBoardCommandHandle() :$/;"	f	class:KernelBoardCommandHandle
KernelBoardCommandHandle	Command/KernelBoardCommandHandle.h	/^class KernelBoardCommandHandle: public IUdpListener {$/;"	c
KeyValue	netprotocal/ICIICommandDef.h	/^	WORD KeyValue;$/;"	m	struct:tagIC2CMD_AD_LanKey
KeyboardConnect	netprotocal/ICIICommandStruct.h	/^	eCommonState	KeyboardConnect;$/;"	m	struct:tagPR2COM_UnitState
Kind	monitor/value.h	/^      enum Kind$/;"	g	class:Json::PathArgument
LANKEY_ID	netprotocal/ICIICommandDef.h	79;"	d
LCD_HEIGHT	core/constDefines.h	63;"	d
LCD_H_BACK_PORCH	core/constDefines.h	66;"	d
LCD_H_FRONT_PORCH	core/constDefines.h	65;"	d
LCD_H_SYNC_LENGTH	core/constDefines.h	67;"	d
LCD_PIXEL_CLOCK	core/constDefines.h	64;"	d
LCD_V_BACK_PORCH	core/constDefines.h	69;"	d
LCD_V_FRONT_PORCH	core/constDefines.h	68;"	d
LCD_V_SYNC_LENGTH	core/constDefines.h	70;"	d
LCD_WIDTH	core/constDefines.h	62;"	d
LIVECOURSE_PATH_VIDEO_RECODER_HIGH	liveCourse/prePathMtgConstDefine.h	38;"	d
LIVECOURSE_PATH_VIDEO_RECODER_LOW	liveCourse/prePathMtgConstDefine.h	40;"	d
LIVECOURSE_PATH_VIDEO_RECODER_MID	liveCourse/prePathMtgConstDefine.h	39;"	d
LIVECOURSE_PATH_VIDEO_STUDENT_HIGH_1	liveCourse/prePathMtgConstDefine.h	12;"	d
LIVECOURSE_PATH_VIDEO_STUDENT_HIGH_2	liveCourse/prePathMtgConstDefine.h	13;"	d
LIVECOURSE_PATH_VIDEO_STUDENT_HIGH_3	liveCourse/prePathMtgConstDefine.h	14;"	d
LIVECOURSE_PATH_VIDEO_STUDENT_LOW_1	liveCourse/prePathMtgConstDefine.h	28;"	d
LIVECOURSE_PATH_VIDEO_STUDENT_LOW_2	liveCourse/prePathMtgConstDefine.h	29;"	d
LIVECOURSE_PATH_VIDEO_STUDENT_LOW_3	liveCourse/prePathMtgConstDefine.h	30;"	d
LIVECOURSE_PATH_VIDEO_STUDENT_MID_1	liveCourse/prePathMtgConstDefine.h	20;"	d
LIVECOURSE_PATH_VIDEO_STUDENT_MID_2	liveCourse/prePathMtgConstDefine.h	21;"	d
LIVECOURSE_PATH_VIDEO_STUDENT_MID_3	liveCourse/prePathMtgConstDefine.h	22;"	d
LIVECOURSE_PATH_VIDEO_TEACHER_HIGH_1	liveCourse/prePathMtgConstDefine.h	9;"	d
LIVECOURSE_PATH_VIDEO_TEACHER_HIGH_2	liveCourse/prePathMtgConstDefine.h	10;"	d
LIVECOURSE_PATH_VIDEO_TEACHER_HIGH_3	liveCourse/prePathMtgConstDefine.h	11;"	d
LIVECOURSE_PATH_VIDEO_TEACHER_LOW_1	liveCourse/prePathMtgConstDefine.h	25;"	d
LIVECOURSE_PATH_VIDEO_TEACHER_LOW_2	liveCourse/prePathMtgConstDefine.h	26;"	d
LIVECOURSE_PATH_VIDEO_TEACHER_LOW_3	liveCourse/prePathMtgConstDefine.h	27;"	d
LIVECOURSE_PATH_VIDEO_TEACHER_MID_1	liveCourse/prePathMtgConstDefine.h	17;"	d
LIVECOURSE_PATH_VIDEO_TEACHER_MID_2	liveCourse/prePathMtgConstDefine.h	18;"	d
LIVECOURSE_PATH_VIDEO_TEACHER_MID_3	liveCourse/prePathMtgConstDefine.h	19;"	d
LIVECOURSE_PATH_VIDEO_VGA_HIGH	liveCourse/prePathMtgConstDefine.h	33;"	d
LIVECOURSE_PATH_VIDEO_VGA_LOW	liveCourse/prePathMtgConstDefine.h	35;"	d
LIVECOURSE_PATH_VIDEO_VGA_MID	liveCourse/prePathMtgConstDefine.h	34;"	d
LIVEMTG_CLASSSTATUS_BEGIN	liveCourse/livemtgConstDefine.h	112;"	d
LIVEMTG_CLASSSTATUS_BREAK	liveCourse/livemtgConstDefine.h	113;"	d
LIVEMTG_CLASSSTATUS_END	liveCourse/livemtgConstDefine.h	111;"	d
LIVEMTG_CMD_ID_CAMERACONTROL	liveCourse/livemtgConstDefine.h	103;"	d
LIVEMTG_CMD_ID_CLASSSTATUS	liveCourse/livemtgConstDefine.h	96;"	d
LIVEMTG_CMD_ID_COURSE	liveCourse/livemtgConstDefine.h	95;"	d
LIVEMTG_CMD_ID_ENTER	liveCourse/livemtgConstDefine.h	93;"	d
LIVEMTG_CMD_ID_INTERAVTIVELIST	liveCourse/livemtgConstDefine.h	100;"	d
LIVEMTG_CMD_ID_KEYNOTESPEAKER	liveCourse/livemtgConstDefine.h	104;"	d
LIVEMTG_CMD_ID_LEAVE	liveCourse/livemtgConstDefine.h	94;"	d
LIVEMTG_CMD_ID_MONITORLIST	liveCourse/livemtgConstDefine.h	99;"	d
LIVEMTG_CMD_ID_RECORDERMODELIST	liveCourse/livemtgConstDefine.h	101;"	d
LIVEMTG_CMD_ID_RTMP	liveCourse/livemtgConstDefine.h	105;"	d
LIVEMTG_CMD_ID_SUBSCRIBELIST	liveCourse/livemtgConstDefine.h	102;"	d
LIVEMTG_CMD_ID_VGALIST	liveCourse/livemtgConstDefine.h	98;"	d
LIVEMTG_CMD_ID_VIDEOLIST	liveCourse/livemtgConstDefine.h	97;"	d
LIVEMTG_CMD_ID_WEBMESSAGE	liveCourse/livemtgConstDefine.h	106;"	d
LIVEMTG_COURSESTATUS_ENTER	liveCourse/livemtgConstDefine.h	108;"	d
LIVEMTG_COURSESTATUS_LEAVE	liveCourse/livemtgConstDefine.h	109;"	d
LIVEMTG_HEADER_MAGIC	liveCourse/livemtgConstDefine.h	90;"	d
LIVEMTG_LIST_MAXCOUNT	liveCourse/livemtgConstDefine.h	126;"	d
LIVEMTG_MAX_PATH	liveCourse/livemtgConstDefine.h	127;"	d
LIVEMTG_PATH_AUDIO_AAC	liveCourse/livemtgConstDefine.h	74;"	d
LIVEMTG_PATH_AUDIO_PCM_48000_1_16	liveCourse/livemtgConstDefine.h	73;"	d
LIVEMTG_PATH_AUDIO_SPEEX	liveCourse/livemtgConstDefine.h	75;"	d
LIVEMTG_PATH_CMD	liveCourse/livemtgConstDefine.h	24;"	d
LIVEMTG_PATH_CMD_CLASSSTATUS	liveCourse/livemtgConstDefine.h	28;"	d
LIVEMTG_PATH_CMD_COURSESTATUS	liveCourse/livemtgConstDefine.h	27;"	d
LIVEMTG_PATH_CMD_ENTER	liveCourse/livemtgConstDefine.h	25;"	d
LIVEMTG_PATH_CMD_INTERACTIVELIST	liveCourse/livemtgConstDefine.h	32;"	d
LIVEMTG_PATH_CMD_LEAVE	liveCourse/livemtgConstDefine.h	26;"	d
LIVEMTG_PATH_CMD_MONITORLIST	liveCourse/livemtgConstDefine.h	31;"	d
LIVEMTG_PATH_CMD_RECORDERMODELIST	liveCourse/livemtgConstDefine.h	33;"	d
LIVEMTG_PATH_CMD_RTMP	liveCourse/livemtgConstDefine.h	35;"	d
LIVEMTG_PATH_CMD_SUBSCRIBELIST	liveCourse/livemtgConstDefine.h	34;"	d
LIVEMTG_PATH_CMD_VGALIST	liveCourse/livemtgConstDefine.h	30;"	d
LIVEMTG_PATH_CMD_VIDEOLIST	liveCourse/livemtgConstDefine.h	29;"	d
LIVEMTG_PATH_CMD_WEBMESSAGE	liveCourse/livemtgConstDefine.h	36;"	d
LIVEMTG_PATH_VIDEO_RECODER_HIGH	liveCourse/livemtgConstDefine.h	68;"	d
LIVEMTG_PATH_VIDEO_RECODER_LOW	liveCourse/livemtgConstDefine.h	70;"	d
LIVEMTG_PATH_VIDEO_RECODER_MID	liveCourse/livemtgConstDefine.h	69;"	d
LIVEMTG_PATH_VIDEO_STUDENT_HIGH_1	liveCourse/livemtgConstDefine.h	46;"	d
LIVEMTG_PATH_VIDEO_STUDENT_HIGH_2	liveCourse/livemtgConstDefine.h	47;"	d
LIVEMTG_PATH_VIDEO_STUDENT_HIGH_3	liveCourse/livemtgConstDefine.h	48;"	d
LIVEMTG_PATH_VIDEO_STUDENT_LOW_1	liveCourse/livemtgConstDefine.h	60;"	d
LIVEMTG_PATH_VIDEO_STUDENT_LOW_2	liveCourse/livemtgConstDefine.h	61;"	d
LIVEMTG_PATH_VIDEO_STUDENT_LOW_3	liveCourse/livemtgConstDefine.h	62;"	d
LIVEMTG_PATH_VIDEO_STUDENT_MID_1	liveCourse/livemtgConstDefine.h	53;"	d
LIVEMTG_PATH_VIDEO_STUDENT_MID_2	liveCourse/livemtgConstDefine.h	54;"	d
LIVEMTG_PATH_VIDEO_STUDENT_MID_3	liveCourse/livemtgConstDefine.h	55;"	d
LIVEMTG_PATH_VIDEO_TEACHER_HIGH_1	liveCourse/livemtgConstDefine.h	43;"	d
LIVEMTG_PATH_VIDEO_TEACHER_HIGH_2	liveCourse/livemtgConstDefine.h	44;"	d
LIVEMTG_PATH_VIDEO_TEACHER_HIGH_3	liveCourse/livemtgConstDefine.h	45;"	d
LIVEMTG_PATH_VIDEO_TEACHER_LOW_1	liveCourse/livemtgConstDefine.h	57;"	d
LIVEMTG_PATH_VIDEO_TEACHER_LOW_2	liveCourse/livemtgConstDefine.h	58;"	d
LIVEMTG_PATH_VIDEO_TEACHER_LOW_3	liveCourse/livemtgConstDefine.h	59;"	d
LIVEMTG_PATH_VIDEO_TEACHER_MID_1	liveCourse/livemtgConstDefine.h	50;"	d
LIVEMTG_PATH_VIDEO_TEACHER_MID_2	liveCourse/livemtgConstDefine.h	51;"	d
LIVEMTG_PATH_VIDEO_TEACHER_MID_3	liveCourse/livemtgConstDefine.h	52;"	d
LIVEMTG_PATH_VIDEO_VGA_HIGH	liveCourse/livemtgConstDefine.h	64;"	d
LIVEMTG_PATH_VIDEO_VGA_LOW	liveCourse/livemtgConstDefine.h	66;"	d
LIVEMTG_PATH_VIDEO_VGA_MID	liveCourse/livemtgConstDefine.h	65;"	d
LIVEMTG_RECORDER_MODE_NULL	liveCourse/livemtgConstDefine.h	115;"	d
LIVEMTG_RECORDER_MODE_S	liveCourse/livemtgConstDefine.h	118;"	d
LIVEMTG_RECORDER_MODE_T	liveCourse/livemtgConstDefine.h	116;"	d
LIVEMTG_RECORDER_MODE_T_S	liveCourse/livemtgConstDefine.h	120;"	d
LIVEMTG_RECORDER_MODE_T_S_VGA	liveCourse/livemtgConstDefine.h	121;"	d
LIVEMTG_RECORDER_MODE_T_VGA	liveCourse/livemtgConstDefine.h	119;"	d
LIVEMTG_RECORDER_MODE_VGA	liveCourse/livemtgConstDefine.h	117;"	d
LIVEMTG_ROOM_ID_LEN	liveCourse/livemtgConstDefine.h	124;"	d
LIVEMTG_UID_LEN	liveCourse/livemtgConstDefine.h	125;"	d
LIVEMTG_USER_TYPE_ASSISTANT_AUDENCE	liveCourse/livemtgConstDefine.h	79;"	d
LIVEMTG_USER_TYPE_ASSISTANT_LIVE	liveCourse/livemtgConstDefine.h	78;"	d
LIVEMTG_USER_TYPE_CONTROL	liveCourse/livemtgConstDefine.h	83;"	d
LIVEMTG_USER_TYPE_IC_PROVIDER	liveCourse/livemtgConstDefine.h	87;"	d
LIVEMTG_USER_TYPE_NULL	liveCourse/livemtgConstDefine.h	77;"	d
LIVEMTG_USER_TYPE_STREAMMEDIA	liveCourse/livemtgConstDefine.h	82;"	d
LIVEMTG_USER_TYPE_VIDEOSERVER	liveCourse/livemtgConstDefine.h	85;"	d
LIVEMTG_USER_TYPE_VIDEO_AUDENCE	liveCourse/livemtgConstDefine.h	81;"	d
LIVEMTG_USER_TYPE_VIDEO_LIVE	liveCourse/livemtgConstDefine.h	80;"	d
LIVEMTG_USER_TYPE_WEB_LIVECOURSE_PROXY	liveCourse/livemtgConstDefine.h	84;"	d
LOGO_ADDR_OFFSET	core/constDefines.h	13;"	d
LOGO_ADDR_OFFSET	core/constDefines.h	18;"	d
LOGO_IMAGE_SIZE	core/constDefines.h	14;"	d
LOGO_IMAGE_SIZE	core/constDefines.h	19;"	d
LOG_DEBUG	log.h	82;"	d
LOG_ERROR	log.h	78;"	d
LOG_MSG	log.h	80;"	d
LOG_WARNING	log.h	79;"	d
LONG	typedef.h	/^typedef     int            LONG;$/;"	t
LPDWORD	typedef.h	/^typedef     unsigned int*  LPDWORD;$/;"	t
LPVOID	typedef.h	/^typedef 	void* 			LPVOID;$/;"	t
LanKeyID	netprotocal/ICIICommandDef.h	/^	BYTE LanKeyID;$/;"	m	struct:tagIC2CMD_AD_LanKey
LessonState	netprotocal/ICIICommandStruct.h	/^	eCommonState	LessonState;$/;"	m	struct:tagPR2COM_UnitState
LightState	netprotocal/ICIICommandStruct.h	/^	eCommonState	LightState;$/;"	m	struct:tagPR2COM_UnitState
LiveCourseManager	liveCourse/liveCourseManager.cpp	/^LiveCourseManager::LiveCourseManager()$/;"	f	class:LiveCourseManager
LiveCourseManager	liveCourse/liveCourseManager.h	/^class LiveCourseManager$/;"	c
LiveCourseUtils	utils/liveCourseUtils.h	/^class LiveCourseUtils {$/;"	c
LiveOutputBitStreamWriteTask	core/mixtureMode_IPC.cpp	/^void* MixtureMode_IPC::LiveOutputBitStreamWriteTask(void *threadsArg) {$/;"	f	class:MixtureMode_IPC
LiveOutputBitStreamWriteTask	core/mixtureMode_SDI.cpp	/^void* MixtureMode_SDI::LiveOutputBitStreamWriteTask(void *threadsArg) {$/;"	f	class:MixtureMode_SDI
LiveState	Command/AssistCommandHandle.h	/^}LiveState;$/;"	t	typeref:enum:tagLiveState
Live_Paused	Command/AssistCommandHandle.h	/^	, Live_Paused$/;"	e	enum:tagLiveState
Live_Playing	Command/AssistCommandHandle.h	/^	Live_Playing$/;"	e	enum:tagLiveState
Live_Stopped	Command/AssistCommandHandle.h	/^	, Live_Stopped$/;"	e	enum:tagLiveState
Location	monitor/reader.h	/^      typedef const Char *Location;$/;"	t	class:Json::Reader
Log	log.cpp	/^Log::Log() :$/;"	f	class:Log
Log	log.h	/^class Log {$/;"	c
MACRO_DEF_H	KVideo/audio/macrodef.h	8;"	d
MAP_ADDR_BASE	KVideo/audio/SpeexCod.h	11;"	d
MAP_MASK	core/membufUtils.h	26;"	d
MAP_SIZE	core/membufUtils.h	25;"	d
MAX	KVideo/audioCapture.cpp	6;"	d	file:
MAX	core/audioEncode.cpp	8;"	d	file:
MAX_BUFFER	core/membufUtils.h	18;"	d
MAX_BUFFER	core/membufUtils.h	20;"	d
MAX_CAMERA	core/resourceMode_IPC.h	12;"	d
MAX_CAMERA	core/resourceMode_SDI.h	8;"	d
MAX_CAMERA_SPEED	netprotocal/UnitActionDef.h	169;"	d
MAX_DELAY_FRAME_COUNT	core/cameraBufferPool.h	6;"	d
MAX_DELAY_FRAME_COUNT	core/framePool.h	5;"	d
MAX_DMA_TRANSFER_IN_BYTES	core/edma.h	17;"	d
MAX_FILE_NAME_SIZE	core/constDefines.h	60;"	d
MAX_IPC	setting.h	14;"	d
MAX_NUM_IN_BUFS	core/constDefines.h	81;"	d
MAX_NUM_OUT_BUFS	core/constDefines.h	82;"	d
MAX_PATH	liveCourse/livemtgConstDefine.h	7;"	d
MAX_RESOLUTION_COUNT	setting.h	65;"	d
MAX_TEMPLATE_COUNT	setting.h	18;"	d
MC2SE_CONNECT	Command/AssistCommandDefines.h	/^	,MC2SE_CONNECT					=	0x00004700	\/\/\/ 媒体中心连接到录播$/;"	e	enum:tagALL2SE
MC2SE_DISCONNECT	Command/AssistCommandDefines.h	/^	,MC2SE_DISCONNECT$/;"	e	enum:tagALL2SE
MCU1_TYPE	Command/AssistCommandDefines.h	53;"	d
MCU2_TYPE	Command/AssistCommandDefines.h	64;"	d
MEDIA_EVENT_FREEZED	Command/Function.h	8;"	d
MEDIA_ID	kerneldef.h	15;"	d
MIN	core/osdManager.cpp	8;"	d	file:
MIN_CAMERA_SPEED	netprotocal/UnitActionDef.h	168;"	d
MIX_IMAGE_ADDR_OFFSET	core/constDefines.h	38;"	d
MIX_IMAGE_SIZE	core/constDefines.h	39;"	d
MK_NOGENDEPS	package.mak	/^MK_NOGENDEPS := $(filter clean,$(MAKECMDGOALS))$/;"	m
MSG_AD	netprotocal/UnitDeviceDef.h	3;"	d
MSG_AD_ADMonitorOff	netprotocal/UnitActionDef.h	145;"	d
MSG_AD_ADMonitorOn	netprotocal/UnitActionDef.h	144;"	d
MSG_AD_AudioSignal	netprotocal/UnitActionDef.h	138;"	d
MSG_AD_Auto	netprotocal/UnitActionDef.h	111;"	d
MSG_AD_BallCamaraCtrl	netprotocal/UnitActionDef.h	132;"	d
MSG_AD_BallCamaraReturn	netprotocal/UnitActionDef.h	133;"	d
MSG_AD_CardOK	netprotocal/UnitActionDef.h	108;"	d
MSG_AD_ClassBegin	netprotocal/UnitActionDef.h	106;"	d
MSG_AD_ClassEnd	netprotocal/UnitActionDef.h	107;"	d
MSG_AD_CommClose	netprotocal/UnitActionDef.h	129;"	d
MSG_AD_CommKey	netprotocal/UnitActionDef.h	130;"	d
MSG_AD_CommStart	netprotocal/UnitActionDef.h	128;"	d
MSG_AD_CtrlDevOff	netprotocal/UnitActionDef.h	115;"	d
MSG_AD_CtrlDevOn	netprotocal/UnitActionDef.h	113;"	d
MSG_AD_CtrlRecOff	netprotocal/UnitActionDef.h	116;"	d
MSG_AD_CtrlRecOn	netprotocal/UnitActionDef.h	114;"	d
MSG_AD_DebugOn	netprotocal/UnitActionDef.h	159;"	d
MSG_AD_FileRequest	netprotocal/UnitActionDef.h	156;"	d
MSG_AD_FileSend	netprotocal/UnitActionDef.h	157;"	d
MSG_AD_IOOut	netprotocal/UnitActionDef.h	143;"	d
MSG_AD_IOWarningArise	netprotocal/UnitActionDef.h	142;"	d
MSG_AD_IPCallOff	netprotocal/UnitActionDef.h	110;"	d
MSG_AD_IPCallOn	netprotocal/UnitActionDef.h	109;"	d
MSG_AD_IPConnectFail	netprotocal/UnitActionDef.h	123;"	d
MSG_AD_IPConnectSuc	netprotocal/UnitActionDef.h	122;"	d
MSG_AD_IRReturn	netprotocal/UnitActionDef.h	119;"	d
MSG_AD_IRStudyCode	netprotocal/UnitActionDef.h	118;"	d
MSG_AD_Manual	netprotocal/UnitActionDef.h	112;"	d
MSG_AD_PlayRing	netprotocal/UnitActionDef.h	120;"	d
MSG_AD_QueryVideoChannel	netprotocal/UnitActionDef.h	134;"	d
MSG_AD_RecordScene	netprotocal/UnitActionDef.h	147;"	d
MSG_AD_RequestAD	netprotocal/UnitActionDef.h	158;"	d
MSG_AD_RequestServer	netprotocal/UnitActionDef.h	154;"	d
MSG_AD_SMState	netprotocal/UnitActionDef.h	137;"	d
MSG_AD_ServerResponse	netprotocal/UnitActionDef.h	155;"	d
MSG_AD_SetVideoChannel	netprotocal/UnitActionDef.h	135;"	d
MSG_AD_Status	netprotocal/UnitActionDef.h	160;"	d
MSG_AD_StrategyStart	netprotocal/UnitActionDef.h	126;"	d
MSG_AD_StrategyStop	netprotocal/UnitActionDef.h	127;"	d
MSG_AD_TraceStart	netprotocal/UnitActionDef.h	124;"	d
MSG_AD_TraceStop	netprotocal/UnitActionDef.h	125;"	d
MSG_AD_UpdateResponse	netprotocal/UnitActionDef.h	165;"	d
MSG_AD_UpdateUnit	netprotocal/UnitActionDef.h	164;"	d
MSG_AD_VGASignal	netprotocal/UnitActionDef.h	141;"	d
MSG_AD_VideoSignal	netprotocal/UnitActionDef.h	140;"	d
MSG_AD_Volume	netprotocal/UnitActionDef.h	139;"	d
MSG_AFPW	netprotocal/UnitDeviceDef.h	14;"	d
MSG_CTPW	netprotocal/UnitDeviceDef.h	16;"	d
MSG_CTS	netprotocal/UnitDeviceDef.h	18;"	d
MSG_DEV_A	netprotocal/UnitActionDef.h	36;"	d
MSG_DEV_B	netprotocal/UnitActionDef.h	37;"	d
MSG_DEV_Back	netprotocal/UnitActionDef.h	21;"	d
MSG_DEV_Channel	netprotocal/UnitActionDef.h	34;"	d
MSG_DEV_Connect	netprotocal/UnitActionDef.h	14;"	d
MSG_DEV_DOWN	netprotocal/UnitActionDef.h	7;"	d
MSG_DEV_Disconnect	netprotocal/UnitActionDef.h	15;"	d
MSG_DEV_Down	netprotocal/UnitActionDef.h	27;"	d
MSG_DEV_Forward	netprotocal/UnitActionDef.h	20;"	d
MSG_DEV_Language	netprotocal/UnitActionDef.h	32;"	d
MSG_DEV_Left	netprotocal/UnitActionDef.h	28;"	d
MSG_DEV_MuteOff	netprotocal/UnitActionDef.h	9;"	d
MSG_DEV_MuteOn	netprotocal/UnitActionDef.h	8;"	d
MSG_DEV_NextPage	netprotocal/UnitActionDef.h	25;"	d
MSG_DEV_OFF	netprotocal/UnitActionDef.h	6;"	d
MSG_DEV_ON	netprotocal/UnitActionDef.h	5;"	d
MSG_DEV_Open	netprotocal/UnitActionDef.h	35;"	d
MSG_DEV_Pause	netprotocal/UnitActionDef.h	18;"	d
MSG_DEV_Play	netprotocal/UnitActionDef.h	17;"	d
MSG_DEV_PlayOK	netprotocal/UnitActionDef.h	30;"	d
MSG_DEV_PowerOff	netprotocal/UnitActionDef.h	13;"	d
MSG_DEV_PowerOffEnable	netprotocal/UnitActionDef.h	16;"	d
MSG_DEV_PowerOn	netprotocal/UnitActionDef.h	12;"	d
MSG_DEV_PrePage	netprotocal/UnitActionDef.h	22;"	d
MSG_DEV_Return	netprotocal/UnitActionDef.h	31;"	d
MSG_DEV_Right	netprotocal/UnitActionDef.h	29;"	d
MSG_DEV_Stop	netprotocal/UnitActionDef.h	19;"	d
MSG_DEV_Title	netprotocal/UnitActionDef.h	33;"	d
MSG_DEV_Up	netprotocal/UnitActionDef.h	26;"	d
MSG_DEV_Volumn	netprotocal/UnitActionDef.h	10;"	d
MSG_DMIC	netprotocal/UnitDeviceDef.h	20;"	d
MSG_DVD	netprotocal/UnitDeviceDef.h	4;"	d
MSG_EX1	netprotocal/UnitDeviceDef.h	9;"	d
MSG_EX2	netprotocal/UnitDeviceDef.h	10;"	d
MSG_FC	netprotocal/UnitDeviceDef.h	19;"	d
MSG_FC_Camera1	netprotocal/UnitActionDef.h	52;"	d
MSG_FC_Camera2	netprotocal/UnitActionDef.h	53;"	d
MSG_FC_Camera3	netprotocal/UnitActionDef.h	54;"	d
MSG_FC_Camera4	netprotocal/UnitActionDef.h	55;"	d
MSG_FC_Camera5	netprotocal/UnitActionDef.h	56;"	d
MSG_FC_Camera6	netprotocal/UnitActionDef.h	57;"	d
MSG_FC_FocusAdd	netprotocal/UnitActionDef.h	69;"	d
MSG_FC_FocusDec	netprotocal/UnitActionDef.h	70;"	d
MSG_FC_High160	netprotocal/UnitActionDef.h	49;"	d
MSG_FC_High170	netprotocal/UnitActionDef.h	50;"	d
MSG_FC_High180	netprotocal/UnitActionDef.h	51;"	d
MSG_FC_PosDown	netprotocal/UnitActionDef.h	61;"	d
MSG_FC_PosLeft	netprotocal/UnitActionDef.h	62;"	d
MSG_FC_PosLeftDown	netprotocal/UnitActionDef.h	66;"	d
MSG_FC_PosLeftTop	netprotocal/UnitActionDef.h	65;"	d
MSG_FC_PosRight	netprotocal/UnitActionDef.h	63;"	d
MSG_FC_PosRightDown	netprotocal/UnitActionDef.h	68;"	d
MSG_FC_PosRightTop	netprotocal/UnitActionDef.h	67;"	d
MSG_FC_PosStop	netprotocal/UnitActionDef.h	64;"	d
MSG_FC_PosUp	netprotocal/UnitActionDef.h	60;"	d
MSG_FC_PrePosition	netprotocal/UnitActionDef.h	71;"	d
MSG_FC_SetPrePosition	netprotocal/UnitActionDef.h	72;"	d
MSG_FC_ZoomAdd	netprotocal/UnitActionDef.h	58;"	d
MSG_FC_ZoomDec	netprotocal/UnitActionDef.h	59;"	d
MSG_FIXED	netprotocal/UnitDeviceDef.h	24;"	d
MSG_LANKEY	netprotocal/UnitDeviceDef.h	22;"	d
MSG_LCD	netprotocal/UnitDeviceDef.h	17;"	d
MSG_LK_KeyPress	netprotocal/UnitActionDef.h	162;"	d
MSG_LTPW	netprotocal/UnitDeviceDef.h	15;"	d
MSG_NB	netprotocal/UnitDeviceDef.h	7;"	d
MSG_NOACT	netprotocal/UnitActionDef.h	3;"	d
MSG_PJPW	netprotocal/UnitDeviceDef.h	12;"	d
MSG_PSPW	netprotocal/UnitDeviceDef.h	13;"	d
MSG_PTZ	netprotocal/UnitDeviceDef.h	26;"	d
MSG_REC	netprotocal/UnitDeviceDef.h	5;"	d
MSG_SD	netprotocal/UnitDeviceDef.h	25;"	d
MSG_SM	netprotocal/UnitDeviceDef.h	11;"	d
MSG_SM_CourseName	netprotocal/UnitActionDef.h	91;"	d
MSG_SM_EffNormal	netprotocal/UnitActionDef.h	82;"	d
MSG_SM_EffOther	netprotocal/UnitActionDef.h	84;"	d
MSG_SM_EffPinP	netprotocal/UnitActionDef.h	83;"	d
MSG_SM_Exit	netprotocal/UnitActionDef.h	148;"	d
MSG_SM_LivePause	netprotocal/UnitActionDef.h	74;"	d
MSG_SM_LiveStart	netprotocal/UnitActionDef.h	73;"	d
MSG_SM_LiveStop	netprotocal/UnitActionDef.h	75;"	d
MSG_SM_Preview	netprotocal/UnitActionDef.h	152;"	d
MSG_SM_Rate1M	netprotocal/UnitActionDef.h	77;"	d
MSG_SM_Rate500K	netprotocal/UnitActionDef.h	76;"	d
MSG_SM_RateManual	netprotocal/UnitActionDef.h	78;"	d
MSG_SM_Replay	netprotocal/UnitActionDef.h	149;"	d
MSG_SM_SizeD1	netprotocal/UnitActionDef.h	80;"	d
MSG_SM_SizeOther	netprotocal/UnitActionDef.h	81;"	d
MSG_SM_SizeVGA	netprotocal/UnitActionDef.h	79;"	d
MSG_SM_StopPreview	netprotocal/UnitActionDef.h	153;"	d
MSG_SM_TeacherName	netprotocal/UnitActionDef.h	92;"	d
MSG_SM_VideoFreeze	netprotocal/UnitActionDef.h	89;"	d
MSG_SM_VideoThaw	netprotocal/UnitActionDef.h	90;"	d
MSG_TPC	netprotocal/UnitDeviceDef.h	6;"	d
MSG_TPC_AudioNo	netprotocal/UnitActionDef.h	103;"	d
MSG_TPC_AudioYes	netprotocal/UnitActionDef.h	102;"	d
MSG_TPC_KeyDown	netprotocal/UnitActionDef.h	97;"	d
MSG_TPC_KeyDownNo	netprotocal/UnitActionDef.h	98;"	d
MSG_TPC_MouseMove	netprotocal/UnitActionDef.h	95;"	d
MSG_TPC_MouseMove2	netprotocal/UnitActionDef.h	99;"	d
MSG_TPC_MouseMoveNo	netprotocal/UnitActionDef.h	96;"	d
MSG_TPC_ScreenChg	netprotocal/UnitActionDef.h	100;"	d
MSG_TPC_ScreenChgNo	netprotocal/UnitActionDef.h	101;"	d
MSG_TT_SalfStudy	netprotocal/UnitActionDef.h	151;"	d
MSG_TT_Teaching	netprotocal/UnitActionDef.h	150;"	d
MSG_VS	netprotocal/UnitDeviceDef.h	8;"	d
MSG_VS_BtmLightOff	netprotocal/UnitActionDef.h	46;"	d
MSG_VS_BtmLightOn	netprotocal/UnitActionDef.h	45;"	d
MSG_VS_MidLightOff	netprotocal/UnitActionDef.h	44;"	d
MSG_VS_MidLightOn	netprotocal/UnitActionDef.h	43;"	d
MSG_VS_ZoomAdd	netprotocal/UnitActionDef.h	41;"	d
MSG_VS_ZoomDec	netprotocal/UnitActionDef.h	42;"	d
MULTI_ACK_FLAG	Command/AssistCommandDefines.h	88;"	d
MULTI_LENGTH_POS	Command/AssistCommandDefines.h	89;"	d
MULTI_SEND_FLAG	Command/AssistCommandDefines.h	87;"	d
MULTI_SERIES_DATA_LEN	Command/AssistCommandDefines.h	83;"	d
MULTI_SERIES_HEAD_LEN	Command/AssistCommandDefines.h	82;"	d
MULTI_SERIES_ONE_FRAME_LEN	Command/AssistCommandDefines.h	84;"	d
MediaStateEvent	Command/Function.cpp	/^BOOL CFunction::MediaStateEvent(DWORD dwEvent, DWORD dwValue) {$/;"	f	class:CFunction
MemBufUtils	core/membufUtils.cpp	/^MemBufUtils::MemBufUtils() : m_fdmem(-1) {$/;"	f	class:MemBufUtils
MemBufUtils	core/membufUtils.h	/^class MemBufUtils {$/;"	c
Members	monitor/value.h	/^      typedef std::vector<std::string> Members;$/;"	t	class:Json::Value
MicroMode_IPC	core/microMode_IPC.cpp	/^MicroMode_IPC::MicroMode_IPC(Kernel *pKernel)$/;"	f	class:MicroMode_IPC
MicroMode_IPC	core/microMode_IPC.h	/^class MicroMode_IPC : public MixtureMode_IPC$/;"	c
MicroMode_SDI	core/microMode_SDI.cpp	/^MicroMode_SDI::MicroMode_SDI(Kernel *pKernel)$/;"	f	class:MicroMode_SDI
MicroMode_SDI	core/microMode_SDI.h	/^class MicroMode_SDI : public MixtureMode_SDI$/;"	c
MixtureMode_IPC	core/mixtureMode_IPC.cpp	/^MixtureMode_IPC::MixtureMode_IPC(Kernel* pKernel) : BaseMode(pKernel),$/;"	f	class:MixtureMode_IPC
MixtureMode_IPC	core/mixtureMode_IPC.h	/^class MixtureMode_IPC : public BaseMode, public IAudioEncodeListener,$/;"	c
MixtureMode_SDI	core/mixtureMode_SDI.cpp	/^MixtureMode_SDI::MixtureMode_SDI(Kernel* pKernel) : BaseMode(pKernel),$/;"	f	class:MixtureMode_SDI
MixtureMode_SDI	core/mixtureMode_SDI.h	/^class MixtureMode_SDI : public BaseMode, public IAudioEncodeListener,$/;"	c
ModelStatus	web/modelStatus.cpp	/^ModelStatus::ModelStatus()$/;"	f	class:ModelStatus
ModelStatus	web/modelStatus.h	/^class ModelStatus : public IRtmpListener, public IMtgListener {$/;"	c
MonitorSender	monitor/monitorSender.cpp	/^MonitorSender::MonitorSender()$/;"	f	class:MonitorSender
MonitorSender	monitor/monitorSender.h	/^class MonitorSender : public ITimerListener {$/;"	c
MovieHeaderTail	core/movieHeaderTail.cpp	/^MovieHeaderTail::MovieHeaderTail() :$/;"	f	class:MovieHeaderTail
MovieHeaderTail	core/movieHeaderTail.h	/^class MovieHeaderTail  {$/;"	c
MovieMode_IPC	core/movieMode_IPC.cpp	/^MovieMode_IPC::MovieMode_IPC(Kernel* pKernel) :$/;"	f	class:MovieMode_IPC
MovieMode_IPC	core/movieMode_IPC.h	/^class MovieMode_IPC : public MixtureMode_IPC {$/;"	c
MovieMode_SDI	core/movieMode_SDI.cpp	/^MovieMode_SDI::MovieMode_SDI(Kernel* pKernel)$/;"	f	class:MovieMode_SDI
MovieMode_SDI	core/movieMode_SDI.h	/^class MovieMode_SDI : public MixtureMode_SDI {$/;"	c
Mp4FilePlayer	core/Mp4Player.cpp	/^Mp4FilePlayer::Mp4FilePlayer() :$/;"	f	class:Mp4FilePlayer
Mp4FilePlayer	core/Mp4Player.h	/^class Mp4FilePlayer {$/;"	c
Mp4Output	core/mp4Output.cpp	/^Mp4Output::Mp4Output() : m_pMp4WriterHandle(NULL) {$/;"	f	class:Mp4Output
Mp4Output	core/mp4Output.h	/^class Mp4Output{$/;"	c
MtgClient	core/mtgClient.cpp	/^MtgClient::MtgClient() :$/;"	f	class:MtgClient
MtgClient	core/mtgClient.h	/^class MtgClient {$/;"	c
MtgHeartbeat	core/mtgInit.cpp	/^MtgHeartbeat::MtgHeartbeat()$/;"	f	class:MtgHeartbeat
MtgHeartbeat	core/mtgInit.h	/^class MtgHeartbeat {$/;"	c
MtgSoFile	mtgFunc.cpp	21;"	d	file:
Mutex	core/Mutex.cpp	/^Mutex::Mutex() {$/;"	f	class:Mutex
Mutex	core/Mutex.h	/^class Mutex{$/;"	c
MyMapUsrVirtualAddr2phy	core/mixtureMode_IPC.cpp	/^static OMX_PTR MyMapUsrVirtualAddr2phy(uint32_t pUsrVirtAddr) {$/;"	f	file:
MyMapUsrVirtualAddr2phy	core/mixtureMode_SDI.cpp	/^static OMX_PTR MyMapUsrVirtualAddr2phy(uint32_t pUsrVirtAddr) {$/;"	f	file:
NACK	core/msgq.h	101;"	d
NB2SE_CONNECT	Command/AssistCommandDefines.h	/^	,NB2SE_CONNECT					=   0x00004100	\/\/\/ NBAgent连接到流媒体$/;"	e	enum:tagALL2SE
NB2SE_COURSEID	Command/AssistCommandDefines.h	/^	,NB2SE_COURSEID$/;"	e	enum:tagALL2SE
NB2SE_DISCONNECT	Command/AssistCommandDefines.h	/^	,NB2SE_DISCONNECT								\/\/\/ NBAgent断开到流媒体的连接$/;"	e	enum:tagALL2SE
NB2SE_PPT_PAGE	Command/AssistCommandDefines.h	/^	,NB2SE_PPT_PAGE									\/\/\/ 发送PPT的页码信息$/;"	e	enum:tagALL2SE
NB2SE_UPLOAD_FINISH	Command/AssistCommandDefines.h	/^	,NB2SE_UPLOAD_FINISH							\/\/\/ 通知服务器PPT文件传输完成$/;"	e	enum:tagALL2SE
NET_ACK_CMD	Command/AssistCommandDefines.h	31;"	d
NET_CMD_TYPE	Command/AssistCommandDefines.h	32;"	d
NET_DATA_HEAD_LEN	Command/AssistCommandDefines.h	72;"	d
NET_DATA_LEN	Command/AssistCommandDefines.h	73;"	d
NET_DATA_PROTOCOL	Command/AssistCommandDefines.h	35;"	d
NET_HEAD_LEN	Command/AssistCommandDefines.h	10;"	d
NET_ONE_FRAME_LEN	Command/AssistCommandDefines.h	75;"	d
NET_RESERVE_VALUDE	Command/AssistCommandDefines.h	27;"	d
NET_SEND_CMD	Command/AssistCommandDefines.h	30;"	d
NORMAL_CAMERA_SPEED	netprotocal/UnitActionDef.h	170;"	d
NSAMPLES	KVideo/audio/codec_engine.cpp	/^	int NSAMPLES   = 0;$/;"	m	namespace:__anon3	file:
NULL	typedef.h	24;"	d
NUM_OF_IN_BUFFERS	core/audioEncodeOMX.h	14;"	d
NUM_OF_OUT_BUFFERS	core/audioEncodeOMX.h	15;"	d
Nodes	monitor/reader.h	/^      typedef std::stack<Value *> Nodes;$/;"	t	class:Json::Reader
NotifyAssistMessage	kernel.cpp	/^void Kernel::NotifyAssistMessage(const char* strMessage) {$/;"	f	class:Kernel
NotifyGetCommand	kernel.cpp	/^void Kernel::NotifyGetCommand(int command) {$/;"	f	class:Kernel
NotifyIPCChannelChanged	kernel.cpp	/^void Kernel::NotifyIPCChannelChanged() {$/;"	f	class:Kernel
NotifyLiveCourseChanged	liveCourse/liveCourseManager.h	/^	virtual bool NotifyLiveCourseChanged() {$/;"	f	class:ILiveCourseManagerObserver
NotifySwitchVGAChannel	kernel.cpp	/^void Kernel::NotifySwitchVGAChannel(int aVGAChannel) {$/;"	f	class:Kernel
NotifyVGAResolution720P	kernel.cpp	/^void Kernel::NotifyVGAResolution720P() {$/;"	f	class:Kernel
OFRAMESIZE	KVideo/audio/codec_engine.cpp	/^	int OFRAMESIZE = 0;$/;"	m	namespace:__anon3	file:
OMXComponentUtils	core/OMXComponentUtils.h	/^class OMXComponentUtils {$/;"	c
OMX_DEBUG_LEVEL1	core/msgq.h	91;"	d
OMX_DEBUG_LEVEL2	core/msgq.h	92;"	d
OMX_DEBUG_LEVEL3	core/msgq.h	93;"	d
OMX_DEBUG_LEVEL4	core/msgq.h	94;"	d
OMX_DEBUG_LEVEL5	core/msgq.h	95;"	d
OMX_DEBUG_OFF	core/msgq.h	90;"	d
OMX_INIT_PARAM	core/OMXCommonDef.h	49;"	d
OMX_MSGHEAPID_CORE0	core/msgq.h	103;"	d
OMX_MSGHEAPID_CORE1	core/msgq.h	104;"	d
OMX_MSGHEAPID_CORE2	core/msgq.h	105;"	d
OMX_MSGQ_SERVERNAME_STRLEN	core/msgq.h	97;"	d
OMX_TEST_INIT_STRUCT_PTR	core/OMXCommonDef.h	41;"	d
OSDManager	core/osdManager.cpp	/^OSDManager::OSDManager()$/;"	f	class:OSDManager
OSDManager	core/osdManager.h	/^class OSDManager {$/;"	c
OUTLEN	utils/codeConverter.h	6;"	d
OUT_DEVICE	Command/AssistCommandDefines.h	106;"	d
ObjectValues	monitor/value.h	/^      typedef CppTL::SmallMap<CZString, Value> ObjectValues;$/;"	t	class:Json::Value
ObjectValues	monitor/value.h	/^      typedef std::map<CZString, Value> ObjectValues;$/;"	t	class:Json::Value
OnAAC	KVideo/audio/iaudio.h	/^	virtual void OnAAC(char* aac, int len) {}$/;"	f	class:iaudio
OnAAC	core/mixtureMode_IPC.cpp	/^void MixtureMode_IPC::OnAAC(char* pAACBuf, int len)$/;"	f	class:MixtureMode_IPC
OnAAC	core/mixtureMode_SDI.cpp	/^void MixtureMode_SDI::OnAAC(char* aac, int len) {$/;"	f	class:MixtureMode_SDI
OnAAC	core/resourceMode_IPC.cpp	/^void ResourceModeHandle_IPC::OnAAC(char* pAACBuf, int len) {$/;"	f	class:ResourceModeHandle_IPC
OnAAC	core/resourceMode_SDI.cpp	/^void ResourceModeHandle_SDI::OnAAC(char* aac, int len) {$/;"	f	class:ResourceModeHandle_SDI
OnLine	netprotocal/ICIICommandStruct.h	/^	BOOL			OnLine;$/;"	m	struct:tagPR2COM_UnitState
OnMixOut	KVideo/audio/codec_engine.cpp	/^void codec_engine::OnMixOut(char* mix, int length, char* all)$/;"	f	class:codec_engine
OnMixOut	KVideo/audio/iaudio.h	/^	virtual void OnMixOut(char* mix, int len, char* all) {}$/;"	f	class:iaudio
OnPCM	KVideo/audio/codec_engine.cpp	/^void codec_engine::OnPCM(char* pcm, int length)$/;"	f	class:codec_engine
OnPCM	KVideo/audio/iaudio.h	/^	virtual void OnPCM(char* pcm, int len) {}$/;"	f	class:iaudio
OnSpeex	KVideo/audio/iaudio.h	/^	virtual void OnSpeex(char* spx, int len) {}$/;"	f	class:iaudio
OnSpeex	core/mixtureMode_IPC.cpp	/^void MixtureMode_IPC::OnSpeex(char* spx, int len)$/;"	f	class:MixtureMode_IPC
OnSpeex	core/mixtureMode_SDI.cpp	/^void MixtureMode_SDI::OnSpeex(char* spx, int len) {$/;"	f	class:MixtureMode_SDI
OnSpeex	core/resourceMode_IPC.cpp	/^void ResourceModeHandle_IPC::OnSpeex(char* spx, int len) {$/;"	f	class:ResourceModeHandle_IPC
OnSpeex	core/resourceMode_SDI.cpp	/^void ResourceModeHandle_SDI::OnSpeex(char* spx, int len) {$/;"	f	class:ResourceModeHandle_SDI
OnSpeex	liveCourse/liveCourseManager.cpp	/^void LiveCourseManager::OnSpeex(char* data, int len)$/;"	f	class:LiveCourseManager
OutportParams	core/OMXCommonDef.h	/^} OutportParams;$/;"	t	typeref:struct:tagOutportParams
OutputBitStreamWriteTask	core/mixtureMode_IPC.cpp	/^void* MixtureMode_IPC::OutputBitStreamWriteTask(void *threadsArg) {$/;"	f	class:MixtureMode_IPC
OutputBitStreamWriteTask	core/mixtureMode_SDI.cpp	/^void* MixtureMode_SDI::OutputBitStreamWriteTask(void *threadsArg) {$/;"	f	class:MixtureMode_SDI
OutputBitStreamWriteTask	core/movieHeaderTail.cpp	/^void* MovieHeaderTail::OutputBitStreamWriteTask(void *threadsArg) {$/;"	f	class:MovieHeaderTail
OutputBitStreamWriteTask	core/resourceMode_SDI.cpp	/^void* ResourceModeHandle_SDI::OutputBitStreamWriteTask(void *threadsArg) {$/;"	f	class:ResourceModeHandle_SDI
PADX_H264	core/constDefines.h	112;"	d
PADY_H264	core/constDefines.h	113;"	d
PCM_LEN	KVideo/audio/SpeexCod.h	5;"	d
PKGCFGS	package.mak	/^PKGCFGS := $(wildcard package.xs) package\/build.cfg$/;"	m
PKGPATH	.xdcenv.mak	/^PKGPATH = \/home\/houstar\/DM8168\/code\/codec_engine\/example\/ti\/sdo\/ce\/examples\/apps\/armlivemedia\/..\/..\/..\/..\/..\/..;\/home\/houstar\/ezsdk\/\/component-sources\/xdctools_3_23_03_53\/packages;\/home\/houstar\/ezsdk\/component-sources\/xdais_7_22_00_03\/packages;\/home\/houstar\/ezsdk\/component-sources\/bios_6_33_05_46\/packages;\/home\/houstar\/ezsdk\/component-sources\/linuxutils_3_22_00_02\/packages;\/home\/houstar\/ezsdk\/component-sources\/syslink_2_20_02_20\/packages;\/home\/houstar\/ezsdk\/component-sources\/osal_1_22_01_09\/packages;\/home\/houstar\/ezsdk\/component-sources\/framework_components_3_22_01_07\/packages;\/home\/houstar\/ezsdk\/component-sources\/edma3lld_02_11_05_02\/packages;\/home\/houstar\/ezsdk\/component-sources\/ipc_1_24_03_32\/packages;\/home\/houstar\/ezsdk\/component-sources\/codec_engine_3_22_01_06\/\/packages;\/home\/houstar\/ezsdk\/component-sources\/xdctools_3_23_03_53\/packages;..\/..\/..\/..\/..\/..$/;"	m
PPTConfig	Command/AssistCommandHandle.h	/^}PPTConfig;$/;"	t	typeref:struct:tagPPTConfig
PPTMode	netprotocal/ICIICommandStruct.h	/^	, PPTMode$/;"	e	enum:tagPRMode
PPTRecordAction	Command/AssistCommandHandle.h	/^}PPTRecordAction;$/;"	t	typeref:enum:tagePPTRecordAction
PPTUrl	netprotocal/TPCCommandStruct.h	/^	char PPTUrl[512];$/;"	m	struct:tagWebServiceParam
PR2COM_DATA1_CVALUE1_LEN	Command/AssistCommandDefines.h	189;"	d
PR2COM_Data1	Command/AssistCommandDefines.h	/^}PR2COM_Data1;$/;"	t	typeref:struct:tagPR2COM_Data1
PR2COM_Data2	Command/AssistCommandDefines.h	/^}PR2COM_Data2;$/;"	t	typeref:struct:tagPR2COM_Data2
PR2COM_DogInfo	netprotocal/ICIICommandStruct.h	/^typedef tagDogInfo PR2COM_DogInfo;$/;"	t
PR2COM_HeartState	netprotocal/ICIICommandStruct.h	/^typedef tagPR2COM_HeartState PR2COM_HeartState;$/;"	t
PR2COM_ID	Command/AssistCommandDefines.h	/^}PR2COM_ID;$/;"	t	typeref:struct:tagPR2COM_ID
PR2COM_RECCtrl	netprotocal/ICIICommandStruct.h	/^typedef tagRECCtrl PR2COM_RECCtrl;$/;"	t
PR2COM_RECState	netprotocal/ICIICommandStruct.h	/^typedef tagPR2COM_RECState PR2COM_RECState;$/;"	t
PR2COM_UnitBaseInfo	netprotocal/ICIICommandStruct.h	/^}PR2COM_UnitBaseInfo;$/;"	t	typeref:struct:tagPR2COM_UnitBaseInfo
PR2COM_UnitState	netprotocal/ICIICommandStruct.h	/^typedef tagPR2COM_UnitState PR2COM_UnitState;$/;"	t
PR2COM_UnitSyllabus	netprotocal/ICIICommandStruct.h	/^}PR2COM_UnitSyllabus;$/;"	t	typeref:struct:tagPR2COM_UnitSyllabus
PRACCParam	netprotocal/TPCCommandStruct.h	/^} PRACCParam;$/;"	t	typeref:struct:tagPRACCParam
PRASSIST_PORT	netprotocal/ICIICommandDef.h	26;"	d
PRChannel	netprotocal/SCSMCommandStruct.h	/^}PRChannel;$/;"	t	typeref:struct:tagPRChannel
PRChannelNo	netprotocal/SCSMCommandStruct.h	/^}PRChannelNo;$/;"	t	typeref:struct:tagPRChannelNo
PRCourseParam	netprotocal/TPCCommandStruct.h	/^} PRCourseParam;$/;"	t	typeref:struct:tagPRCourseParam
PRE_MIX_IMAGE_ADDR_OFFSET	core/constDefines.h	41;"	d
PRE_MIX_IMAGE_SIZE	core/constDefines.h	42;"	d
PRMode	netprotocal/TPCCommandStruct.h	/^	ePRMode PRMode;$/;"	m	struct:tagPRRecordParam
PROTOCOL_TYPE	Command/AssistCommandDefines.h	37;"	d
PRRecordParam	netprotocal/TPCCommandStruct.h	/^} PRRecordParam;$/;"	t	typeref:struct:tagPRRecordParam
PRState	netprotocal/SCSMCommandStruct.h	/^}PRState;$/;"	t	typeref:struct:tagPRState
PRTemplate	netprotocal/TPCCommandStruct.h	/^	char PRTemplate[50];$/;"	m	struct:tagPRRecordParam
PageIndex	monitor/value.h	/^      typedef unsigned int PageIndex;$/;"	t	class:Json::ValueInternalArray
Path	monitor/json_value.cpp	/^Path::Path( const std::string &path,$/;"	f	class:Json::Path
Path	monitor/value.h	/^   class Path$/;"	c	namespace:Json
PathArgument	monitor/json_value.cpp	/^PathArgument::PathArgument( Value::UInt index )$/;"	f	class:Json::PathArgument
PathArgument	monitor/json_value.cpp	/^PathArgument::PathArgument( const char *key )$/;"	f	class:Json::PathArgument
PathArgument	monitor/json_value.cpp	/^PathArgument::PathArgument( const std::string &key )$/;"	f	class:Json::PathArgument
PathArgument	monitor/json_value.cpp	/^PathArgument::PathArgument()$/;"	f	class:Json::PathArgument
PathArgument	monitor/value.h	/^   class PathArgument$/;"	c	namespace:Json
PipeMsg	core/OMXCommonDef.h	/^} PipeMsg;$/;"	t	typeref:struct:tagPipeMsg
PowerConnectChannelNumber	netprotocal/ICIIUnitCellDef.h	/^	BYTE				PowerConnectChannelNumber;$/;"	m	struct:tagUnitDevInfo
PowerConnectDeviceID	netprotocal/ICIIUnitCellDef.h	/^	BYTE				PowerConnectDeviceID;$/;"	m	struct:tagUnitDevInfo
ProcTimeOut	timer.cpp	/^bool Timer::ProcTimeOut() {$/;"	f	class:Timer
ProjectorState	netprotocal/ICIICommandStruct.h	/^	eCommonState	ProjectorState;$/;"	m	struct:tagPR2COM_UnitState
PutFrame	core/cameraBufferPool.cpp	/^void CameraBufferPool::PutFrame(char* pFrameBuf, int frameLen, int channel) {$/;"	f	class:CameraBufferPool
PutFrame	core/framePool.cpp	/^void FrameBufferPool::PutFrame(char* pFrameBuf, int frameLen) {$/;"	f	class:FrameBufferPool
READSIZE	core/DecodeUtils.h	28;"	d
RECCtrl	netprotocal/ICIICommandStruct.h	/^}RECCtrl;$/;"	t	typeref:struct:tagRECCtrl
RECHead	netprotocal/ICIICommandStruct.h	/^}RECHead;$/;"	t	typeref:struct:tagRECHead
RECRecord	netprotocal/ICIICommandStruct.h	/^}RECRecord;$/;"	t	typeref:struct:tagRECRecord
RECState	netprotocal/ICIICommandStruct.h	/^typedef tagPR2COM_RECState RECState;$/;"	t
REGION_SPACE_POSITION_TYPE	Command/AssistCommandDefines.h	55;"	d
RGBDO	utils/colorConvert.cpp	4;"	d	file:
RGBDO	utils/colorConvert.cpp	6;"	d	file:
RGBDO2	utils/colorConvert.cpp	14;"	d	file:
RGBDO2	utils/colorConvert.cpp	16;"	d	file:
RGBQUAD	utils/bmpfile.h	/^} RGBQUAD;$/;"	t	typeref:struct:tagRGBQUAD
RMode_NULL	netprotocal/ICIICommandStruct.h	/^	, RMode_NULL$/;"	e	enum:tagRecordMode
RMode_Normal	netprotocal/ICIICommandStruct.h	/^	RMode_Normal		=0x00$/;"	e	enum:tagRecordMode
RMode_Other	netprotocal/ICIICommandStruct.h	/^	, RMode_Other$/;"	e	enum:tagRecordMode
RMode_PinP	netprotocal/ICIICommandStruct.h	/^	, RMode_PinP$/;"	e	enum:tagRecordMode
RPos_160	netprotocal/ICIICommandStruct.h	/^	RPos_160			=0x00$/;"	e	enum:tagRecordPos
RPos_170	netprotocal/ICIICommandStruct.h	/^	, RPos_170$/;"	e	enum:tagRecordPos
RPos_180	netprotocal/ICIICommandStruct.h	/^	, RPos_180$/;"	e	enum:tagRecordPos
RPos_NULL	netprotocal/ICIICommandStruct.h	/^	, RPos_NULL$/;"	e	enum:tagRecordPos
RRate_1024K	netprotocal/ICIICommandStruct.h	/^	, RRate_1024K$/;"	e	enum:tagRecordRate
RRate_500K	netprotocal/ICIICommandStruct.h	/^	RRate_500K			=0x00$/;"	e	enum:tagRecordRate
RRate_HD	netprotocal/ICIICommandStruct.h	/^	, RRate_HD			=0x08$/;"	e	enum:tagRecordRate
RRate_NULL	netprotocal/ICIICommandStruct.h	/^	, RRate_NULL		=0x04$/;"	e	enum:tagRecordRate
RRate_Other	netprotocal/ICIICommandStruct.h	/^	, RRate_Other		=0x02$/;"	e	enum:tagRecordRate
RSize_D1	netprotocal/ICIICommandStruct.h	/^	, RSize_D1$/;"	e	enum:tagRecordSize
RSize_D2	netprotocal/ICIICommandStruct.h	/^	, RSize_D2$/;"	e	enum:tagRecordSize
RSize_D3	netprotocal/ICIICommandStruct.h	/^	, RSize_D3$/;"	e	enum:tagRecordSize
RSize_HD	netprotocal/ICIICommandStruct.h	/^	, RSize_HD$/;"	e	enum:tagRecordSize
RSize_NULL	netprotocal/ICIICommandStruct.h	/^	, RSize_NULL$/;"	e	enum:tagRecordSize
RSize_Other	netprotocal/ICIICommandStruct.h	/^	, RSize_Other$/;"	e	enum:tagRecordSize
RSize_VGA	netprotocal/ICIICommandStruct.h	/^	RSize_VGA			=0x00$/;"	e	enum:tagRecordSize
RState_Null	netprotocal/ICIICommandStruct.h	/^	, RState_Null$/;"	e	enum:tagRecordState
RState_Pause	netprotocal/ICIICommandStruct.h	/^	, RState_Pause$/;"	e	enum:tagRecordState
RState_Start	netprotocal/ICIICommandStruct.h	/^	, RState_Start$/;"	e	enum:tagRecordState
RState_Stop	netprotocal/ICIICommandStruct.h	/^	RState_Stop			=0x00$/;"	e	enum:tagRecordState
RTPExtensionHeader	KVideo/audio/rtpstruct.h	/^struct RTPExtensionHeader$/;"	s
RTPHeader	KVideo/audio/rtpstruct.h	/^struct RTPHeader$/;"	s
RTPSourceIdentifier	KVideo/audio/rtpstruct.h	/^struct RTPSourceIdentifier$/;"	s
RTP_STRUCT_H	KVideo/audio/rtpstruct.h	2;"	d
RateLiveMode	netprotocal/TPCCommandStruct.h	/^	eRecordRate RateLiveMode;$/;"	m	struct:tagPRRecordParam
RateMode	netprotocal/TPCCommandStruct.h	/^	eRecordRate RateMode;$/;"	m	struct:tagPRRecordParam
Reader	monitor/json_reader.cpp	/^Reader::Reader( const Features &features )$/;"	f	class:Json::Reader
Reader	monitor/json_reader.cpp	/^Reader::Reader()$/;"	f	class:Json::Reader
Reader	monitor/reader.h	/^   class JSON_API Reader$/;"	c	namespace:Json
RecordConfig_Height_BitMask	netprotocal/ICIIUnitCellDef.h	264;"	d
RecordConfig_Height_BitOffset	netprotocal/ICIIUnitCellDef.h	263;"	d
RecordConfig_Height_Offset	netprotocal/ICIIUnitCellDef.h	262;"	d
RecordConfig_Len	netprotocal/ICIIUnitCellDef.h	248;"	d
RecordConfig_Mode_BitMask	netprotocal/ICIIUnitCellDef.h	260;"	d
RecordConfig_Mode_BitOffset	netprotocal/ICIIUnitCellDef.h	259;"	d
RecordConfig_Mode_Offset	netprotocal/ICIIUnitCellDef.h	258;"	d
RecordConfig_Offset	netprotocal/ICIIUnitCellDef.h	247;"	d
RecordConfig_Rate_BitMask	netprotocal/ICIIUnitCellDef.h	252;"	d
RecordConfig_Rate_BitOffset	netprotocal/ICIIUnitCellDef.h	251;"	d
RecordConfig_Rate_Offset	netprotocal/ICIIUnitCellDef.h	250;"	d
RecordConfig_Size_BitMask	netprotocal/ICIIUnitCellDef.h	256;"	d
RecordConfig_Size_BitOffset	netprotocal/ICIIUnitCellDef.h	255;"	d
RecordConfig_Size_Offset	netprotocal/ICIIUnitCellDef.h	254;"	d
RecordCurStorage_Len	netprotocal/ICIIUnitCellDef.h	245;"	d
RecordCurStorage_Offset	netprotocal/ICIIUnitCellDef.h	244;"	d
RecordList	web/recordList.cpp	/^RecordList::RecordList()$/;"	f	class:RecordList
RecordList	web/recordList.h	/^class RecordList {$/;"	c
RecordMode	netprotocal/ICIICommandStruct.h	/^	eRecordMode		RecordMode;$/;"	m	struct:tagPR2COM_UnitState
RecordModeFactory	core/recordModeFactory.h	/^class RecordModeFactory {$/;"	c
RecordPos	netprotocal/ICIICommandStruct.h	/^	eRecordPos		RecordPos;$/;"	m	struct:tagPR2COM_UnitState
RecordRate	netprotocal/ICIICommandStruct.h	/^	eRecordRate		RecordRate;$/;"	m	struct:tagPR2COM_UnitState
RecordSize	netprotocal/ICIICommandStruct.h	/^	eRecordSize		RecordSize;$/;"	m	struct:tagPR2COM_UnitState
RecordState	netprotocal/ICIICommandStruct.h	/^	eRecordState	RecordState;$/;"	m	struct:tagPR2COM_UnitState
RemoteVideoDataLost	Command/Function.cpp	/^BOOL CFunction::RemoteVideoDataLost(string strMsg) {$/;"	f	class:CFunction
ResourceMode	netprotocal/ICIICommandStruct.h	/^	, ResourceMode$/;"	e	enum:tagPRMode
ResourceModeHandle_IPC	core/resourceMode_IPC.cpp	/^ResourceModeHandle_IPC::ResourceModeHandle_IPC(Kernel* pKernel)$/;"	f	class:ResourceModeHandle_IPC
ResourceModeHandle_IPC	core/resourceMode_IPC.h	/^class ResourceModeHandle_IPC : public BaseMode, public IAudioEncodeListener,$/;"	c
ResourceModeHandle_SDI	core/resourceMode_SDI.cpp	/^ResourceModeHandle_SDI::ResourceModeHandle_SDI(Kernel* pKernel) : BaseMode(pKernel)  {$/;"	f	class:ResourceModeHandle_SDI
ResourceModeHandle_SDI	core/resourceMode_SDI.h	/^class ResourceModeHandle_SDI : public BaseMode, public IAudioEncodeListener,$/;"	c
RtmpHandle	core/rtmpHandle.cpp	/^RtmpHandle::RtmpHandle() :  m_handle(NULL), m_bTimerValid(false), m_threadId(0) {$/;"	f	class:RtmpHandle
RtmpHandle	core/rtmpHandle.h	/^class RtmpHandle : public ITimerListener{$/;"	c
RtmpManager	core/rtmpManager.cpp	/^RtmpManager::RtmpManager()$/;"	f	class:RtmpManager
RtmpManager	core/rtmpManager.h	/^class RtmpManager {$/;"	c
RunState_Len	netprotocal/ICIIUnitCellDef.h	194;"	d
RunState_Mode_BitMask	netprotocal/ICIIUnitCellDef.h	202;"	d
RunState_Mode_BitOffset	netprotocal/ICIIUnitCellDef.h	201;"	d
RunState_Mode_Offset	netprotocal/ICIIUnitCellDef.h	200;"	d
RunState_Offset	netprotocal/ICIIUnitCellDef.h	193;"	d
RunState_Power_BitMask	netprotocal/ICIIUnitCellDef.h	198;"	d
RunState_Power_BitOffset	netprotocal/ICIIUnitCellDef.h	197;"	d
RunState_Power_Offset	netprotocal/ICIIUnitCellDef.h	196;"	d
SALOOPBACK_DEBUG	KVideo/captureVideoDefines.h	33;"	d
SDIEncOutputWriteTask	core/mixtureMode_SDI.cpp	/^void* MixtureMode_SDI::SDIEncOutputWriteTask(void* threadsArg) {$/;"	f	class:MixtureMode_SDI
SDIScaleOutputChannel1	core/mixtureMode_SDI.cpp	/^void* MixtureMode_SDI::SDIScaleOutputChannel1(void* threadsArg) {$/;"	f	class:MixtureMode_SDI
SDIScaleOutputChannel2	core/mixtureMode_SDI.cpp	/^void* MixtureMode_SDI::SDIScaleOutputChannel2(void* threadsArg) {$/;"	f	class:MixtureMode_SDI
SDIVideoProviderSystem	KVideo/sdiVideoProviderSystem.cpp	/^SDIVideoProviderSystem::SDIVideoProviderSystem() {$/;"	f	class:SDIVideoProviderSystem
SDIVideoProviderSystem	KVideo/sdiVideoProviderSystem.h	/^class SDIVideoProviderSystem : public ICaptureSDIListener, public ITimerListener {$/;"	c
SDI_PIX_FMT	KVideo/captureSDIVideo.cpp	18;"	d	file:
SD_DISPLAY_HEIGHT	core/constDefines.h	98;"	d
SD_DISPLAY_WIDTH	core/constDefines.h	97;"	d
SD_WIDTH	core/constDefines.h	110;"	d
SE2ALL_COURSEINFO	Command/AssistCommandDefines.h	/^	,SE2ALL_COURSEINFO				=	0x00004400	\/\/\/ 当前的课程信息$/;"	e	enum:tagALL2SE
SE2ALL_RESPONSE_FILENAME	Command/AssistCommandDefines.h	/^	,SE2ALL_RESPONSE_FILENAME						\/\/\/ 文件名$/;"	e	enum:tagALL2SE
SE2ALL_RESPONSE_SHAREPATH	Command/AssistCommandDefines.h	/^	,SE2ALL_RESPONSE_SHAREPATH						\/\/\/ 共享路径(包括登录用户名和密码)$/;"	e	enum:tagALL2SE
SE2ALL_RESPONSE_STATE_COURSEOVER	Command/AssistCommandDefines.h	/^	,SE2ALL_RESPONSE_STATE_COURSEOVER				\/\/\/ 通知NBAgent本节课结束$/;"	e	enum:tagALL2SE
SE2ALL_RESPONSE_STATE_PAUSE	Command/AssistCommandDefines.h	/^	,SE2ALL_RESPONSE_STATE_PAUSE					\/\/\/ 通知NBAgent状态为Pause$/;"	e	enum:tagALL2SE
SE2ALL_RESPONSE_STATE_PLAY	Command/AssistCommandDefines.h	/^	,SE2ALL_RESPONSE_STATE_PLAY		=	0x00004300	\/\/\/ 通知NBAgent状态为Play$/;"	e	enum:tagALL2SE
SE2ALL_RESPONSE_STATE_STOP	Command/AssistCommandDefines.h	/^	,SE2ALL_RESPONSE_STATE_STOP						\/\/\/ 通知NBAgent状态为Stop$/;"	e	enum:tagALL2SE
SE2ALL_RESPONSE_TIME	Command/AssistCommandDefines.h	/^	,SE2ALL_RESPONSE_TIME							\/\/\/ 当前的时间$/;"	e	enum:tagALL2SE
SE2ALL_TEACHERINFO	Command/AssistCommandDefines.h	/^	,SE2ALL_TEACHERINFO								\/\/\/ 当前的教师信息$/;"	e	enum:tagALL2SE
SEC2S_LOGIN	Command/AssistCommandDefines.h	/^	,SEC2S_LOGIN					=	0x00004600	\/\/\/ 流媒体客户端登录$/;"	e	enum:tagALL2SE
SEC2S_LOGOUT	Command/AssistCommandDefines.h	/^	,SEC2S_LOGOUT									\/\/\/ 流媒体客户端登出$/;"	e	enum:tagALL2SE
SERIAL_FRAME_NUM	Command/AssistCommandDefines.h	90;"	d
SES2C_LIVE_INFO	Command/AssistCommandDefines.h	/^	,SES2C_LIVE_INFO								\/\/\/ 发送直播信息，客户端收到此命令初始化视频接收端$/;"	e	enum:tagALL2SE
SES2C_PPT_FILE	Command/AssistCommandDefines.h	/^	,SES2C_PPT_FILE									\/\/\/ 发送PPT文件名，客户端收到此命令初始化PPT$/;"	e	enum:tagALL2SE
SES2C_PPT_PAGE	Command/AssistCommandDefines.h	/^	,SES2C_PPT_PAGE									\/\/\/ 发送当前PPT翻到了哪页$/;"	e	enum:tagALL2SE
SES2C_RECEPT_LOGIN	Command/AssistCommandDefines.h	/^	,SES2C_RECEPT_LOGIN				=	0x00004500	\/\/\/ 流媒体服务器接受客户端的登录$/;"	e	enum:tagALL2SE
SES2C_STATE_PAUSE	Command/AssistCommandDefines.h	/^	,SES2C_STATE_PAUSE								\/\/\/ 暂停播放$/;"	e	enum:tagALL2SE
SES2C_STATE_PLAY	Command/AssistCommandDefines.h	/^	,SES2C_STATE_PLAY								\/\/\/ 开始播放$/;"	e	enum:tagALL2SE
SES2C_STATE_STOP	Command/AssistCommandDefines.h	/^	,SES2C_STATE_STOP								\/\/\/ 停止播放$/;"	e	enum:tagALL2SE
SMALL_SPACE_POSITION_TYPE	Command/AssistCommandDefines.h	54;"	d
SMExited	netprotocal/SCSMCommandStruct.h	/^	SMExited ,$/;"	e	enum:tageSMState
SMExiting	netprotocal/SCSMCommandStruct.h	/^	SMExiting ,$/;"	e	enum:tageSMState
SMNull	netprotocal/SCSMCommandStruct.h	/^	SMNull = 0,$/;"	e	enum:tageSMState
SMPCCSoft	netprotocal/ICIICommandStruct.h	/^	eCommonState	SMPCCSoft;$/;"	m	struct:tagPR2COM_UnitState
SMPCConnect	netprotocal/ICIICommandStruct.h	/^	eCommonState	SMPCConnect;$/;"	m	struct:tagPR2COM_UnitState
SMPCState	netprotocal/ICIICommandStruct.h	/^	eCommonState	SMPCState;$/;"	m	struct:tagPR2COM_UnitState
SMPaused	netprotocal/SCSMCommandStruct.h	/^	SMPaused ,$/;"	e	enum:tageSMState
SMPausing	netprotocal/SCSMCommandStruct.h	/^	SMPausing ,$/;"	e	enum:tageSMState
SMPreview	netprotocal/SCSMCommandStruct.h	/^	SMPreview$/;"	e	enum:tageSMState
SMRecording	netprotocal/SCSMCommandStruct.h	/^	SMRecording ,$/;"	e	enum:tageSMState
SMReplaying	netprotocal/SCSMCommandStruct.h	/^	SMReplaying ,$/;"	e	enum:tageSMState
SMStopped	netprotocal/SCSMCommandStruct.h	/^	SMStopped ,$/;"	e	enum:tageSMState
SMStopping	netprotocal/SCSMCommandStruct.h	/^	SMStopping ,$/;"	e	enum:tageSMState
SNTConnectInfo	core/OMXCommonDef.h	/^} SNTConnectInfo;$/;"	t	typeref:struct:tagSNTConnectInfo
SOURCE_AVDEVICE	netprotocal/SCSMCommandStruct.h	127;"	d
SOURCE_DEVICE	netprotocal/SCSMCommandStruct.h	126;"	d
SOURCE_POS	Command/AssistCommandDefines.h	13;"	d
SOURCE_SCENE_COUNT	netprotocal/SCSMCommandStruct.h	128;"	d
SOURCE_STUDENT	netprotocal/SCSMCommandStruct.h	125;"	d
SOURCE_TEACHER	netprotocal/SCSMCommandStruct.h	124;"	d
SPEEX_COD_H	KVideo/audio/SpeexCod.h	2;"	d
SPEEX_RUN_THREAD	KVideo/audio/codec_engine.cpp	/^	const int SPEEX_RUN_THREAD = 15;$/;"	m	namespace:__anon3	file:
SPEEX_SETDEC_0	KVideo/audio/codec_engine.cpp	/^	const int SPEEX_SETDEC_0   = 11;$/;"	m	namespace:__anon3	file:
SPEEX_SETDEC_1	KVideo/audio/codec_engine.cpp	/^	const int SPEEX_SETDEC_1   = 12;$/;"	m	namespace:__anon3	file:
SPEEX_SETDEC_2	KVideo/audio/codec_engine.cpp	/^	const int SPEEX_SETDEC_2   = 13;$/;"	m	namespace:__anon3	file:
SPEEX_SETDEC_3	KVideo/audio/codec_engine.cpp	/^	const int SPEEX_SETDEC_3   = 14;$/;"	m	namespace:__anon3	file:
SPEEX_SETENC	KVideo/audio/codec_engine.cpp	/^	const int SPEEX_SETENC     = 10;$/;"	m	namespace:__anon3	file:
SPX_LEN	KVideo/audio/SpeexCod.h	4;"	d
STREAM_DEVICE_TYPE	Command/AssistCommandDefines.h	62;"	d
STRUCT_DEF_H	KVideo/audio/structdef.h	7;"	d
SYNC_HEAD	Command/AssistCommandDefines.h	12;"	d
SYNC_HEAD	kerneldef.h	10;"	d
SceneBackPic	netprotocal/SCSMCommandStruct.h	/^	SceneBackPic ,$/;"	e	enum:tageSceneElementType
SceneBackPicInfo	netprotocal/SCSMCommandStruct.h	/^}SceneBackPicInfo;$/;"	t	typeref:struct:tagSceneBackPicInfo
SceneCommonInfo	netprotocal/SCSMCommandStruct.h	/^}SceneCommonInfo;$/;"	t	typeref:struct:tagSceneCommonInfo
SceneCurRecord_CurShootDev_Len	netprotocal/ICIIUnitCellDef.h	239;"	d
SceneCurRecord_CurShootDev_Offset	netprotocal/ICIIUnitCellDef.h	238;"	d
SceneCurRecord_CurShootScene_Len	netprotocal/ICIIUnitCellDef.h	242;"	d
SceneCurRecord_CurShootScene_Offset	netprotocal/ICIIUnitCellDef.h	241;"	d
SceneCurRecord_Len	netprotocal/ICIIUnitCellDef.h	236;"	d
SceneCurRecord_Offset	netprotocal/ICIIUnitCellDef.h	235;"	d
SceneMediaFile	netprotocal/SCSMCommandStruct.h	/^	SceneMediaFile$/;"	e	enum:tageSceneElementType
SceneMeidaFileInfo	netprotocal/SCSMCommandStruct.h	/^}SceneMeidaFileInfo;$/;"	t	typeref:struct:tagSceneMeidaFileInfo
SceneMixPic	netprotocal/SCSMCommandStruct.h	/^	SceneMixPic ,$/;"	e	enum:tageSceneElementType
SceneMixPicInfo	netprotocal/SCSMCommandStruct.h	/^}SceneMixPicInfo;$/;"	t	typeref:struct:tagSceneMixPicInfo
SceneNULL	netprotocal/SCSMCommandStruct.h	/^	SceneNULL = 0,$/;"	e	enum:tageSceneElementType
SceneNum	netprotocal/ICIICommandStruct.h	/^	BYTE			SceneNum;$/;"	m	struct:tagPR2COM_UnitState
SceneString	netprotocal/SCSMCommandStruct.h	/^	SceneString ,$/;"	e	enum:tageSceneElementType
SceneStringInfo	netprotocal/SCSMCommandStruct.h	/^}SceneStringInfo;$/;"	t	typeref:struct:tagSceneStringInfo
SceneVideo	netprotocal/SCSMCommandStruct.h	/^	SceneVideo ,$/;"	e	enum:tageSceneElementType
SceneVideoInfo	netprotocal/SCSMCommandStruct.h	/^}SceneVideoInfo;$/;"	t	typeref:struct:tagSceneVideoInfo
ScreenLiveMode	netprotocal/TPCCommandStruct.h	/^	eRecordSize ScreenLiveMode;$/;"	m	struct:tagPRRecordParam
ScreenMode	netprotocal/TPCCommandStruct.h	/^	eRecordSize ScreenMode;$/;"	m	struct:tagPRRecordParam
SelDeviceType	netprotocal/ICIICommandStruct.h	/^	WORD			SelDeviceType;$/;"	m	struct:tagPR2COM_UnitState
SelfType	monitor/value.h	/^      typedef ValueConstIterator SelfType;$/;"	t	class:Json::ValueConstIterator
SelfType	monitor/value.h	/^      typedef ValueIterator SelfType;$/;"	t	class:Json::ValueIterator
SelfType	monitor/value.h	/^      typedef ValueIteratorBase SelfType;$/;"	t	class:Json::ValueIteratorBase
SempUtils	core/semp.h	/^class SempUtils {$/;"	c
SendNotify	Command/Function.cpp	/^BOOL CFunction::SendNotify(string strNotify, BOOL bError) {$/;"	f	class:CFunction
Setting	setting.cpp	/^Setting::Setting()$/;"	f	class:Setting
Setting	setting.h	/^class Setting{$/;"	c
ShareMemManager	core/shareMem.cpp	/^ShareMemManager::ShareMemManager() {$/;"	f	class:ShareMemManager
ShareMemManager	core/shareMem.h	/^class ShareMemManager {$/;"	c
ShenGao	netprotocal/TPCCommandStruct.h	/^	eRecordPos ShenGao;$/;"	m	struct:tagPRRecordParam
SourceDevice	netprotocal/ICIICommandStruct.h	/^	BYTE			SourceDevice;$/;"	m	struct:tagPR2COM_UnitState
StateHandle	liveMediaState.cpp	/^StateHandle::StateHandle() {$/;"	f	class:StateHandle
StateHandle	liveMediaState.h	/^class StateHandle {$/;"	c
State_Off	netprotocal/ICIICommandStruct.h	/^	State_Off			=0$/;"	e	enum:tagCommonState
State_On	netprotocal/ICIICommandStruct.h	/^	, State_On			$/;"	e	enum:tagCommonState
State_On_Cmd	netprotocal/ICIICommandStruct.h	/^	, State_On_Cmd$/;"	e	enum:tagUnitState
State_On_Key	netprotocal/ICIICommandStruct.h	/^	, State_On_Key$/;"	e	enum:tagUnitState
State_On_RFCard	netprotocal/ICIICommandStruct.h	/^	, State_On_RFCard$/;"	e	enum:tagUnitState
State_On_Time	netprotocal/ICIICommandStruct.h	/^	, State_On_Time$/;"	e	enum:tagUnitState
StaticString	monitor/value.h	/^      explicit StaticString( const char *czstring )$/;"	f	class:Json::StaticString
StaticString	monitor/value.h	/^   class JSON_API StaticString$/;"	c	namespace:Json
StrategyList	netprotocal/TPCCommandStruct.h	/^} StrategyList;$/;"	t	typeref:struct:tagStrategyList
StrategyName	netprotocal/TPCCommandStruct.h	/^} StrategyName;$/;"	t	typeref:struct:tagStrategyName
StrategyState	netprotocal/ICIICommandStruct.h	/^	eCommonState	StrategyState;$/;"	m	struct:tagPR2COM_UnitState
StrategyTemplate	netprotocal/TPCCommandStruct.h	/^	char StrategyTemplate[50];$/;"	m	struct:tagPRRecordParam
StreamMediaCommonInfo	netprotocal/SCSMCommandStruct.h	/^}StreamMediaCommonInfo;$/;"	t	typeref:struct:tagSMCommonInfo
StreamMediaState	netprotocal/SCSMCommandStruct.h	/^}StreamMediaState;$/;"	t	typeref:struct:tagStreamMediaState
StreamVideoManager	KVideo/streamVideoManager.cpp	/^StreamVideoManager::StreamVideoManager()$/;"	f	class:StreamVideoManager
StreamVideoManager	KVideo/streamVideoManager.h	/^class StreamVideoManager : public IStreamVideoListener {$/;"	c
Stretagy	netprotocal/TPCCommandStruct.h	/^	StrategyName Stretagy[10];$/;"	m	struct:tagStrategyList
StyledStreamWriter	monitor/json_writer.cpp	/^StyledStreamWriter::StyledStreamWriter( std::string indentation )$/;"	f	class:Json::StyledStreamWriter
StyledStreamWriter	monitor/writer.h	/^   class JSON_API StyledStreamWriter$/;"	c	namespace:Json
StyledWriter	monitor/json_writer.cpp	/^StyledWriter::StyledWriter()$/;"	f	class:Json::StyledWriter
StyledWriter	monitor/writer.h	/^   class JSON_API StyledWriter: public Writer$/;"	c	namespace:Json
SubVideoManager	liveCourse/subVideoManager.cpp	/^SubVideoManager::SubVideoManager()$/;"	f	class:SubVideoManager
SubVideoManager	liveCourse/subVideoManager.h	/^class SubVideoManager : public IStreamVideoListener{$/;"	c
SyllabusInfoEndIndex	netprotocal/ICIIUnitCellDef.h	8;"	d
SyllabusInfoStartIndex	netprotocal/ICIIUnitCellDef.h	7;"	d
SyllabusTable	netprotocal/ICIIUnitCellDef.h	/^}SyllabusTable;$/;"	t	typeref:struct:tagSyllabusTable
Syllabuses	netprotocal/ICIICommandStruct.h	/^	SyllabusTable		Syllabuses;$/;"	m	struct:tagPR2COM_UnitSyllabus
TAIL_ADDR_OFFSET	core/constDefines.h	47;"	d
TAIL_IMAGE_SIZE	core/constDefines.h	48;"	d
TEACHER_BACKIMAGE_ADDR_OFFSET	core/constDefines.h	26;"	d
TEACHER_BACKIMAGE_SIZE	core/constDefines.h	27;"	d
TEACHER_STUD_BACKIMAGE_ADDR_OFFSET	core/constDefines.h	29;"	d
TEACHER_STUD_BACKIMAGE_SIZE	core/constDefines.h	30;"	d
TEACHER_STUD_VGA_BACKIMAGE_ADDR_OFFSET	core/constDefines.h	35;"	d
TEACHER_STUD_VGA_BACKIMAGE_SIZE	core/constDefines.h	36;"	d
TEACHER_VGA_BACKIMAGE_ADDR_OFFSET	core/constDefines.h	32;"	d
TEACHER_VGA_BACKIMAGE_SIZE	core/constDefines.h	33;"	d
TI81XX_EDMA_MOVE	core/edma.h	16;"	d
TPCConnect	netprotocal/ICIICommandStruct.h	/^	eCommonState	TPCConnect;$/;"	m	struct:tagPR2COM_UnitState
TPCSoft	netprotocal/ICIICommandStruct.h	/^	eCommonState	TPCSoft;$/;"	m	struct:tagPR2COM_UnitState
TPCState	netprotocal/ICIICommandStruct.h	/^	eCommonState	TPCState;$/;"	m	struct:tagPR2COM_UnitState
TRUE	typedef.h	18;"	d
TailBackPic	setting.h	/^	SceneBackPicInfo	TailBackPic;$/;"	m	struct:tagRecordTemplate
TailTime	setting.h	/^	SceneStringInfo		TailTime;$/;"	m	struct:tagRecordTemplate
TailTitle	setting.h	/^	SceneStringInfo		TailTitle;$/;"	m	struct:tagRecordTemplate
TeacherName	netprotocal/TPCCommandStruct.h	/^	char TeacherName[50];$/;"	m	struct:tagPRCourseParam
Template	netprotocal/TPCCommandStruct.h	/^	TemplateName Template[10];$/;"	m	struct:tagTemplateList
TemplateList	netprotocal/TPCCommandStruct.h	/^} TemplateList;$/;"	t	typeref:struct:tagTemplateList
TemplateName	netprotocal/TPCCommandStruct.h	/^} TemplateName;$/;"	t	typeref:struct:tagTemplateName
ThreadAttr	core/OMXCommonDef.h	/^  pthread_attr_t ThreadAttr;$/;"	m	struct:tagComponentWrapper
TimeOutThread	KVideo/audio/audio_playback.cpp	/^void* TimeOutThread(void* param)$/;"	f
Timer	timer.cpp	/^Timer::Timer()$/;"	f	class:Timer
Timer	timer.h	/^class Timer {$/;"	c
Title	netprotocal/TPCCommandStruct.h	/^	char Title[50];$/;"	m	struct:tagPRCourseParam
Token	monitor/reader.h	/^      class Token$/;"	c	class:Json::Reader
TokenType	monitor/reader.h	/^      enum TokenType$/;"	g	class:Json::Reader
Type	monitor/json_batchallocator.h	/^   typedef AllocatedType Type;$/;"	t	class:Json::BatchAllocator
U	utils/colorConvert.cpp	9;"	d	file:
U16	utils/bmpfile.h	/^typedef unsigned short U16;$/;"	t
U32	utils/bmpfile.h	/^typedef unsigned int U32;$/;"	t
U8	utils/bmpfile.h	/^typedef unsigned char U8;$/;"	t
UCtrl_Auto	netprotocal/ICIICommandStruct.h	/^	, UCtrl_Auto				\/**< 自动		*\/$/;"	e	enum:tagUnitCtrl
UCtrl_Manual	netprotocal/ICIICommandStruct.h	/^	UCtrl_Manual		=0x00   \/**< 手动		*\/$/;"	e	enum:tagUnitCtrl
UCtrl_TDev	netprotocal/ICIICommandStruct.h	/^	, UCtrl_TDev				\/**< 接管设备		*\/$/;"	e	enum:tagUnitCtrl
UCtrl_TDevRec	netprotocal/ICIICommandStruct.h	/^	, UCtrl_TDevRec				\/**< 接管设备+录制*\/$/;"	e	enum:tagUnitCtrl
UCtrl_TRec	netprotocal/ICIICommandStruct.h	/^	, UCtrl_TRec				\/**< 接管录制		*\/$/;"	e	enum:tagUnitCtrl
UDP_MAX_LEN	kerneldef.h	11;"	d
UIA_CONFIGURE_ACK	core/msgq.h	100;"	d
UIA_CONFIGURE_CMD	core/msgq.h	99;"	d
UINT	typedef.h	/^typedef     unsigned int   	UINT;$/;"	t
UINT64	typedef.h	/^typedef  unsigned long long UINT64;$/;"	t
UInt	monitor/forwards.h	/^   typedef unsigned int UInt;$/;"	t	namespace:Json
UInt	monitor/value.h	/^      typedef Json::UInt UInt;$/;"	t	class:Json::Value
UNIT_ID	kerneldef.h	16;"	d
USHORT	typedef.h	/^typedef     unsigned short  USHORT;$/;"	t
UState_Off	netprotocal/ICIICommandStruct.h	/^	UState_Off			=0x00$/;"	e	enum:tagUnitState
UTIL_ALIGN	core/OMXCommonDef.h	57;"	d
Udp	Command/udp.cpp	/^Udp::Udp() :$/;"	f	class:Udp
Udp	Command/udp.h	/^class Udp {$/;"	c
UnitAddressPort	netprotocal/ICIIUnitCellDef.h	4;"	d
UnitBaseInfo	netprotocal/ICIIUnitCellDef.h	/^}UnitBaseInfo;$/;"	t	typeref:struct:tagUnitBaseInfo
UnitConfVer_Len	netprotocal/ICIIUnitCellDef.h	175;"	d
UnitConfVer_Offset	netprotocal/ICIIUnitCellDef.h	174;"	d
UnitCtrl	netprotocal/ICIICommandStruct.h	/^	eUnitCtrl		UnitCtrl;$/;"	m	struct:tagPR2COM_UnitState
UnitCtrl	netprotocal/SCSMCommandStruct.h	/^	eUnitCtrl  		UnitCtrl;$/;"	m	struct:tagPRState
UnitCtrl	netprotocal/TPCCommandStruct.h	/^	eUnitCtrl UnitCtrl;$/;"	m	struct:tagPRRecordParam
UnitDevInfo	netprotocal/ICIIUnitCellDef.h	/^}UnitDevInfo;$/;"	t	typeref:struct:tagUnitDevInfo
UnitDevStat	netprotocal/ICIIUnitCellDef.h	/^}UnitDevStat;$/;"	t	typeref:struct:tagUnitDevStat
UnitDevState_AmplifierState_BitMask	netprotocal/ICIIUnitCellDef.h	333;"	d
UnitDevState_AmplifierState_BitOffset	netprotocal/ICIIUnitCellDef.h	332;"	d
UnitDevState_AmplifierState_Offset	netprotocal/ICIIUnitCellDef.h	331;"	d
UnitDevState_AudioCardLink_BitMask	netprotocal/ICIIUnitCellDef.h	321;"	d
UnitDevState_AudioCardLink_BitOffset	netprotocal/ICIIUnitCellDef.h	320;"	d
UnitDevState_AudioCardLink_Offset	netprotocal/ICIIUnitCellDef.h	319;"	d
UnitDevState_KeyBoardLink_BitMask	netprotocal/ICIIUnitCellDef.h	309;"	d
UnitDevState_KeyBoardLink_BitOffset	netprotocal/ICIIUnitCellDef.h	308;"	d
UnitDevState_KeyBoardLink_Offset	netprotocal/ICIIUnitCellDef.h	307;"	d
UnitDevState_Len	netprotocal/ICIIUnitCellDef.h	277;"	d
UnitDevState_LightState_BitMask	netprotocal/ICIIUnitCellDef.h	305;"	d
UnitDevState_LightState_BitOffset	netprotocal/ICIIUnitCellDef.h	304;"	d
UnitDevState_LightState_Offset	netprotocal/ICIIUnitCellDef.h	303;"	d
UnitDevState_Offset	netprotocal/ICIIUnitCellDef.h	276;"	d
UnitDevState_ProjectorState_BitMask	netprotocal/ICIIUnitCellDef.h	337;"	d
UnitDevState_ProjectorState_BitOffset	netprotocal/ICIIUnitCellDef.h	336;"	d
UnitDevState_ProjectorState_Offset	netprotocal/ICIIUnitCellDef.h	335;"	d
UnitDevState_SMPCLink_BitMask	netprotocal/ICIIUnitCellDef.h	297;"	d
UnitDevState_SMPCLink_BitOffset	netprotocal/ICIIUnitCellDef.h	296;"	d
UnitDevState_SMPCLink_Offset	netprotocal/ICIIUnitCellDef.h	295;"	d
UnitDevState_SMPCPower_BitMask	netprotocal/ICIIUnitCellDef.h	293;"	d
UnitDevState_SMPCPower_BitOffset	netprotocal/ICIIUnitCellDef.h	292;"	d
UnitDevState_SMPCPower_Offset	netprotocal/ICIIUnitCellDef.h	291;"	d
UnitDevState_SMPCSoftCtr_BitMask	netprotocal/ICIIUnitCellDef.h	301;"	d
UnitDevState_SMPCSoftCtr_BitOffset	netprotocal/ICIIUnitCellDef.h	300;"	d
UnitDevState_SMPCSoftCtr_Offset	netprotocal/ICIIUnitCellDef.h	299;"	d
UnitDevState_TPCLink_BitMask	netprotocal/ICIIUnitCellDef.h	285;"	d
UnitDevState_TPCLink_BitOffset	netprotocal/ICIIUnitCellDef.h	284;"	d
UnitDevState_TPCLink_Offset	netprotocal/ICIIUnitCellDef.h	283;"	d
UnitDevState_TPCPower_BitMask	netprotocal/ICIIUnitCellDef.h	281;"	d
UnitDevState_TPCPower_BitOffset	netprotocal/ICIIUnitCellDef.h	280;"	d
UnitDevState_TPCPower_Offset	netprotocal/ICIIUnitCellDef.h	279;"	d
UnitDevState_TPCSoftCtr_BitMask	netprotocal/ICIIUnitCellDef.h	289;"	d
UnitDevState_TPCSoftCtr_BitOffset	netprotocal/ICIIUnitCellDef.h	288;"	d
UnitDevState_TPCSoftCtr_Offset	netprotocal/ICIIUnitCellDef.h	287;"	d
UnitDevState_TrackCardLink_BitMask	netprotocal/ICIIUnitCellDef.h	313;"	d
UnitDevState_TrackCardLink_BitOffset	netprotocal/ICIIUnitCellDef.h	312;"	d
UnitDevState_TrackCardLink_Offset	netprotocal/ICIIUnitCellDef.h	311;"	d
UnitDevState_VideoCard1Link_BitMask	netprotocal/ICIIUnitCellDef.h	325;"	d
UnitDevState_VideoCard1Link_BitOffset	netprotocal/ICIIUnitCellDef.h	324;"	d
UnitDevState_VideoCard1Link_Offset	netprotocal/ICIIUnitCellDef.h	323;"	d
UnitDevState_VideoCard2Link_BitMask	netprotocal/ICIIUnitCellDef.h	329;"	d
UnitDevState_VideoCard2Link_BitOffset	netprotocal/ICIIUnitCellDef.h	328;"	d
UnitDevState_VideoCard2Link_Offset	netprotocal/ICIIUnitCellDef.h	327;"	d
UnitDevState_VideoSyncLink_BitMask	netprotocal/ICIIUnitCellDef.h	317;"	d
UnitDevState_VideoSyncLink_BitOffset	netprotocal/ICIIUnitCellDef.h	316;"	d
UnitDevState_VideoSyncLink_Offset	netprotocal/ICIIUnitCellDef.h	315;"	d
UnitMaxEncoderCount	netprotocal/ICIIUnitCellDef.h	61;"	d
UnitSingleEncodeChannelCount	netprotocal/ICIIUnitCellDef.h	60;"	d
UnitState	netprotocal/ICIICommandStruct.h	/^	eUnitState		UnitState;$/;"	m	struct:tagPR2COM_UnitState
UnitStateInfoBlock	netprotocal/ICIIUnitCellDef.h	172;"	d
UnitSyllabus	netprotocal/ICIIUnitCellDef.h	/^}UnitSyllabus;$/;"	t	typeref:struct:tagUnitSyllabus
UpdateUnitHead	netprotocal/ICIICommandStruct.h	/^}UpdateUnitHead;$/;"	t	typeref:struct:tagUpdateUnitHead
UserID	core/mtgClient.h	/^	int UserID() {$/;"	f	class:MtgClient
UsingDevice	netprotocal/ICIICommandStruct.h	/^	BYTE			UsingDevice;$/;"	m	struct:tagPR2COM_UnitState
V	utils/colorConvert.cpp	10;"	d	file:
V4L2_DV_1024_768_60	KVideo/captureVideoDefines.h	28;"	d
V4L2_DV_1360_768_60	KVideo/captureVideoDefines.h	29;"	d
V4L2_DV_1600_1200_60	KVideo/captureVideoDefines.h	30;"	d
VERS	package/ti_sdo_ce_examples_apps_armlivemedia.java	/^    static final String VERS = "@(#) xdc-y25\\n";$/;"	f	class:ti_sdo_ce_examples_apps_armlivemedia
VERSION_MUL_CAMERA	config.h	4;"	d
VGAEncodeOutWriteTask	KVideo/vgaProviderSystem.cpp	/^void* VGAProviderSystem::VGAEncodeOutWriteTask(void* pParam) {$/;"	f	class:VGAProviderSystem
VGAEncodeOutWriteTask	core/mixtureMode_SDI.cpp	/^void* MixtureMode_SDI::VGAEncodeOutWriteTask(void* threadsArg) {$/;"	f	class:MixtureMode_SDI
VGAProviderSystem	KVideo/vgaProviderSystem.cpp	/^VGAProviderSystem::VGAProviderSystem()$/;"	f	class:VGAProviderSystem
VGAProviderSystem	KVideo/vgaProviderSystem.h	/^class VGAProviderSystem : public ICaptureVGAListener, public ITimerListener {$/;"	c
VGAScaleOutWriteTask	core/mixtureMode_IPC.cpp	/^void* MixtureMode_IPC::VGAScaleOutWriteTask(void* threadsArg) {$/;"	f	class:MixtureMode_IPC
VGAScaleOutWriteTask	core/mixtureMode_SDI.cpp	/^void* MixtureMode_SDI::VGAScaleOutWriteTask(void* threadsArg) {$/;"	f	class:MixtureMode_SDI
VGAStateHandle	utils/vgaState.cpp	/^VGAStateHandle::VGAStateHandle() {$/;"	f	class:VGAStateHandle
VGAStateHandle	utils/vgaState.h	/^class VGAStateHandle  {$/;"	c
VGAStatusChangeNormal	KVideo/vgaProviderSystem.h	20;"	d
VGAStatusChannelChange	KVideo/vgaProviderSystem.h	22;"	d
VGAStatusException	KVideo/vgaProviderSystem.h	21;"	d
VGA_BASE_ADDR	core/membufUtils.h	28;"	d
VGA_DISPLAY_OFFSET	core/constDefines.h	53;"	d
VGA_DISPLAY_SIZE	core/constDefines.h	54;"	d
VGA_POOL_ADDR_OFFSET	core/constDefines.h	56;"	d
VGA_SIZE	core/constDefines.h	57;"	d
VIDEOM3SERVERNAME	core/msgq.h	86;"	d
VIDEO_FACTORY_H	KVideo/VideoFactory.h	2;"	d
VIDEO_GRAY1	utils/colorConvert.h	/^	VIDEO_GRAY1,$/;"	e	enum:EColorFormat
VIDEO_GRAY1X	utils/colorConvert.h	/^	VIDEO_GRAY1X,$/;"	e	enum:EColorFormat
VIDEO_GRAY4	utils/colorConvert.h	/^	VIDEO_GRAY4,$/;"	e	enum:EColorFormat
VIDEO_GRAY8	utils/colorConvert.h	/^	VIDEO_GRAY8,$/;"	e	enum:EColorFormat
VIDEO_HI240	utils/colorConvert.h	/^	VIDEO_HI240,$/;"	e	enum:EColorFormat
VIDEO_INVALID	utils/colorConvert.h	/^	VIDEO_INVALID = 0xFF$/;"	e	enum:EColorFormat
VIDEO_NV12	utils/colorConvert.h	/^	VIDEO_NV12, \/\/NV12 也就是yuv422sp$/;"	e	enum:EColorFormat
VIDEO_RGB03	utils/colorConvert.h	/^	VIDEO_RGB03 = 0,$/;"	e	enum:EColorFormat
VIDEO_RGB04b	utils/colorConvert.h	/^	VIDEO_RGB04b,$/;"	e	enum:EColorFormat
VIDEO_RGB08	utils/colorConvert.h	/^	VIDEO_RGB08,$/;"	e	enum:EColorFormat
VIDEO_RGB08b	utils/colorConvert.h	/^	VIDEO_RGB08b,$/;"	e	enum:EColorFormat
VIDEO_RGB15	utils/colorConvert.h	/^	VIDEO_RGB15,$/;"	e	enum:EColorFormat
VIDEO_RGB15X	utils/colorConvert.h	/^	VIDEO_RGB15X,$/;"	e	enum:EColorFormat
VIDEO_RGB16	utils/colorConvert.h	/^	VIDEO_RGB16,$/;"	e	enum:EColorFormat
VIDEO_RGB16X	utils/colorConvert.h	/^	VIDEO_RGB16X,$/;"	e	enum:EColorFormat
VIDEO_RGB24	utils/colorConvert.h	/^	VIDEO_RGB24,$/;"	e	enum:EColorFormat
VIDEO_RGB24B	utils/colorConvert.h	/^	VIDEO_RGB24B,$/;"	e	enum:EColorFormat
VIDEO_RGB24X	utils/colorConvert.h	/^	VIDEO_RGB24X,$/;"	e	enum:EColorFormat
VIDEO_RGB32	utils/colorConvert.h	/^	VIDEO_RGB32,$/;"	e	enum:EColorFormat
VIDEO_RGB32B	utils/colorConvert.h	/^	VIDEO_RGB32B,$/;"	e	enum:EColorFormat
VIDEO_RGB32P	utils/colorConvert.h	/^	VIDEO_RGB32P,$/;"	e	enum:EColorFormat
VIDEO_RGB32PX	utils/colorConvert.h	/^	VIDEO_RGB32PX,$/;"	e	enum:EColorFormat
VIDEO_RGB32X	utils/colorConvert.h	/^	VIDEO_RGB32X,$/;"	e	enum:EColorFormat
VIDEO_UYVY	utils/colorConvert.h	/^	VIDEO_UYVY,$/;"	e	enum:EColorFormat
VIDEO_Y41P	utils/colorConvert.h	/^	VIDEO_Y41P,$/;"	e	enum:EColorFormat
VIDEO_YUV410	utils/colorConvert.h	/^	VIDEO_YUV410,$/;"	e	enum:EColorFormat
VIDEO_YUV411P	utils/colorConvert.h	/^	VIDEO_YUV411P,$/;"	e	enum:EColorFormat
VIDEO_YUV420	utils/colorConvert.h	/^	VIDEO_YUV420,$/;"	e	enum:EColorFormat
VIDEO_YUV422P	utils/colorConvert.h	/^	VIDEO_YUV422P,$/;"	e	enum:EColorFormat
VIDEO_YUYV	utils/colorConvert.h	/^	VIDEO_YUYV,$/;"	e	enum:EColorFormat
VIDEO_YVU410	utils/colorConvert.h	/^	VIDEO_YVU410,$/;"	e	enum:EColorFormat
VIDEO_YVU420	utils/colorConvert.h	/^	VIDEO_YVU420,$/;"	e	enum:EColorFormat
VOLUME_ID	netprotocal/ICIICommandDef.h	80;"	d
VPSSM3SERVERNAME	core/msgq.h	87;"	d
Value	monitor/json_value.cpp	/^Value::Value( Int value )$/;"	f	class:Json::Value
Value	monitor/json_value.cpp	/^Value::Value( UInt value )$/;"	f	class:Json::Value
Value	monitor/json_value.cpp	/^Value::Value( ValueType type )$/;"	f	class:Json::Value
Value	monitor/json_value.cpp	/^Value::Value( bool value )$/;"	f	class:Json::Value
Value	monitor/json_value.cpp	/^Value::Value( const CppTL::ConstString &value )$/;"	f	class:Json::Value
Value	monitor/json_value.cpp	/^Value::Value( const StaticString &value )$/;"	f	class:Json::Value
Value	monitor/json_value.cpp	/^Value::Value( const Value &other )$/;"	f	class:Json::Value
Value	monitor/json_value.cpp	/^Value::Value( const char *beginValue, $/;"	f	class:Json::Value
Value	monitor/json_value.cpp	/^Value::Value( const char *value )$/;"	f	class:Json::Value
Value	monitor/json_value.cpp	/^Value::Value( const std::string &value )$/;"	f	class:Json::Value
Value	monitor/json_value.cpp	/^Value::Value( double value )$/;"	f	class:Json::Value
Value	monitor/value.h	/^   class JSON_API Value $/;"	c	namespace:Json
ValueAllocator	monitor/value.h	/^   class ValueAllocator$/;"	c	namespace:Json
ValueArrayAllocator	monitor/value.h	/^   class JSON_API ValueArrayAllocator$/;"	c	namespace:Json
ValueConstIterator	monitor/value.h	/^   class ValueConstIterator : public ValueIteratorBase$/;"	c	namespace:Json
ValueHolder	monitor/value.h	/^      union ValueHolder$/;"	u	class:Json::Value
ValueInternalArray	monitor/value.h	/^   class JSON_API ValueInternalArray$/;"	c	namespace:Json
ValueInternalLink	monitor/value.h	/^   class JSON_API ValueInternalLink$/;"	c	namespace:Json
ValueInternalMap	monitor/value.h	/^   class JSON_API ValueInternalMap$/;"	c	namespace:Json
ValueIterator	monitor/value.h	/^   class ValueIterator : public ValueIteratorBase$/;"	c	namespace:Json
ValueIteratorBase	monitor/value.h	/^   class ValueIteratorBase$/;"	c	namespace:Json
ValueMapAllocator	monitor/value.h	/^   class JSON_API ValueMapAllocator$/;"	c	namespace:Json
ValueType	monitor/value.h	/^   enum ValueType$/;"	g	namespace:Json
VideoCourseName	setting.h	/^	SceneStringInfo		VideoCourseName;$/;"	m	struct:tagRecordTemplate
VideoCoursePic	setting.h	/^	SceneMixPicInfo		VideoCoursePic;$/;"	m	struct:tagRecordTemplate
VideoEncCard1Connect	netprotocal/ICIICommandStruct.h	/^	eCommonState	VideoEncCard1Connect;$/;"	m	struct:tagPR2COM_UnitState
VideoEncCard2Connect	netprotocal/ICIICommandStruct.h	/^	eCommonState	VideoEncCard2Connect;$/;"	m	struct:tagPR2COM_UnitState
VideoListItemCount	liveCourse/courseWxManager.h	15;"	d
VideoLogo	setting.h	/^	SceneMixPicInfo		VideoLogo;$/;"	m	struct:tagRecordTemplate
VideoSyncConnect	netprotocal/ICIICommandStruct.h	/^	eCommonState	VideoSyncConnect;$/;"	m	struct:tagPR2COM_UnitState
VideoTeacherName	setting.h	/^	SceneStringInfo		VideoTeacherName;$/;"	m	struct:tagRecordTemplate
VolumeCurDevice_Len	netprotocal/ICIIUnitCellDef.h	184;"	d
VolumeCurDevice_Mute_BitMask	netprotocal/ICIIUnitCellDef.h	188;"	d
VolumeCurDevice_Mute_BitOffset	netprotocal/ICIIUnitCellDef.h	187;"	d
VolumeCurDevice_Mute_Offset	netprotocal/ICIIUnitCellDef.h	186;"	d
VolumeCurDevice_Offset	netprotocal/ICIIUnitCellDef.h	183;"	d
VolumeCurDevice_Value_BitMask	netprotocal/ICIIUnitCellDef.h	190;"	d
WIRELESS_SPACE_POSITION_TYPE	Command/AssistCommandDefines.h	56;"	d
WMSUrl	netprotocal/TPCCommandStruct.h	/^	char WMSUrl[512];$/;"	m	struct:tagWebServiceParam
WORD	typedef.h	/^typedef     unsigned short  WORD;$/;"	t
WarningCurInput_Len	netprotocal/ICIIUnitCellDef.h	267;"	d
WarningCurInput_Offset	netprotocal/ICIIUnitCellDef.h	266;"	d
WarningCurInput_Warning_Offset	netprotocal/ICIIUnitCellDef.h	269;"	d
WarningCurOutput_Len	netprotocal/ICIIUnitCellDef.h	272;"	d
WarningCurOutput_Offset	netprotocal/ICIIUnitCellDef.h	271;"	d
WarningCurOutput_Warning_Offset	netprotocal/ICIIUnitCellDef.h	274;"	d
WarningIn	netprotocal/ICIICommandStruct.h	/^	BYTE			WarningIn;$/;"	m	struct:tagPR2COM_UnitState
WarningOut	netprotocal/ICIICommandStruct.h	/^	BYTE			WarningOut;	$/;"	m	struct:tagPR2COM_UnitState
WebServiceParam	netprotocal/TPCCommandStruct.h	/^} WebServiceParam;$/;"	t	typeref:struct:tagWebServiceParam
WeigeMode	netprotocal/ICIICommandStruct.h	/^	, WeigeMode$/;"	e	enum:tagPRMode
Writer	monitor/writer.h	/^   class JSON_API Writer$/;"	c	namespace:Json
XDCCFGDIR	package.mak	/^XDCCFGDIR = package\/cfg\/$/;"	m
XDCINCS	package.mak	/^XDCINCS = -I. -I$(strip $(subst ;, -I,$(subst $(space),\\$(space),$(XPKGPATH))))$/;"	m
XDC_PATH	makefile	/^XDC_PATH := $(EXAMPLES_ROOTDIR);$(XDC_PATH)$/;"	m
Y	utils/colorConvert.cpp	8;"	d	file:
_ALL2SE_OVER	Command/AssistCommandDefines.h	/^	,_ALL2SE_OVER					=	0x00004FFF	\/\/\/平台发送给流媒体最大的命令值$/;"	e	enum:tagALL2SE
_ALL2SE_START	Command/AssistCommandDefines.h	/^	_ALL2SE_START					=	0x00004000	\/\/\/ 其它系统查询流媒体服务器当前状态$/;"	e	enum:tagALL2SE
_XDCBUILDCOUNT	.xdcenv.mak	/^_XDCBUILDCOUNT = 0$/;"	m
__MSGQ_H__	core/msgq.h	80;"	d
__local_include	package/package_ti.sdo.ce.examples.apps.armlivemedia.c	18;"	d	file:
__stringify	package/package_ti.sdo.ce.examples.apps.armlivemedia.c	17;"	d	file:
__xdc_PKGNAME	package/package_ti.sdo.ce.examples.apps.armlivemedia.c	13;"	d	file:
__xdc_PKGPREFIX	package/package_ti.sdo.ce.examples.apps.armlivemedia.c	14;"	d	file:
__xdc_PKGVERS	package/package_ti.sdo.ce.examples.apps.armlivemedia.c	12;"	d	file:
_aac_listener	KVideo/audio/codec_engine.h	/^	iaudio*                     _aac_listener;$/;"	m	class:codec_engine
_allocParams	KVideo/audio/codec_engine.cpp	/^	Memory_AllocParams          _allocParams;$/;"	m	namespace:__anon3	file:
_attrs	KVideo/audio/codec_engine.h	/^	Engine_Attrs                _attrs;$/;"	m	class:codec_engine
_audioBuffer	KVideo/audio/audio_playback.h	/^	unsigned char* _audioBuffer;$/;"	m	class:audio_playback
_audioCapture	KVideo/audio/codec_engine.h	/^	audio_capture*              _audioCapture;$/;"	m	class:codec_engine
_audioPlayback	KVideo/audio/codec_engine.h	/^	audio_playback*             _audioPlayback;$/;"	m	class:codec_engine
_audio_mixer	KVideo/audio/audio_mixer.h	/^	static audio_mixer* _audio_mixer;$/;"	m	class:audio_mixer
_audiobuffer	KVideo/audio/audio_capture.h	/^	unsigned char* _audiobuffer;$/;"	m	class:audio_capture
_buffer_falg	KVideo/audio/fifo.h	/^	stbufferflag* _buffer_falg;$/;"	m	class:fifo
_caphandle	KVideo/audio/audio_capture.h	/^	snd_pcm_t* _caphandle;$/;"	m	class:audio_capture
_caphandle	KVideo/audioCapture.h	/^	snd_pcm_t* _caphandle;$/;"	m	class:AudioCapture
_channel	KVideo/audio/codec_engine.h	/^	channelinfo                 _channel[6];$/;"	m	class:codec_engine
_channels	KVideo/audio/audio_mixer.h	/^	channelList _channels;$/;"	m	class:audio_mixer
_decBufSizes	KVideo/audio/codec_engine.h	/^	XDAS_Int32                  _decBufSizes[XDM_MAX_IO_BUFFERS];$/;"	m	class:codec_engine
_decDynParams	KVideo/audio/codec_engine.h	/^	AUDENC_DynamicParams        _decDynParams;$/;"	m	class:codec_engine
_decInArgs	KVideo/audio/codec_engine.h	/^	AUDENC_InArgs               _decInArgs;$/;"	m	class:codec_engine
_decOutArgs	KVideo/audio/codec_engine.h	/^	AUDENC_OutArgs              _decOutArgs;$/;"	m	class:codec_engine
_decStatus	KVideo/audio/codec_engine.h	/^	AUDENC_Status               _decStatus;$/;"	m	class:codec_engine
_decode	KVideo/audio/codec_engine.h	/^	XDAS_Int8*                  _decode[XDM_MAX_IO_BUFFERS];$/;"	m	class:codec_engine
_decodeBuf	KVideo/audio/codec_engine.h	/^	XDAS_Int8 *                 _decodeBuf;$/;"	m	class:codec_engine
_decodeBufDesc	KVideo/audio/codec_engine.h	/^	XDM_BufDesc                 _decodeBufDesc;$/;"	m	class:codec_engine
_decodeHandle	KVideo/audio/codec_engine.h	/^	AUDDEC_Handle               _decodeHandle;$/;"	m	class:codec_engine
_disable_count	KVideo/audio/fifo.h	/^	int  _disable_count;$/;"	m	class:fifo
_dsp_thread_attr	KVideo/audio/codec_engine.h	/^	pthread_attr_t              _dsp_thread_attr;$/;"	m	class:codec_engine
_dsp_thread_id	KVideo/audio/codec_engine.h	/^	pthread_t                   _dsp_thread_id;$/;"	m	class:codec_engine
_dst	KVideo/audio/codec_engine.h	/^	XDAS_Int8*                  _dst[XDM_MAX_IO_BUFFERS];$/;"	m	class:codec_engine
_enable_size	KVideo/audio/fifo.h	/^	int  _enable_size;$/;"	m	class:fifo
_enc	KVideo/audio/codec_engine.h	/^	enc_info*                   _enc;$/;"	m	class:codec_engine
_encBufSizes	KVideo/audio/codec_engine.h	/^	XDAS_Int32                  _encBufSizes[XDM_MAX_IO_BUFFERS];$/;"	m	class:codec_engine
_encDynParams	KVideo/audio/codec_engine.h	/^	AUDENC_DynamicParams        _encDynParams;$/;"	m	class:codec_engine
_encEngineHandle	KVideo/audio/codec_engine.h	/^	Engine_Handle               _encEngineHandle;$/;"	m	class:codec_engine
_encInArgs	KVideo/audio/codec_engine.h	/^	AUDENC_InArgs               _encInArgs;$/;"	m	class:codec_engine
_encOutArgs	KVideo/audio/codec_engine.h	/^	AUDENC_OutArgs              _encOutArgs;$/;"	m	class:codec_engine
_encStatus	KVideo/audio/codec_engine.h	/^	AUDENC_Status               _encStatus;$/;"	m	class:codec_engine
_encodeHandle	KVideo/audio/codec_engine.h	/^	AUDENC_Handle               _encodeHandle;$/;"	m	class:codec_engine
_encoded	KVideo/audio/codec_engine.h	/^	XDAS_Int8*                  _encoded[XDM_MAX_IO_BUFFERS];$/;"	m	class:codec_engine
_encodedBuf	KVideo/audio/codec_engine.h	/^	XDAS_Int8 *                 _encodedBuf;$/;"	m	class:codec_engine
_encodedBufDesc	KVideo/audio/codec_engine.h	/^	XDM_BufDesc                 _encodedBufDesc;$/;"	m	class:codec_engine
_fifo	KVideo/audio/codec_engine.h	/^	fifo                        _fifo;$/;"	m	class:codec_engine
_fun	log.h	/^	void (Log::*_fun)(const char *str);$/;"	m	class:Log
_inBuf	KVideo/audio/codec_engine.h	/^	XDAS_Int8 *                 _inBuf;$/;"	m	class:codec_engine
_inBufDesc	KVideo/audio/codec_engine.h	/^	XDM_BufDesc                 _inBufDesc;$/;"	m	class:codec_engine
_inBufSizes	KVideo/audio/codec_engine.h	/^	XDAS_Int32                  _inBufSizes[XDM_MAX_IO_BUFFERS];$/;"	m	class:codec_engine
_index	KVideo/audio/audio_mixer.h	/^	int _index;$/;"	m	class:audio_mixer
_init	KVideo/audio/fifo.h	/^	int _init;$/;"	m	class:fifo
_initialed	KVideo/audio/audio_capture.h	/^	int  _initialed;$/;"	m	class:audio_capture
_initialed	KVideo/audio/audio_mixer.h	/^	int _initialed;$/;"	m	class:audio_mixer
_initialed	KVideo/audio/audio_playback.h	/^	int _initialed;$/;"	m	class:audio_playback
_initialed	KVideo/audio/codec_engine.h	/^	int                         _initialed;$/;"	m	class:codec_engine
_key_channel	KVideo/audio/audio_mixer.h	/^	stChannelInfo* _key_channel;$/;"	m	class:audio_mixer
_list	KVideo/audio/fifo.h	/^	mylist _list;$/;"	m	class:fifo
_listener	Command/udp.h	/^	list<IUdpListener *> _listener;$/;"	m	class:Udp
_listeners	log.h	/^	std::list<ILogListener *> _listeners;$/;"	m	class:Log
_lock	KVideo/audio/codec_engine.h	/^	pthread_mutex_t             _lock;$/;"	m	class:codec_engine
_lock	KVideo/audio/fifo.h	/^	pthread_mutex_t _lock;$/;"	m	class:fifo
_map_base	KVideo/audio/codec_engine.h	/^	char*                       _map_base;$/;"	m	class:codec_engine
_member_count	KVideo/audio/fifo.h	/^	int _member_count;$/;"	m	class:fifo
_mix_listener	KVideo/audio/audio_mixer.h	/^	listenerList _mix_listener;$/;"	m	class:audio_mixer
_mix_thread_attr	KVideo/audio/audio_mixer.h	/^	pthread_attr_t _mix_thread_attr;$/;"	m	class:audio_mixer
_mix_thread_id	KVideo/audio/audio_mixer.h	/^	pthread_t _mix_thread_id;$/;"	m	class:audio_mixer
_mutex	KVideo/audio/fifo.h	/^	pthread_mutex_t _mutex;$/;"	m	class:fifo
_outBuf	KVideo/audio/codec_engine.h	/^	XDAS_Int8 *                 _outBuf;$/;"	m	class:codec_engine
_outBufDesc	KVideo/audio/codec_engine.h	/^	XDM_BufDesc                 _outBufDesc;$/;"	m	class:codec_engine
_outBufSizes	KVideo/audio/codec_engine.h	/^	XDAS_Int32                  _outBufSizes[XDM_MAX_IO_BUFFERS];$/;"	m	class:codec_engine
_pcm_fifo	KVideo/audio/codec_engine.h	/^	fifo                        _pcm_fifo;$/;"	m	class:codec_engine
_pcm_listener	KVideo/audio/audio_capture.h	/^	listenerList _pcm_listener;$/;"	m	class:audio_capture
_pcm_listener	KVideo/audioCapture.h	/^	vector<IAudioCaptureObserver*> _pcm_listener;$/;"	m	class:AudioCapture
_playbackHandle	KVideo/audio/audio_playback.h	/^	snd_pcm_t* _playbackHandle;$/;"	m	class:audio_playback
_port	Command/udp.h	/^	short _port;$/;"	m	class:Udp
_readpcmthrdattr	KVideo/audio/audio_capture.h	/^	pthread_attr_t _readpcmthrdattr;$/;"	m	class:audio_capture
_readpcmthrdattr	KVideo/audioCapture.h	/^	pthread_attr_t _readpcmthrdattr;$/;"	m	class:AudioCapture
_readpcmthrdid	KVideo/audio/audio_capture.h	/^	pthread_t _readpcmthrdid;$/;"	m	class:audio_capture
_readpcmthrdid	KVideo/audioCapture.h	/^	pthread_t _readpcmthrdid;$/;"	m	class:AudioCapture
_recv_spx_map	KVideo/audio/codec_engine.h	/^	spx_map                     _recv_spx_map;$/;"	m	class:codec_engine
_reopen_id	KVideo/audio/audio_playback.h	/^	pthread_t _reopen_id;	$/;"	m	class:audio_playback
_s_udp_ad	kerneldef.h	/^typedef struct _s_udp_ad$/;"	s
_s_udp_cmd	kerneldef.h	/^typedef struct _s_udp_cmd$/;"	s
_s_udp_header	kerneldef.h	/^typedef struct _s_udp_header$/;"	s
_sampleSize	KVideo/audio/audio_playback.h	/^	unsigned long int _sampleSize;$/;"	m	class:audio_playback
_samplesize	KVideo/audio/audio_capture.h	/^	unsigned long int   _samplesize;$/;"	m	class:audio_capture
_sequence_number	KVideo/audio/codec_engine.h	/^	unsigned short              _sequence_number;$/;"	m	class:codec_engine
_socketfd	Command/udp.h	/^	int _socketfd;$/;"	m	class:Udp
_spx_listener	KVideo/audio/codec_engine.h	/^	iaudio*                     _spx_listener;$/;"	m	class:codec_engine
_src	KVideo/audio/codec_engine.h	/^	XDAS_Int8*                  _src[XDM_MAX_IO_BUFFERS];$/;"	m	class:codec_engine
_start_delete	KVideo/audio/audio_mixer.h	/^	int _start_delete;$/;"	m	class:audio_mixer
_start_pop	KVideo/audio/fifo.h	/^	bool _start_pop;$/;"	m	class:fifo
_started	KVideo/audio/audio_capture.h	/^	int  _started;$/;"	m	class:audio_capture
_started	KVideo/audio/audio_playback.h	/^	int _started;$/;"	m	class:audio_playback
_started	KVideo/audio/codec_engine.h	/^	int                         _started;$/;"	m	class:codec_engine
_timestamp	KVideo/audio/codec_engine.h	/^	unsigned long               _timestamp;$/;"	m	class:codec_engine
_type	KVideo/audio/fifo.h	/^	int _type;$/;"	m	class:fifo
aLivePause	Command/AssistCommandHandle.h	/^	, aLivePause$/;"	e	enum:tagePPTRecordAction
aLiveStart	Command/AssistCommandHandle.h	/^	aLiveStart = 10$/;"	e	enum:tagePPTRecordAction
aLiveStop	Command/AssistCommandHandle.h	/^	, aLiveStop$/;"	e	enum:tagePPTRecordAction
aac_data	KVideo/audio/SpeexCod.h	/^	unsigned char aac_data[AAC_LEN];$/;"	m	struct:enc_info
aac_len	KVideo/audio/SpeexCod.h	/^	int  aac_len;$/;"	m	struct:enc_info
acnt	core/edma.h	/^	 int acnt ;$/;"	m	struct:edma_arg
actionID	kerneldef.h	/^    unsigned char actionID;     \/\/动作码$/;"	m	struct:_s_udp_ad
addChildValues_	monitor/writer.h	/^      bool addChildValues_;$/;"	m	class:Json::StyledStreamWriter
addChildValues_	monitor/writer.h	/^      bool addChildValues_;$/;"	m	class:Json::StyledWriter
addComment	monitor/json_reader.cpp	/^Reader::addComment( Location begin, $/;"	f	class:Json::Reader
addError	monitor/json_reader.cpp	/^Reader::addError( const std::string &message, $/;"	f	class:Json::Reader
addErrorAndRecover	monitor/json_reader.cpp	/^Reader::addErrorAndRecover( const std::string &message, $/;"	f	class:Json::Reader
addItem	web/recordList.cpp	/^bool RecordList::addItem(TiXmlElement* pItem) {$/;"	f	class:RecordList
addItem	web/recordList.cpp	/^bool RecordList::addItem(const char* pFileName, int mode, int recordRate,$/;"	f	class:RecordList
addListener	Command/udp.cpp	/^bool Udp::addListener(IUdpListener *listener) {$/;"	f	class:Udp
addListener	KVideo/HikVideo.cpp	/^bool HikVideo::addListener(IStreamVideoListener* listener) {$/;"	f	class:HikVideo
addListener	KVideo/audio/audio_capture.cpp	/^void audio_capture::addListener(iaudio* _listener)$/;"	f	class:audio_capture
addListener	KVideo/audio/audio_mixer.cpp	/^void audio_mixer::addListener(iaudio* _listener)$/;"	f	class:audio_mixer
addListener	KVideo/audioCapture.cpp	/^bool AudioCapture::addListener(IAudioCaptureObserver* _listener)$/;"	f	class:AudioCapture
addListener	KVideo/captureSDIVideo.cpp	/^bool CaptureSDI::addListener(ICaptureSDIListener* pListener) {$/;"	f	class:CaptureSDI
addListener	KVideo/captureVga.cpp	/^bool CaptureVGA::addListener(ICaptureVGAListener* pListener) {$/;"	f	class:CaptureVGA
addListener	KVideo/sdiVideoProviderSystem.cpp	/^bool SDIVideoProviderSystem::addListener(ISDIVideoProviderObserver* pListener) {$/;"	f	class:SDIVideoProviderSystem
addListener	KVideo/vgaProviderSystem.cpp	/^bool VGAProviderSystem::addListener(IVGAProviderObserver* pObserver) {$/;"	f	class:VGAProviderSystem
addListener	core/audioEncode.cpp	/^bool AudioEncode::addListener(IAudioEncodeListener* pListener) {$/;"	f	class:AudioEncode
addListener	core/audioEncodeFAAC.cpp	/^bool AudioEncodeFAAC::addListener(IAudioEncodeListener* pListener) {$/;"	f	class:AudioEncodeFAAC
addListener	core/audioEncodeOMX.cpp	/^bool AudioEncodeOMX::addListener(IAudioEncodeListener* pListener) {$/;"	f	class:AudioEncodeOMX
addListener	core/mtgClient.cpp	/^bool MtgClient::addListener(IMtgListener * listener) {$/;"	f	class:MtgClient
addListener	core/rtmpHandle.cpp	/^bool RtmpHandle::addListener(IRtmpListener * listener) {$/;"	f	class:RtmpHandle
addListener	liveCourse/classWxManager.cpp	/^bool ClassWxManager::addListener(IClassWxObserver* pObserver) {$/;"	f	class:ClassWxManager
addListener	liveCourse/courseWxManager.cpp	/^bool CourseWxManager::addListener(ICourseWxObserver* pObserver) {$/;"	f	class:CourseWxManager
addListener	liveCourse/liveCourseManager.cpp	/^bool LiveCourseManager::addListener(ILiveCourseManagerObserver* pObserver) {$/;"	f	class:LiveCourseManager
addListener	log.cpp	/^bool Log::addListener(ILogListener *listener) {$/;"	f	class:Log
addPathInArg	monitor/json_value.cpp	/^Path::addPathInArg( const std::string &path, $/;"	f	class:Json::Path
addlistener	KVideo/streamVideoManager.cpp	/^bool StreamVideoManager::addlistener(IStreamVideoManagerListener* plistener) {$/;"	f	class:StreamVideoManager
adjust_out_level	KVideo/audio/audio_mixer.cpp	/^int  audio_mixer::adjust_out_level(stAudioMixLevel* plevel, int* mix_in_buffer, short* mix_out_buffer)$/;"	f	class:audio_mixer
all	monitor/json_reader.cpp	/^Features::all()$/;"	f	class:Json::Features
allMixLevel	KVideo/audio/audio_mixer.cpp	/^	stAudioMixLevel allMixLevel;$/;"	m	namespace:__anon7	file:
allocInOutLowerHalfParams	core/mixtureMode_IPC.cpp	/^bool MixtureMode_IPC::allocInOutLowerHalfParams() {$/;"	f	class:MixtureMode_IPC
allocInOutLowerHalfParams	core/mixtureMode_SDI.cpp	/^bool MixtureMode_SDI::allocInOutLowerHalfParams() {$/;"	f	class:MixtureMode_SDI
allocInOutParams	KVideo/vgaProviderSystem.cpp	/^bool VGAProviderSystem::allocInOutParams() {$/;"	f	class:VGAProviderSystem
allocInOutParams	core/Mp4Player.cpp	/^void Mp4FilePlayer::allocInOutParams() {$/;"	f	class:Mp4FilePlayer
allocInOutParams	core/OMXComponentUtils.cpp	/^void OMXComponentUtils::allocInOutParams(ComponentWrapper* &aComponent) {$/;"	f	class:OMXComponentUtils
allocInOutParams	core/audioEncode.cpp	/^bool AudioEncode::allocInOutParams() {$/;"	f	class:AudioEncode
allocInOutParams	core/audioEncodeOMX.cpp	/^bool AudioEncodeOMX::allocInOutParams() {$/;"	f	class:AudioEncodeOMX
allocInOutParams	core/movieHeaderTail.cpp	/^void MovieHeaderTail::allocInOutParams() {$/;"	f	class:MovieHeaderTail
allocInOutParams	core/resourceMode_SDI.cpp	/^void ResourceModeHandle_SDI::allocInOutParams() {$/;"	f	class:ResourceModeHandle_SDI
allocInOutUpperHalfParams	core/mixtureMode_IPC.cpp	/^bool MixtureMode_IPC::allocInOutUpperHalfParams() {$/;"	f	class:MixtureMode_IPC
allocInOutUpperHalfParams	core/mixtureMode_SDI.cpp	/^bool MixtureMode_SDI::allocInOutUpperHalfParams() {$/;"	f	class:MixtureMode_SDI
allocate	monitor/json_batchallocator.h	/^   AllocatedType *allocate()$/;"	f	class:Json::BatchAllocator
allocateBatch	monitor/json_batchallocator.h	/^   static BatchInfo *allocateBatch( unsigned int objectsPerPage )$/;"	f	class:Json::BatchAllocator
allowComments_	monitor/features.h	/^      bool allowComments_;$/;"	m	class:Json::Features
app_obj	core/v4lDisplay.h	/^struct app_obj {$/;"	s
append	monitor/json_value.cpp	/^Value::append( const Value &value )$/;"	f	class:Json::Value
argb32_to_yuyv	utils/colorConvert.cpp	/^ void ColorConvertUtils::argb32_to_yuyv(unsigned char *d, unsigned char *s, int w, int h) {$/;"	f	class:ColorConvertUtils
args_	monitor/value.h	/^      Args args_;$/;"	m	class:Json::Path
arrayValue	monitor/value.h	/^      arrayValue,    \/\/\/< array value (ordered list)$/;"	e	enum:Json::ValueType
array_	monitor/value.h	/^         ValueInternalArray *array_;$/;"	m	struct:Json::ValueInternalArray::IteratorState
array_	monitor/value.h	/^         ValueInternalArray *array_;$/;"	m	union:Json::Value::ValueHolder
array_	monitor/value.h	/^         ValueInternalArray::IteratorState array_;$/;"	m	union:Json::ValueIteratorBase::__anon11
asBool	monitor/json_value.cpp	/^Value::asBool() const$/;"	f	class:Json::Value
asCString	monitor/json_value.cpp	/^Value::asCString() const$/;"	f	class:Json::Value
asConstString	monitor/json_value.cpp	/^Value::asConstString() const$/;"	f	class:Json::Value
asDouble	monitor/json_value.cpp	/^Value::asDouble() const$/;"	f	class:Json::Value
asInt	monitor/json_value.cpp	/^Value::asInt() const$/;"	f	class:Json::Value
asString	monitor/json_value.cpp	/^Value::asString() const$/;"	f	class:Json::Value
asUInt	monitor/json_value.cpp	/^Value::asUInt() const$/;"	f	class:Json::Value
attr	KVideo/audio/codec_engine.h	/^	pthread_attr_t attr;$/;"	m	struct:channelinfo
attr	core/Mutex.h	/^	pthread_mutexattr_t attr;$/;"	m	class:Mutex
audioInProc	core/audioEncode.cpp	/^void* audioInProc(void* pParam) {$/;"	f
audioInProc	core/audioEncodeOMX.cpp	/^static void* audioInProc(void* pParam) {$/;"	f	file:
audioOutProc	core/audioEncode.cpp	/^void * audioOutProc(void *encode) {$/;"	f
audioOutProc	core/audioEncodeFAAC.cpp	/^static void * audioOutProc(void *pParam) {$/;"	f	file:
audioOutProc	core/audioEncodeOMX.cpp	/^static void * audioOutProc(void *encode) {$/;"	f	file:
audioThreadProc	core/mtgClient.cpp	/^void* MtgClient::audioThreadProc(void* pParam) {$/;"	f	class:MtgClient
audio_capture	KVideo/audio/audio_capture.cpp	/^audio_capture::audio_capture()$/;"	f	class:audio_capture
audio_capture	KVideo/audio/audio_capture.h	/^class audio_capture : public iaudio {$/;"	c
audio_mix_linear2ulaw	KVideo/audio/audio_mixer.cpp	48;"	d	file:
audio_mix_linear2ulaw_table	KVideo/audio/audio_mix_linear2ulaw_table.cpp	/^const unsigned char audio_mix_linear2ulaw_table[16384] = $/;"	v
audio_mixer	KVideo/audio/audio_mixer.cpp	/^audio_mixer::audio_mixer()$/;"	f	class:audio_mixer
audio_mixer	KVideo/audio/audio_mixer.h	/^class audio_mixer {$/;"	c
audio_playback	KVideo/audio/audio_playback.cpp	/^audio_playback::audio_playback()$/;"	f	class:audio_playback
audio_playback	KVideo/audio/audio_playback.h	/^class audio_playback {	$/;"	c
bAlterCount	netprotocal/ICIIUnitCellDef.h	/^	BYTE	bAlterCount;$/;"	m	struct:tagUnitDevStat
bAudioChannelNumber	netprotocal/ICIIUnitCellDef.h	/^	BYTE bAudioChannelNumber;$/;"	m	struct:IOConnectParam
bBlank	netprotocal/ICIIUnitCellDef.h	/^	BYTE		bBlank[2];$/;"	m	struct:tagDevStatTable
bBootType	netprotocal/ICIIUnitCellDef.h	/^	BYTE				bBootType;$/;"	m	struct:tagUnitBaseInfo
bChannel	netprotocal/ICIICommandStruct.h	/^	BYTE		bChannel;$/;"	m	struct:tagRECRecord
bChannelNumber	netprotocal/ICIIUnitCellDef.h	/^	BYTE bChannelNumber;$/;"	m	struct:IOConnectParam
bCurRecCount	netprotocal/ICIICommandStruct.h	/^	BYTE		bCurRecCount;$/;"	m	struct:tagPR2COM_RECState
bCurRecCount	netprotocal/ICIICommandStruct.h	/^	BYTE		bCurRecCount;$/;"	m	struct:tagRECHead
bDay	netprotocal/ICIIUnitCellDef.h	/^	BYTE	bDay;$/;"	m	struct:tagUnitDevStat
bDefenceHour	netprotocal/ICIIUnitCellDef.h	/^	BYTE				bDefenceHour;$/;"	m	struct:tagUnitBaseInfo
bDefenceMinute	netprotocal/ICIIUnitCellDef.h	/^	BYTE				bDefenceMinute;$/;"	m	struct:tagUnitBaseInfo
bDemo	netprotocal/ICIICommandStruct.h	/^	BOOL				bDemo;$/;"	m	struct:tagDogInfo
bDeviceID	netprotocal/ICIIUnitCellDef.h	/^	BYTE		bDeviceID;$/;"	m	struct:tagDevStatTable
bDeviceID	netprotocal/ICIIUnitCellDef.h	/^	BYTE bDeviceID;$/;"	m	struct:tagSyllabusTable
bDeviceType	netprotocal/ICIIUnitCellDef.h	/^	BYTE		bDeviceType;$/;"	m	struct:tagDevStatTable
bDeviceType	netprotocal/ICIIUnitCellDef.h	/^	BYTE	bDeviceType;$/;"	m	struct:tagUnitDevStat
bDeviceType	netprotocal/ICIIUnitCellDef.h	/^	BYTE bDeviceType;$/;"	m	struct:tagSyllabusTable
bEncodedCard1IP	netprotocal/ICIIUnitCellDef.h	/^	BYTE				bEncodedCard1IP[6];$/;"	m	struct:tagUnitBaseInfo
bEncodedCard2IP	netprotocal/ICIIUnitCellDef.h	/^	BYTE				bEncodedCard2IP[6];$/;"	m	struct:tagUnitBaseInfo
bEndTimeHour	netprotocal/ICIIUnitCellDef.h	/^	BYTE bEndTimeHour;$/;"	m	struct:tagUnitSyllabus
bEndTimeMinute	netprotocal/ICIIUnitCellDef.h	/^	BYTE bEndTimeMinute;$/;"	m	struct:tagUnitSyllabus
bEvaluator	netprotocal/ICIICommandStruct.h	/^	BOOL				bEvaluator;$/;"	m	struct:tagDogInfo
bGetPortSem	core/OMXCommonDef.h	/^  bool	bGetPortSem;$/;"	m	struct:tagComponentWrapper
bGetStateSem	core/OMXCommonDef.h	/^  bool	bGetStateSem;$/;"	m	struct:tagComponentWrapper
bHasDog	netprotocal/ICIICommandStruct.h	/^	BOOL				bHasDog;$/;"	m	struct:tagDogInfo
bHeadCourseNameShow	setting.h	/^	BOOL				bHeadCourseNameShow;$/;"	m	struct:tagRecordTemplate
bHeadTeacherNameShow	setting.h	/^	BOOL				bHeadTeacherNameShow;$/;"	m	struct:tagRecordTemplate
bHeadTimeShow	setting.h	/^	BOOL				bHeadTimeShow;$/;"	m	struct:tagRecordTemplate
bHeadTitleShow	setting.h	/^	BOOL				bHeadTitleShow;$/;"	m	struct:tagRecordTemplate
bHour	netprotocal/ICIIUnitCellDef.h	/^	BYTE	bHour;$/;"	m	struct:tagUnitDevStat
bIC	netprotocal/ICIICommandStruct.h	/^	BOOL				bIC;$/;"	m	struct:tagDogInfo
bIN	netprotocal/ICIIUnitCellDef.h	/^	BYTE bIN;$/;"	m	struct:ConnectParam
bIPAddress	netprotocal/ICIIUnitCellDef.h	/^	BYTE				bIPAddress[8];$/;"	m	struct:tagUnitBaseInfo
bIPGeteway	netprotocal/ICIIUnitCellDef.h	/^	BYTE				bIPGeteway[8];$/;"	m	struct:tagUnitBaseInfo
bIsAssisted	netprotocal/ICIICommandStruct.h	/^	BOOL			bIsAssisted;$/;"	m	struct:tagPR2COM_UnitState
bIsDefOpen	netprotocal/ICIIUnitCellDef.h	/^	BYTE				bIsDefOpen;$/;"	m	struct:tagUnitBaseInfo
bIsValid	core/cameraBufferPool.h	/^	BOOL	bIsValid;$/;"	m	struct:stCameraFrameBuffer
bIsValid	core/framePool.h	/^	BOOL	bIsValid;$/;"	m	struct:stFrameBuffer
bLink	netprotocal/ICIIUnitCellDef.h	/^	BYTE bLink;$/;"	m	struct:ConnectParam
bLive	netprotocal/SCSMCommandStruct.h	/^	BOOL bLive;$/;"	m	struct:tagPRParam
bMinute	netprotocal/ICIIUnitCellDef.h	/^	BYTE	bMinute;$/;"	m	struct:tagUnitDevStat
bMonitorDevice	netprotocal/ICIIUnitCellDef.h	/^	BYTE				bMonitorDevice;$/;"	m	struct:tagUnitBaseInfo
bMonth	netprotocal/ICIIUnitCellDef.h	/^	BYTE	bMonth;$/;"	m	struct:tagUnitDevStat
bMute	netprotocal/ICIICommandStruct.h	/^	BOOL			bMute;$/;"	m	struct:tagPR2COM_UnitState
bOUT	netprotocal/ICIIUnitCellDef.h	/^	BYTE bOUT;$/;"	m	struct:ConnectParam
bPrivate	netprotocal/ICIIUnitCellDef.h	/^	BYTE		bPrivate[12];$/;"	m	struct:tagDevStatTable
bProperty	netprotocal/ICIIUnitCellDef.h	/^	BYTE bProperty;$/;"	m	struct:ConnectParam
bProperty	netprotocal/ICIIUnitCellDef.h	/^	BYTE bProperty;$/;"	m	struct:IOConnectParam
bRECExist	netprotocal/ICIICommandStruct.h	/^	BOOL	bRECExist;$/;"	m	struct:tagPR2COM_HeartState
bRecord	netprotocal/SCSMCommandStruct.h	/^	BOOL bRecord;$/;"	m	struct:tagPRParam
bResourceMode	netprotocal/SCSMCommandStruct.h	/^	BOOL bResourceMode;$/;"	m	struct:tagPRParam
bServer	netprotocal/ICIICommandStruct.h	/^	BOOL				bServer;$/;"	m	struct:tagDogInfo
bShowCourseInfo	netprotocal/SCSMCommandStruct.h	/^	BOOL bShowCourseInfo;$/;"	m	struct:tagSceneCommonInfo
bShowLogo	netprotocal/SCSMCommandStruct.h	/^	BOOL bShowLogo;$/;"	m	struct:tagSceneCommonInfo
bStartTimeHour	netprotocal/ICIIUnitCellDef.h	/^	BYTE bStartTimeHour;$/;"	m	struct:tagUnitSyllabus
bStartTimeMinute	netprotocal/ICIIUnitCellDef.h	/^	BYTE bStartTimeMinute;$/;"	m	struct:tagUnitSyllabus
bStreamMediaIP	netprotocal/ICIIUnitCellDef.h	/^	BYTE				bStreamMediaIP[6];$/;"	m	struct:tagUnitBaseInfo
bSubscibeLCMediaType	liveCourse/courseWxManager.h	/^	bool   bSubscibeLCMediaType[eLCMediaTypeCount];$/;"	m	struct:stSubscribeInfo
bSvrIPAddress	netprotocal/ICIIUnitCellDef.h	/^	BYTE				bSvrIPAddress[8];$/;"	m	struct:tagUnitBaseInfo
bTVWallExist	netprotocal/ICIICommandStruct.h	/^	BOOL	bTVWallExist;$/;"	m	struct:tagPR2COM_HeartState
bTailTimeShow	setting.h	/^	BOOL				bTailTimeShow;$/;"	m	struct:tagRecordTemplate
bTailTitleShow	setting.h	/^	BOOL				bTailTitleShow;$/;"	m	struct:tagRecordTemplate
bTeacherPCIP	netprotocal/ICIIUnitCellDef.h	/^	BYTE				bTeacherPCIP[6];$/;"	m	struct:tagUnitBaseInfo
bUnDefenceHour	netprotocal/ICIIUnitCellDef.h	/^	BYTE				bUnDefenceHour;$/;"	m	struct:tagUnitBaseInfo
bUnDefenceMinute	netprotocal/ICIIUnitCellDef.h	/^	BYTE				bUnDefenceMinute;$/;"	m	struct:tagUnitBaseInfo
bUnitDeviceID	netprotocal/ICIIUnitCellDef.h	/^	BYTE				bUnitDeviceID;$/;"	m	struct:tagUnitBaseInfo
bUnitDeviceID	netprotocal/ICIIUnitCellDef.h	/^	BYTE				bUnitDeviceID;$/;"	m	struct:tagUnitDevInfo
bUnitDeviceType	netprotocal/ICIIUnitCellDef.h	/^	BYTE				bUnitDeviceType;$/;"	m	struct:tagUnitBaseInfo
bUnitDeviceType	netprotocal/ICIIUnitCellDef.h	/^	BYTE				bUnitDeviceType;$/;"	m	struct:tagUnitDevInfo
bUnitID	netprotocal/ICIIUnitCellDef.h	/^	BYTE				bUnitID[8];$/;"	m	struct:tagUnitBaseInfo
bVW	netprotocal/ICIICommandStruct.h	/^	BOOL				bVW;$/;"	m	struct:tagDogInfo
bVideoCourseNameShow	setting.h	/^	BOOL				bVideoCourseNameShow;$/;"	m	struct:tagRecordTemplate
bVideoCoursePicShow	setting.h	/^	BOOL				bVideoCoursePicShow;$/;"	m	struct:tagRecordTemplate
bVideoLogoShow	setting.h	/^	BOOL				bVideoLogoShow;$/;"	m	struct:tagRecordTemplate
bVideoTeacherNameShow	setting.h	/^	BOOL				bVideoTeacherNameShow;$/;"	m	struct:tagRecordTemplate
bVolume	netprotocal/ICIICommandStruct.h	/^	BYTE		bVolume;$/;"	m	struct:tagRECHead
bWatchDeviceTypeID	netprotocal/ICIIUnitCellDef.h	/^	BYTE				bWatchDeviceTypeID;$/;"	m	struct:tagUnitBaseInfo
bWeekNumber	netprotocal/ICIIUnitCellDef.h	/^	BYTE bWeekNumber;$/;"	m	struct:tagSyllabusTable
bYearHigh	netprotocal/ICIIUnitCellDef.h	/^	BYTE	bYearHigh;$/;"	m	struct:tagUnitDevStat
bYearLow	netprotocal/ICIIUnitCellDef.h	/^	BYTE	bYearLow;$/;"	m	struct:tagUnitDevStat
batches_	monitor/json_batchallocator.h	/^   BatchInfo *batches_;$/;"	m	class:Json::BatchAllocator
bcnt	core/edma.h	/^	 int bcnt ;	\/\/acnt*bcnt 不能超过32768,即MAX_DMA_TRANSFER_IN_BYTES$/;"	m	struct:edma_arg
begin	monitor/json_value.cpp	/^Value::begin() const$/;"	f	class:Json::Value
begin	monitor/json_value.cpp	/^Value::begin()$/;"	f	class:Json::Value
begin_	monitor/reader.h	/^      Location begin_;$/;"	m	class:Json::Reader
bfHeader	utils/bmpfile.h	/^	BITMAPFILEHEADER bfHeader;$/;"	m	struct:tagBITMAP
bfOffBits	utils/bmpfile.h	/^	U32 bfOffBits;$/;"	m	struct:tagBITMAPFILEHEADER
bfReserved1	utils/bmpfile.h	/^	U16 bfReserved1;$/;"	m	struct:tagBITMAPFILEHEADER
bfReserved2	utils/bmpfile.h	/^	U16	bfReserved2;$/;"	m	struct:tagBITMAPFILEHEADER
bfSize	utils/bmpfile.h	/^	U32 bfSize;$/;"	m	struct:tagBITMAPFILEHEADER
bfType	utils/bmpfile.h	/^	U16 bfType;$/;"	m	struct:tagBITMAPFILEHEADER
biBitCount	utils/bmpfile.h	/^	U16 biBitCount;$/;"	m	struct:tagBITMAPINFOHEADER
biClrImportant	utils/bmpfile.h	/^	U32 biClrImportant;$/;"	m	struct:tagBITMAPINFOHEADER
biClrUsed	utils/bmpfile.h	/^	U32 biClrUsed;$/;"	m	struct:tagBITMAPINFOHEADER
biCompression	utils/bmpfile.h	/^	U32 biCompression;$/;"	m	struct:tagBITMAPINFOHEADER
biHeight	utils/bmpfile.h	/^	U32 biHeight;$/;"	m	struct:tagBITMAPINFOHEADER
biInfo	utils/bmpfile.h	/^	BITMAPINFO biInfo;$/;"	m	struct:tagBITMAP
biPlanes	utils/bmpfile.h	/^	U16 biPlanes;$/;"	m	struct:tagBITMAPINFOHEADER
biSize	utils/bmpfile.h	/^	U32 biSize;$/;"	m	struct:tagBITMAPINFOHEADER
biSizeImage	utils/bmpfile.h	/^	U32 biSizeImage;$/;"	m	struct:tagBITMAPINFOHEADER
biWidth	utils/bmpfile.h	/^	U32 biWidth;$/;"	m	struct:tagBITMAPINFOHEADER
biXPelsPerMeter	utils/bmpfile.h	/^	U32 biXPelsPerMeter;$/;"	m	struct:tagBITMAPINFOHEADER
biYPelsPerMeter	utils/bmpfile.h	/^	U32 biYPelsPerMeter;$/;"	m	struct:tagBITMAPINFOHEADER
bin2Str	log.cpp	/^std::string Log::bin2Str(const char *binary, int len, char space) {$/;"	f	class:Log
bmiColors	utils/bmpfile.h	/^	RGBQUAD bmiColors[1];$/;"	m	struct:tagBITMAPINFO
bmiHeader	utils/bmpfile.h	/^	BITMAPINFOHEADER bmiHeader;$/;"	m	struct:tagBITMAPINFO
bool_	monitor/value.h	/^         bool bool_;$/;"	m	union:Json::Value::ValueHolder
booleanValue	monitor/value.h	/^      booleanValue,  \/\/\/< bool value$/;"	e	enum:Json::ValueType
bucketIndex_	monitor/value.h	/^         BucketIndex bucketIndex_;$/;"	m	struct:Json::ValueInternalMap::IteratorState
bucketsSize_	monitor/value.h	/^      BucketIndex bucketsSize_;$/;"	m	class:Json::ValueInternalMap
buckets_	monitor/value.h	/^      ValueInternalLink *buckets_;$/;"	m	class:Json::ValueInternalMap
buf	KVideo/audio/audio_mixer.h	/^	fifo* buf;$/;"	m	struct:__anon5
buf	KVideo/captureVideoDefines.h	/^	struct v4l2_buffer buf;$/;"	m	struct:capt_obj	typeref:struct:capt_obj::v4l2_buffer
buf	core/v4lDisplay.h	/^	struct v4l2_buffer buf;$/;"	m	struct:app_obj	typeref:struct:app_obj::v4l2_buffer
bufHeader	core/OMXCommonDef.h	/^	OMX_BUFFERHEADERTYPE bufHeader;     \/* used for ETB\/FTB *\/$/;"	m	struct:tagPipeMsg
buf_info	KVideo/captureVideoDefines.h	/^struct buf_info {$/;"	s
buffer	KVideo/audio/structdef.h	/^	char buffer[kMaxBufferSize];    \/\/ it 's output buffer.$/;"	m	struct:stsendinfor
buffer_	monitor/json_batchallocator.h	/^      AllocatedType buffer_[objectPerAllocation];$/;"	m	struct:Json::BatchAllocator::BatchInfo
buffer_addr	core/membufUtils.cpp	/^unsigned char *buffer_addr[MAX_BUFFER];$/;"	v
bufsize	core/DecodeUtils.h	/^  int bufsize;$/;"	m	struct:__anon12
bufused	core/DecodeUtils.h	/^  int bufused;$/;"	m	struct:__anon12
building	liveCourse/livemtgConstDefine.h	/^	char building[100];$/;"	m	struct:tagLiveMtgEnter
byteActionID	netprotocal/ICIICommandDef.h	/^	BYTE byteActionID;$/;"	m	struct:tagIC2CMD_AD_Msg
byteDeviceID	netprotocal/ICIICommandDef.h	/^	BYTE byteDeviceID;$/;"	m	struct:tagIC2CMD_AD_Msg
byteFrameIndex	netprotocal/ICIICommandDef.h	/^	BYTE byteFrameIndex;$/;"	m	struct:tagIC2CMD_Header
byteProtocolType	netprotocal/ICIICommandDef.h	/^	BYTE byteProtocolType;$/;"	m	struct:tagIC2CMD_Header
bytes	core/DecodeUtils.h	/^  unsigned int bytes;$/;"	m	struct:__anon15
cBackPic	netprotocal/SCSMCommandStruct.h	/^	char cBackPic[256];$/;"	m	struct:tagSceneBackPicInfo
cCourseName	netprotocal/SCSMCommandStruct.h	/^	char cCourseName[50];$/;"	m	struct:tagPRParam
cGUID	netprotocal/ICIICommandDef.h	/^	char cGUID[ID_GUID_LEN];$/;"	m	struct:tagIC2CMD_CmdID
cIPCTypeName	netprotocal/SCSMCommandStruct.h	/^	char  cIPCTypeName[32];$/;"	m	struct:tagIPCInfo
cMediaFile	netprotocal/SCSMCommandStruct.h	/^	char cMediaFile[256];$/;"	m	struct:tagSceneMeidaFileInfo
cMixPic	netprotocal/SCSMCommandStruct.h	/^	char cMixPic[256];$/;"	m	struct:tagSceneMixPicInfo
cName	netprotocal/TPCCommandStruct.h	/^	char cName[20];$/;"	m	struct:tagStrategyName
cName	netprotocal/TPCCommandStruct.h	/^	char cName[20];$/;"	m	struct:tagTemplateName
cPublishPoint	netprotocal/SCSMCommandStruct.h	/^	char cPublishPoint[260];$/;"	m	struct:tagPRParam
cRecParam	netprotocal/ICIICommandStruct.h	/^	char		cRecParam[300];$/;"	m	struct:tagRECCtrl
cRecordStyleName	netprotocal/SCSMCommandStruct.h	/^	char cRecordStyleName[50];$/;"	m	struct:tagPRParam
cString	netprotocal/SCSMCommandStruct.h	/^	char cString[50];$/;"	m	struct:tagSceneStringInfo
cTeacherName	netprotocal/SCSMCommandStruct.h	/^	char cTeacherName[50];$/;"	m	struct:tagPRParam
cTitleName	netprotocal/SCSMCommandStruct.h	/^	char cTitleName[50];$/;"	m	struct:tagPRParam
cUserID	netprotocal/ICIICommandDef.h	/^	char cUserID[ID_GUID_LEN];$/;"	m	struct:tagIC2CMD_CmdID
cUtf8CourseName	netprotocal/SCSMCommandStruct.h	/^	char cUtf8CourseName[50];$/;"	m	struct:tagUtf8RecordParam
cUtf8TeacherName	netprotocal/SCSMCommandStruct.h	/^	char cUtf8TeacherName[50];$/;"	m	struct:tagUtf8RecordParam
cUtf8TitleName	netprotocal/SCSMCommandStruct.h	/^	char cUtf8TitleName[50];$/;"	m	struct:tagUtf8RecordParam
cValue	Command/AssistCommandDefines.h	/^	char	cValue[ALL_DATA_LENGTH-1024];		\/\/\/ 字符型数据Buffer$/;"	m	struct:tagPR2COM_Data2
cValue	Command/AssistCommandDefines.h	/^	char	cValue[PR2COM_DATA1_CVALUE1_LEN];		\/\/\/ 字符型值$/;"	m	struct:tagPR2COM_Data1
cValue	netprotocal/ICIICommandDef.h	/^	char cValue[IC2_COMMAND_MAXLEN - 300];$/;"	m	struct:tagIC2CMD_Data2
cValue2	netprotocal/ICIICommandDef.h	/^	char cValue2[DATA1_C_LEN];$/;"	m	struct:tagIC2CMD_Data1
c_str	monitor/json_value.cpp	/^Value::CZString::c_str() const$/;"	f	class:Json::Value::CZString
c_str	monitor/value.h	/^      const char *c_str() const$/;"	f	class:Json::StaticString
calcScalerWidthHeight	core/interactionMode_IPC.cpp	/^bool InteractionMode_IPC::calcScalerWidthHeight() {$/;"	f	class:InteractionMode_IPC
calcScalerWidthHeight	core/interactionMode_SDI.cpp	/^bool InteractionMode_SDI::calcScalerWidthHeight() {$/;"	f	class:InteractionMode_SDI
calcScalerWidthHeight	core/mixtureMode_IPC.cpp	/^bool MixtureMode_IPC::calcScalerWidthHeight() {$/;"	f	class:MixtureMode_IPC
calcScalerWidthHeight	core/mixtureMode_SDI.cpp	/^bool MixtureMode_SDI::calcScalerWidthHeight() {$/;"	f	class:MixtureMode_SDI
calcScalerWidthHeight	core/movieMode_IPC.cpp	/^bool MovieMode_IPC::calcScalerWidthHeight() {$/;"	f	class:MovieMode_IPC
calcScalerWidthHeight	core/movieMode_SDI.cpp	/^bool MovieMode_SDI::calcScalerWidthHeight() {$/;"	f	class:MovieMode_SDI
calc_result_time	utils/commonUtils.cpp	/^int CommonUtils::calc_result_time(timeval *result,  timeval *after,$/;"	f	class:CommonUtils
campus	liveCourse/livemtgConstDefine.h	/^	char campus[100];$/;"	m	struct:tagLiveMtgEnter
cap	KVideo/captureVideoDefines.h	/^	struct v4l2_capability cap;$/;"	m	struct:capt_obj	typeref:struct:capt_obj::v4l2_capability
cap	core/v4lDisplay.h	/^	struct v4l2_capability cap;$/;"	m	struct:app_obj	typeref:struct:app_obj::v4l2_capability
capt	KVideo/captureSDIVideo.h	/^	struct capt_obj capt;$/;"	m	class:CaptureSDI	typeref:struct:CaptureSDI::capt_obj
capt	KVideo/captureVga.h	/^	struct capt_obj capt;$/;"	m	class:CaptureVGA	typeref:struct:CaptureVGA::capt_obj
capt_obj	KVideo/captureVideoDefines.h	/^struct capt_obj {$/;"	s
ccnt	core/edma.h	/^	 int ccnt ;$/;"	m	struct:edma_arg
ce	KVideo/audio/codec_engine.h	/^	codec_engine* ce;$/;"	m	struct:channelinfo
changeBackImage	core/mixtureMode_IPC.cpp	/^void MixtureMode_IPC::changeBackImage() {$/;"	f	class:MixtureMode_IPC
changeBackImage	core/mixtureMode_SDI.cpp	/^void MixtureMode_SDI::changeBackImage() {$/;"	f	class:MixtureMode_SDI
changeComponentState	core/OMXComponentUtils.cpp	/^bool OMXComponentUtils::changeComponentState(ComponentWrapper* &aComponent, OMX_STATETYPE newState) {$/;"	f	class:OMXComponentUtils
changeDisplayResution	core/HDMIDisplayManager.cpp	/^bool HDMIDisplayManager::changeDisplayResution(int width, int height) {$/;"	f	class:HDMIDisplayManager
changePortSettings	core/audioEncode.cpp	/^OMX_ERRORTYPE AudioEncode::changePortSettings() {$/;"	f	class:AudioEncode
changePortSettings	core/audioEncodeOMX.cpp	/^OMX_ERRORTYPE AudioEncodeOMX::changePortSettings() {$/;"	f	class:AudioEncodeOMX
changeStringToTime	web/recordList.cpp	/^bool RecordList::changeStringToTime(const char* pTime, int& year, int &month, int& day, int& hour, int& min, int& sec) {$/;"	f	class:RecordList
changeToRunning	core/mixtureMode_IPC.cpp	/^BOOL MixtureMode_IPC::changeToRunning(bool bOpenVideos) {$/;"	f	class:MixtureMode_IPC
changeToRunning	core/mixtureMode_SDI.cpp	/^BOOL MixtureMode_SDI::changeToRunning(bool bOpenVideos) {$/;"	f	class:MixtureMode_SDI
changeUtcToBeijing	utils/commonUtils.cpp	/^void CommonUtils::changeUtcToBeijing(tm* &t) {$/;"	f	class:CommonUtils
changestate	KVideo/audio/codec_engine.cpp	/^void codec_engine::changestate()$/;"	f	class:codec_engine
channel	core/cameraBufferPool.h	/^	int 	channel;$/;"	m	struct:stCameraFrameBuffer
channelList	KVideo/audio/audio_mixer.h	/^typedef std::list<stChannelInfo*>    channelList;$/;"	t
channelinfo	KVideo/audio/codec_engine.h	/^	channelinfo()$/;"	f	struct:channelinfo
channelinfo	KVideo/audio/codec_engine.h	/^struct channelinfo$/;"	s
checkState	utils/vgaState.cpp	/^bool VGAStateHandle::checkState() {$/;"	f	class:VGAStateHandle
checkSystemStatus	kernel.cpp	/^bool Kernel::checkSystemStatus() {$/;"	f	class:Kernel
checkdisablecount	KVideo/audio/fifo.cpp	/^bool fifo::checkdisablecount()$/;"	f	class:fifo
childValues_	monitor/writer.h	/^      ChildValues childValues_;$/;"	m	class:Json::StyledStreamWriter
childValues_	monitor/writer.h	/^      ChildValues childValues_;$/;"	m	class:Json::StyledWriter
chunkBuf	core/DecodeUtils.h	/^  unsigned char *chunkBuf;$/;"	m	struct:__anon15
chunkCnt	core/DecodeUtils.h	/^  unsigned int chunkCnt;$/;"	m	struct:__anon15
clear	monitor/json_value.cpp	/^Value::clear()$/;"	f	class:Json::Value
clearmembers	KVideo/audio/codec_engine.cpp	/^void codec_engine::clearmembers()$/;"	f	class:codec_engine
close	KVideo/HikVideo.cpp	/^bool HikVideo::close() {$/;"	f	class:HikVideo
close	KVideo/sdiVideoProviderSystem.cpp	/^bool SDIVideoProviderSystem::close() {$/;"	f	class:SDIVideoProviderSystem
close	core/membufUtils.cpp	/^bool MemBufUtils::close() {$/;"	f	class:MemBufUtils
closeFileHandles	core/mixtureMode_IPC.cpp	/^void MixtureMode_IPC::closeFileHandles() {$/;"	f	class:MixtureMode_IPC
closeFileHandles	core/mixtureMode_SDI.cpp	/^void MixtureMode_SDI::closeFileHandles() {$/;"	f	class:MixtureMode_SDI
closeFileHandles	core/resourceMode_IPC.cpp	/^void ResourceModeHandle_IPC::closeFileHandles() {$/;"	f	class:ResourceModeHandle_IPC
closeFileHandles	core/resourceMode_SDI.cpp	/^void ResourceModeHandle_SDI::closeFileHandles() {$/;"	f	class:ResourceModeHandle_SDI
closeSubVideos	liveCourse/subVideoManager.cpp	/^bool SubVideoManager::closeSubVideos() {$/;"	f	class:SubVideoManager
closeVideos	KVideo/streamVideoManager.cpp	/^bool StreamVideoManager::closeVideos() {$/;"	f	class:StreamVideoManager
cmd	core/OMXCommonDef.h	/^	EPipeCmdType cmd;$/;"	m	struct:tagPipeMsg
cmd	kerneldef.h	/^    unsigned int cmd;           \/\/命令字$/;"	m	struct:_s_udp_cmd
cmdFlag	liveCourse/livemtgConstDefine.h	/^	int cmdFlag;$/;"	m	struct:tagLiveMtgHeader
cmdID	liveCourse/livemtgConstDefine.h	/^	int cmdID;$/;"	m	struct:tagLiveMtgHeader
codePointToUTF8	monitor/json_reader.cpp	/^static std::string codePointToUTF8(unsigned int cp)$/;"	f	namespace:Json
codec_engine	KVideo/audio/codec_engine.cpp	/^codec_engine::codec_engine()$/;"	f	class:codec_engine
codec_engine	KVideo/audio/codec_engine.h	/^class codec_engine : public iaudio, public ILiveCourseManagerObserver {$/;"	c
collectComments_	monitor/reader.h	/^      bool collectComments_;$/;"	m	class:Json::Reader
commentAfter	monitor/value.h	/^      commentAfter,             \/\/\/< a comment on the line after a value (only make sense for root value)$/;"	e	enum:Json::CommentPlacement
commentAfterOnSameLine	monitor/value.h	/^      commentAfterOnSameLine,   \/\/\/< a comment just after a value on the same line$/;"	e	enum:Json::CommentPlacement
commentBefore	monitor/value.h	/^      commentBefore = 0,        \/\/\/< a comment placed on the line before a value$/;"	e	enum:Json::CommentPlacement
comment_	monitor/value.h	/^         char *comment_;$/;"	m	struct:Json::Value::CommentInfo
commentsBefore_	monitor/reader.h	/^      std::string commentsBefore_;$/;"	m	class:Json::Reader
comments_	monitor/value.h	/^      CommentInfo *comments_;$/;"	m	class:Json::Value
compare	monitor/json_value.cpp	/^Value::compare( const Value &other )$/;"	f	class:Json::Value
componentError	core/mixtureMode_IPC.cpp	/^bool MixtureMode_IPC::componentError(OMX_ERRORTYPE error) {$/;"	f	class:MixtureMode_IPC
componentError	core/mixtureMode_SDI.cpp	/^bool MixtureMode_SDI::componentError(OMX_ERRORTYPE error) {$/;"	f	class:MixtureMode_SDI
condition	core/semp.h	/^  pthread_cond_t condition;$/;"	m	struct:semp_t
configureAudioDriver	core/audioEncode.cpp	/^bool AudioEncode::configureAudioDriver() {$/;"	f	class:AudioEncode
configureUiaLoggerClient	core/msgq.cpp	/^Void configureUiaLoggerClient (Int coreId, ConfigureUIA *pCfgUIA)$/;"	f
connDataStrmThrdId	core/OMXCommonDef.h	/^  pthread_t connDataStrmThrdId;$/;"	m	struct:tagComponentWrapper
connInfo	core/OMXCommonDef.h	/^  SNTConnectInfo connInfo;$/;"	m	struct:tagInportParams
connInfo	core/OMXCommonDef.h	/^  SNTConnectInfo connInfo;$/;"	m	struct:tagOutportParams
connectComponents	core/OMXComponentUtils.cpp	/^OMX_ERRORTYPE OMXComponentUtils::connectComponents($/;"	f	class:OMXComponentUtils
const_iterator	monitor/value.h	/^      typedef ValueConstIterator const_iterator;$/;"	t	class:Json::Value
consumeFrame	core/shareMem.cpp	/^char* ShareMemManager::consumeFrame(int &len, int nCustomIndex) {$/;"	f	class:ShareMemManager
containsControlCharacter	monitor/json_writer.cpp	/^static bool containsControlCharacter( const char* str )$/;"	f	namespace:Json
containsNewLine	monitor/json_reader.cpp	/^containsNewLine( Reader::Location begin, $/;"	f	namespace:Json
convert	utils/codeConverter.cpp	/^int CodeConverter::convert(char *inbuf,int inlen,char *outbuf,int& outlen) {$/;"	f	class:CodeConverter
copy	core/edma.cpp	/^bool EdmaUtils::copy(void* dest, void* src, int srcWidth, int dstWidth, int size, int mode) {$/;"	f	class:EdmaUtils
copy	core/edma.cpp	/^bool EdmaUtils::copy(void* dest, void* src, int srcWidth, int srcIndex,$/;"	f	class:EdmaUtils
count	core/shareMem.h	/^	int	 count; \/\/could be used by how many custom$/;"	m	struct:stShareMem
courseID	liveCourse/livemtgConstDefine.h	/^	int courseID;													\/\/课堂ID$/;"	m	struct:tagLiveMtgClassStatus
courseID	liveCourse/livemtgConstDefine.h	/^	int courseID;$/;"	m	struct:tagLiveMtgCourse
courseName	liveCourse/livemtgConstDefine.h	/^	char courseName[64];											\/\/课名$/;"	m	struct:tagLiveMtgCourse
courseSecondName	liveCourse/livemtgConstDefine.h	/^	char courseSecondName[64];										\/\/副标题$/;"	m	struct:tagLiveMtgCourse
cpu	liveCourse/livemtgConstDefine.h	/^	int cpu;	\/\/使用百分比$/;"	m	struct:tagLiveMtgWebMessage
create	core/mtgClient.cpp	/^bool MtgClient::create(const char* pPath, int type, BYTE* pInitData, int len) {$/;"	f	class:MtgClient
createAudioThread	core/mtgClient.cpp	/^bool MtgClient::createAudioThread() {$/;"	f	class:MtgClient
createChannel	KVideo/audio/audio_mixer.cpp	/^void* audio_mixer::createChannel(bool key)$/;"	f	class:audio_mixer
createComponents	KVideo/vgaProviderSystem.cpp	/^bool VGAProviderSystem::createComponents() {$/;"	f	class:VGAProviderSystem
createComponents	core/Mp4Player.cpp	/^void Mp4FilePlayer::createComponents() {$/;"	f	class:Mp4FilePlayer
createComponents	core/audioEncode.cpp	/^void AudioEncode::createComponents() {$/;"	f	class:AudioEncode
createComponents	core/audioEncodeOMX.cpp	/^void AudioEncodeOMX::createComponents() {$/;"	f	class:AudioEncodeOMX
createComponents	core/mixtureMode_IPC.cpp	/^bool MixtureMode_IPC::createComponents() {$/;"	f	class:MixtureMode_IPC
createComponents	core/mixtureMode_SDI.cpp	/^bool MixtureMode_SDI::createComponents() {$/;"	f	class:MixtureMode_SDI
createComponents	core/movieHeaderTail.cpp	/^void MovieHeaderTail::createComponents() {$/;"	f	class:MovieHeaderTail
createComponents	core/resourceMode_SDI.cpp	/^bool ResourceModeHandle_SDI::createComponents() {$/;"	f	class:ResourceModeHandle_SDI
createInFileIfMissing	utils/commonUtils.cpp	/^void CommonUtils::createInFileIfMissing(char *inFileName) {$/;"	f	class:CommonUtils
createInstance	KVideo/VideoFactory.cpp	/^KVideoInterface* KVideoCreatorFactory::createInstance($/;"	f	class:KVideoCreatorFactory
createInstance	core/audioEncodeFactory.cpp	/^IAudioEncodeInterface* AudioEncodeFactory::createInstance(bool bOMX) {$/;"	f	class:AudioEncodeFactory
createInstance	core/recordModeFactory.cpp	/^BaseMode* RecordModeFactory::createInstance(int mode, Kernel* pKernel, bool bSDIVideo) {$/;"	f	class:RecordModeFactory
createPaths	liveCourse/classWxManager.cpp	/^bool ClassWxManager::createPaths() {$/;"	f	class:ClassWxManager
createPaths	liveCourse/courseWxManager.cpp	/^bool CourseWxManager::createPaths() {$/;"	f	class:CourseWxManager
crop	KVideo/captureVideoDefines.h	/^	struct v4l2_crop crop;$/;"	m	struct:capt_obj	typeref:struct:capt_obj::v4l2_crop
csrccount	KVideo/audio/rtpstruct.h	/^	uint8_t csrccount:4;$/;"	m	struct:RTPHeader
cstr_	monitor/value.h	/^         const char *cstr_;$/;"	m	class:Json::Value::CZString
ctx	core/DecodeUtils.h	/^  H264_ChunkingCtx ctx;$/;"	m	struct:__anon15
curMode	liveCourse/livemtgConstDefine.h	/^	int curMode;$/;"	m	struct:tagLiveMtgRecorderModeList
currentBatch_	monitor/json_batchallocator.h	/^   BatchInfo *currentBatch_;$/;"	m	class:Json::BatchAllocator
currentItemIndex_	monitor/value.h	/^         unsigned int currentItemIndex_;$/;"	m	struct:Json::ValueInternalArray::IteratorState
currentPageIndex_	monitor/value.h	/^         Value **currentPageIndex_;$/;"	m	struct:Json::ValueInternalArray::IteratorState
currentValue	monitor/json_reader.cpp	/^Reader::currentValue()$/;"	f	class:Json::Reader
current_	monitor/reader.h	/^      Location current_;$/;"	m	class:Json::Reader
current_	monitor/value.h	/^      Value::ObjectValues::iterator current_;$/;"	m	class:Json::ValueIteratorBase
data	KVideo/audio/rtpstruct.h	/^	unsigned char data[128];	\/\/ 42$/;"	m	struct:stRTPPacket
dataLen	kerneldef.h	/^    unsigned short dataLen;     \/\/数据长度(去头的长度)$/;"	m	struct:_s_udp_header
debugLevel	core/msgq.h	/^  Int debugLevel;$/;"	m	struct:ConfigureUIA
dec	KVideo/audio/codec_engine.h	/^	dec_info* dec;$/;"	m	struct:channelinfo
dec_info	KVideo/audio/SpeexCod.h	/^struct dec_info$/;"	s
decode	KVideo/audio/codec_engine.cpp	/^int codec_engine::decode(char* path, unsigned char* buf, int length, bool again)$/;"	f	class:codec_engine
decodeDouble	monitor/json_reader.cpp	/^Reader::decodeDouble( Token &token )$/;"	f	class:Json::Reader
decodeNumber	monitor/json_reader.cpp	/^Reader::decodeNumber( Token &token )$/;"	f	class:Json::Reader
decodeString	monitor/json_reader.cpp	/^Reader::decodeString( Token &token )$/;"	f	class:Json::Reader
decodeString	monitor/json_reader.cpp	/^Reader::decodeString( Token &token, std::string &decoded )$/;"	f	class:Json::Reader
decodeUnicodeCodePoint	monitor/json_reader.cpp	/^Reader::decodeUnicodeCodePoint( Token &token, $/;"	f	class:Json::Reader
decodeUnicodeEscapeSequence	monitor/json_reader.cpp	/^Reader::decodeUnicodeEscapeSequence( Token &token, $/;"	f	class:Json::Reader
deinit	KVideo/audio/audio_capture.cpp	/^int audio_capture::deinit()$/;"	f	class:audio_capture
deinit	KVideo/audio/audio_playback.cpp	/^int audio_playback::deinit()$/;"	f	class:audio_playback
deinit	KVideo/audio/codec_engine.cpp	/^int codec_engine::deinit()$/;"	f	class:codec_engine
delListener	Command/udp.cpp	/^bool Udp::delListener(IUdpListener *listener) {$/;"	f	class:Udp
delListener	log.cpp	/^bool Log::delListener(ILogListener *listener) {$/;"	f	class:Log
deleteItem	web/recordList.cpp	/^bool RecordList::deleteItem(const char* pFileName) {$/;"	f	class:RecordList
deleteItemsBeforeTime	web/recordList.cpp	/^bool RecordList::deleteItemsBeforeTime(time_t time) {$/;"	f	class:RecordList
delete_dir	utils/commonUtils.cpp	/^int CommonUtils::delete_dir(const char* path, time_t time)$/;"	f	class:CommonUtils
desbidx	core/edma.h	/^	int desbidx;$/;"	m	struct:edma_arg
descidx	core/edma.h	/^	int descidx;$/;"	m	struct:edma_arg
destory	core/mtgClient.cpp	/^bool MtgClient::destory(const char* pPath, int type) {$/;"	f	class:MtgClient
destroy	KVideo/audio/audio_mixer.cpp	/^void audio_mixer::destroy(void* handle)$/;"	f	class:audio_mixer
destroyComponents	KVideo/vgaProviderSystem.cpp	/^bool VGAProviderSystem::destroyComponents() {$/;"	f	class:VGAProviderSystem
destroyComponents	core/Mp4Player.cpp	/^void Mp4FilePlayer::destroyComponents() {$/;"	f	class:Mp4FilePlayer
destroyComponents	core/audioEncode.cpp	/^void AudioEncode::destroyComponents() {$/;"	f	class:AudioEncode
destroyComponents	core/audioEncodeOMX.cpp	/^void AudioEncodeOMX::destroyComponents() {$/;"	f	class:AudioEncodeOMX
destroyComponents	core/mixtureMode_IPC.cpp	/^bool MixtureMode_IPC::destroyComponents() {$/;"	f	class:MixtureMode_IPC
destroyComponents	core/mixtureMode_SDI.cpp	/^bool MixtureMode_SDI::destroyComponents() {$/;"	f	class:MixtureMode_SDI
destroyComponents	core/movieHeaderTail.cpp	/^void MovieHeaderTail::destroyComponents() {$/;"	f	class:MovieHeaderTail
destroyComponents	core/resourceMode_SDI.cpp	/^bool ResourceModeHandle_SDI::destroyComponents() {$/;"	f	class:ResourceModeHandle_SDI
destroyInstance	KVideo/VideoFactory.cpp	/^void KVideoCreatorFactory::destroyInstance(KVideoInterface*& pVideo) {$/;"	f	class:KVideoCreatorFactory
destroyPaths	liveCourse/classWxManager.cpp	/^bool ClassWxManager::destroyPaths() {$/;"	f	class:ClassWxManager
destroyPaths	liveCourse/courseWxManager.cpp	/^bool CourseWxManager::destroyPaths() {$/;"	f	class:CourseWxManager
detectAudioStream	core/mtgClient.cpp	/^void MtgClient::detectAudioStream() {$/;"	f	class:MtgClient
devStat	netprotocal/ICIIUnitCellDef.h	/^	UnitDevStat devStat[15];$/;"	m	struct:tagDevStatTable
deviceID	kerneldef.h	/^    unsigned char deviceID;     \/\/设备码$/;"	m	struct:_s_udp_ad
difference_type	monitor/value.h	/^      typedef int difference_type;$/;"	t	class:Json::ValueConstIterator
difference_type	monitor/value.h	/^      typedef int difference_type;$/;"	t	class:Json::ValueIterator
difference_type	monitor/value.h	/^      typedef int difference_type;$/;"	t	class:Json::ValueIteratorBase
disablepacket	KVideo/audio/fifo.cpp	/^void fifo::disablepacket(int packet)$/;"	f	class:fifo
disp	core/v4lDisplay.h	/^	app_obj disp;$/;"	m	class:DisplayHandle
dmaphysdest1	core/edma.h	/^	void * dmaphysdest1 ; \/\/目的地址$/;"	m	struct:edma_arg
dmaphyssrc1	core/edma.h	/^	void * dmaphyssrc1 ; \/\/源地址,注意是物理地址,比如0x89500000$/;"	m	struct:edma_arg
doAction	Command/AssistCommandHandle.cpp	/^bool AssistCommandHandle::doAction(PPTRecordAction eAction) {$/;"	f	class:AssistCommandHandle
doDisplay	core/HDMIDisplayManager.cpp	/^bool HDMIDisplayManager::doDisplay(EDisplayContext context, const unsigned char* pBuffer) {$/;"	f	class:HDMIDisplayManager
doFreezeVGA	KVideo/vgaProviderSystem.cpp	/^bool VGAProviderSystem::doFreezeVGA(bool bFreezeVGA) {$/;"	f	class:VGAProviderSystem
doFreezeVGA	core/baseMode.cpp	/^bool BaseMode::doFreezeVGA(bool bFreeze) {$/;"	f	class:BaseMode
doFreezeVGA	core/mixtureMode_IPC.cpp	/^bool MixtureMode_IPC::doFreezeVGA(bool bFreeze) {$/;"	f	class:MixtureMode_IPC
doFreezeVGA	core/mixtureMode_SDI.cpp	/^bool MixtureMode_SDI::doFreezeVGA(bool bFreeze) {$/;"	f	class:MixtureMode_SDI
doMovieHead	core/baseMode.cpp	/^BOOL BaseMode::doMovieHead() {$/;"	f	class:BaseMode
doMovieHead	core/mixtureMode_IPC.cpp	/^BOOL MixtureMode_IPC::doMovieHead() {$/;"	f	class:MixtureMode_IPC
doMovieHead	core/mixtureMode_SDI.cpp	/^BOOL MixtureMode_SDI::doMovieHead() {$/;"	f	class:MixtureMode_SDI
doMovieHead	core/resourceMode_IPC.cpp	/^BOOL ResourceModeHandle_IPC::doMovieHead() {$/;"	f	class:ResourceModeHandle_IPC
doMovieHead	core/resourceMode_SDI.cpp	/^BOOL ResourceModeHandle_SDI::doMovieHead() {$/;"	f	class:ResourceModeHandle_SDI
doMovieTail	core/baseMode.cpp	/^BOOL BaseMode::doMovieTail() {$/;"	f	class:BaseMode
doMovieTail	core/mixtureMode_IPC.cpp	/^BOOL MixtureMode_IPC::doMovieTail() {$/;"	f	class:MixtureMode_IPC
doMovieTail	core/mixtureMode_SDI.cpp	/^BOOL MixtureMode_SDI::doMovieTail() {$/;"	f	class:MixtureMode_SDI
doMovieTail	core/resourceMode_IPC.cpp	/^BOOL ResourceModeHandle_IPC::doMovieTail() {$/;"	f	class:ResourceModeHandle_IPC
doMovieTail	core/resourceMode_SDI.cpp	/^BOOL ResourceModeHandle_SDI::doMovieTail() {$/;"	f	class:ResourceModeHandle_SDI
doStartLC	kernel.cpp	/^bool Kernel::doStartLC(ELiveCourseRole role) {$/;"	f	class:Kernel
doV4LDisplay	core/v4lDisplay.cpp	/^bool DisplayHandle::doV4LDisplay(const char* pBuffer) {$/;"	f	class:DisplayHandle
document_	monitor/reader.h	/^      std::string document_;$/;"	m	class:Json::Reader
document_	monitor/writer.h	/^      std::ostream* document_;$/;"	m	class:Json::StyledStreamWriter
document_	monitor/writer.h	/^      std::string document_;$/;"	m	class:Json::FastWriter
document_	monitor/writer.h	/^      std::string document_;$/;"	m	class:Json::StyledWriter
downNetWork	liveCourse/livemtgConstDefine.h	/^	int downNetWork;$/;"	m	struct:tagLiveMtgWebMessage
downPacketLost	liveCourse/livemtgConstDefine.h	/^	int downPacketLost;$/;"	m	struct:tagLiveMtgWebMessage
dummyValueAllocatorInitializer	monitor/json_value.cpp	/^} dummyValueAllocatorInitializer;$/;"	m	namespace:Json	typeref:struct:Json::DummyValueAllocatorInitializer	file:
duplicate	monitor/value.h	/^            duplicate,$/;"	e	enum:Json::Value::CZString::DuplicationPolicy
duplicateOnCopy	monitor/value.h	/^            duplicateOnCopy$/;"	e	enum:Json::Value::CZString::DuplicationPolicy
duplicateStringValue	monitor/json_value.cpp	/^   virtual char *duplicateStringValue( const char *value, $/;"	f	class:Json::DefaultValueAllocator
dv_preset	KVideo/captureVideoDefines.h	/^	struct v4l2_dv_preset dv_preset;$/;"	m	struct:capt_obj	typeref:struct:capt_obj::v4l2_dv_preset
dv_preset	core/v4lDisplay.h	/^	struct v4l2_dv_preset dv_preset;$/;"	m	struct:app_obj	typeref:struct:app_obj::v4l2_dv_preset
dwAVIP	netprotocal/TPCCommandStruct.h	/^	DWORD dwAVIP;$/;"	m	struct:tagAVInfo
dwAssisCount	netprotocal/ICIICommandStruct.h	/^	DWORD				dwAssisCount;$/;"	m	struct:tagDogInfo
dwBottom	netprotocal/SCSMCommandStruct.h	/^	DWORD dwBottom;$/;"	m	struct:tagSceneVideoInfo
dwCenterIP	netprotocal/SCSMCommandStruct.h	/^	DWORD dwCenterIP; \/\/ 编辑卡IP$/;"	m	struct:tagBPIPINFO
dwChannel	netprotocal/ICIICommandStruct.h	/^	DWORD		dwChannel;$/;"	m	struct:tagRECCtrl
dwChannelNo	netprotocal/SCSMCommandStruct.h	/^	DWORD		dwChannelNo;$/;"	m	struct:tagPRChannelNo
dwClassCount	netprotocal/ICIICommandStruct.h	/^	DWORD				dwClassCount;$/;"	m	struct:tagDogInfo
dwColor	netprotocal/SCSMCommandStruct.h	/^	DWORD dwColor;$/;"	m	struct:tagSceneStringInfo
dwCommand	Command/AssistCommandDefines.h	/^	DWORD	dwCommand;			\/\/\/ 命令字$/;"	m	struct:tagPR2COM_ID
dwCommand	netprotocal/ICIICommandDef.h	/^	DWORD dwCommand;$/;"	m	struct:tagIC2CMD_CmdID
dwDeviceChannel	netprotocal/SCSMCommandStruct.h	/^	DWORD		dwDeviceChannel;$/;"	m	struct:tagPRChannel
dwDiskSpace	netprotocal/SCSMCommandStruct.h	/^	DWORD dwDiskSpace;$/;"	m	struct:tagStreamMediaState
dwEncodeType	netprotocal/SCSMCommandStruct.h	/^	DWORD dwEncodeType;$/;"	m	struct:tagPRParam
dwFlag	netprotocal/ICIICommandDef.h	/^	DWORD dwFlag;$/;"	m	struct:tagIC2CMD_CmdID
dwFont	netprotocal/SCSMCommandStruct.h	/^	DWORD dwFont;$/;"	m	struct:tagSceneStringInfo
dwFromIP	netprotocal/ICIICommandDef.h	/^	DWORD dwFromIP;$/;"	m	struct:tagIC2CMD_Header
dwGatewayIP	netprotocal/SCSMCommandStruct.h	/^	DWORD dwGatewayIP; \/\/ 网关 IP$/;"	m	struct:tagBPIPINFO
dwHeight	netprotocal/SCSMCommandStruct.h	/^	DWORD dwHeight;$/;"	m	struct:tagPRParam
dwIP	netprotocal/SCSMCommandStruct.h	/^	DWORD		dwIP;$/;"	m	struct:tagSMCommonInfo
dwIP	netprotocal/TPCCommandStruct.h	/^	DWORD dwIP;$/;"	m	struct:tagASCommonInfo
dwIPCChannel	netprotocal/SCSMCommandStruct.h	/^	DWORD dwIPCChannel;$/;"	m	struct:tagIPCInfo
dwIPCHeight	netprotocal/SCSMCommandStruct.h	/^	DWORD dwIPCHeight;$/;"	m	struct:tagIPCInfo
dwIPCIP	netprotocal/SCSMCommandStruct.h	/^	DWORD dwIPCIP;$/;"	m	struct:tagIPCInfo
dwIPCWidth	netprotocal/SCSMCommandStruct.h	/^	DWORD dwIPCWidth;$/;"	m	struct:tagIPCInfo
dwLeft	netprotocal/SCSMCommandStruct.h	/^	DWORD dwLeft;$/;"	m	struct:tagSceneVideoInfo
dwLiveHeight	netprotocal/SCSMCommandStruct.h	/^	DWORD dwLiveHeight;$/;"	m	struct:tagPRParam
dwLiveKBitrate	netprotocal/SCSMCommandStruct.h	/^	DWORD dwLiveKBitrate;$/;"	m	struct:tagPRParam
dwLiveWidth	netprotocal/SCSMCommandStruct.h	/^	DWORD dwLiveWidth;$/;"	m	struct:tagPRParam
dwMaskIP	netprotocal/SCSMCommandStruct.h	/^	DWORD dwMaskIP;\/\/ 子网掩码 IP$/;"	m	struct:tagBPIPINFO
dwNoteBookIP	netprotocal/SCSMCommandStruct.h	/^	DWORD dwNoteBookIP; \/\/ 笔记本 IP$/;"	m	struct:tagBPIPINFO
dwPosX	netprotocal/SCSMCommandStruct.h	/^	DWORD dwPosX;$/;"	m	struct:tagSceneMixPicInfo
dwPosX	netprotocal/SCSMCommandStruct.h	/^	DWORD dwPosX;$/;"	m	struct:tagSceneStringInfo
dwPosY	netprotocal/SCSMCommandStruct.h	/^	DWORD dwPosY;$/;"	m	struct:tagSceneMixPicInfo
dwPosY	netprotocal/SCSMCommandStruct.h	/^	DWORD dwPosY;$/;"	m	struct:tagSceneStringInfo
dwRECVolFactor	netprotocal/ICIICommandStruct.h	/^	DWORD	dwRECVolFactor;$/;"	m	struct:tagPR2COM_HeartState
dwRecLen	netprotocal/ICIICommandStruct.h	/^	DWORD		dwRecLen;$/;"	m	struct:tagRECCtrl
dwRecordKBitrate	netprotocal/SCSMCommandStruct.h	/^	DWORD dwRecordKBitrate;$/;"	m	struct:tagPRParam
dwRight	netprotocal/SCSMCommandStruct.h	/^	DWORD dwRight;$/;"	m	struct:tagSceneVideoInfo
dwSMSpace	netprotocal/ICIICommandStruct.h	/^	DWORD			dwSMSpace;$/;"	m	struct:tagPR2COM_UnitState
dwSVWCount	netprotocal/ICIICommandStruct.h	/^	DWORD				dwSVWCount;$/;"	m	struct:tagDogInfo
dwSize	netprotocal/SCSMCommandStruct.h	/^	DWORD dwSize;$/;"	m	struct:tagSceneStringInfo
dwStreamIP	netprotocal/SCSMCommandStruct.h	/^	DWORD dwStreamIP; \/\/ 流媒体IP$/;"	m	struct:tagBPIPINFO
dwStudentChannel	netprotocal/SCSMCommandStruct.h	/^	DWORD		dwStudentChannel;$/;"	m	struct:tagPRChannel
dwSubCode	netprotocal/SCSMCommandStruct.h	/^	DWORD dwSubCode;$/;"	m	struct:tagIPCInfo
dwSyncHead	netprotocal/ICIICommandDef.h	/^	DWORD dwSyncHead;$/;"	m	struct:tagIC2CMD_Header
dwTeacherChannel	netprotocal/SCSMCommandStruct.h	/^	DWORD		dwTeacherChannel;$/;"	m	struct:tagPRChannel
dwTeacherPCIP	netprotocal/SCSMCommandStruct.h	/^	DWORD dwTeacherPCIP; \/\/ 教师PC IP$/;"	m	struct:tagBPIPINFO
dwToIP	netprotocal/ICIICommandDef.h	/^	DWORD dwToIP;$/;"	m	struct:tagIC2CMD_Header
dwTop	netprotocal/SCSMCommandStruct.h	/^	DWORD dwTop;$/;"	m	struct:tagSceneVideoInfo
dwTopVS1IP	netprotocal/SCSMCommandStruct.h	/^	DWORD dwTopVS1IP; \/\/ 编码卡1 IP$/;"	m	struct:tagBPIPINFO
dwTopVS2IP	netprotocal/SCSMCommandStruct.h	/^	DWORD dwTopVS2IP; \/\/ 编码卡2 IP$/;"	m	struct:tagBPIPINFO
dwUnitIP	netprotocal/SCSMCommandStruct.h	/^	DWORD dwUnitIP;  \/\/ 一体机底板IP$/;"	m	struct:tagBPIPINFO
dwUseCount	netprotocal/ICIIUnitCellDef.h	/^	DWORD	dwUseCount;$/;"	m	struct:tagUnitDevStat
dwUseMinute	netprotocal/ICIIUnitCellDef.h	/^	DWORD	dwUseMinute;$/;"	m	struct:tagUnitDevStat
dwValue	Command/AssistCommandDefines.h	/^	DWORD	dwValue;								\/\/\/ 数字型值$/;"	m	struct:tagPR2COM_Data1
dwValue	netprotocal/ICIICommandDef.h	/^	DWORD dwValue;$/;"	m	struct:tagIC2CMD_Data1
dwVersion	netprotocal/SCSMCommandStruct.h	/^	DWORD		dwVersion;$/;"	m	struct:tagSMCommonInfo
dwVersion	netprotocal/TPCCommandStruct.h	/^	DWORD dwVersion;$/;"	m	struct:tagASCommonInfo
dwVersionNum	netprotocal/ICIIUnitCellDef.h	/^	DWORD				dwVersionNum;$/;"	m	struct:tagUnitBaseInfo
dwVideoSource	netprotocal/SCSMCommandStruct.h	/^	DWORD dwVideoSource;$/;"	m	struct:tagSceneVideoInfo
dwVolume	netprotocal/ICIICommandStruct.h	/^	DWORD		dwVolume;$/;"	m	struct:tagPR2COM_RECState
dwWidth	netprotocal/SCSMCommandStruct.h	/^	DWORD dwWidth;$/;"	m	struct:tagPRParam
dynamicConfigScaleComponent	core/mixtureMode_IPC.cpp	/^bool MixtureMode_IPC::dynamicConfigScaleComponent() {$/;"	f	class:MixtureMode_IPC
dynamicConfigScaleComponent	core/mixtureMode_SDI.cpp	/^bool MixtureMode_SDI::dynamicConfigScaleComponent() {$/;"	f	class:MixtureMode_SDI
dynamicConfigVGAScaleComponent	core/mixtureMode_IPC.cpp	/^bool MixtureMode_IPC::dynamicConfigVGAScaleComponent() {$/;"	f	class:MixtureMode_IPC
dynamicConfigVGAScaleComponent	core/mixtureMode_SDI.cpp	/^bool MixtureMode_SDI::dynamicConfigVGAScaleComponent() {$/;"	f	class:MixtureMode_SDI
dynamicSwitchScene	core/mixtureMode_IPC.cpp	/^void MixtureMode_IPC::dynamicSwitchScene() {$/;"	f	class:MixtureMode_IPC
dynamicSwitchScene	core/mixtureMode_SDI.cpp	/^void MixtureMode_SDI::dynamicSwitchScene() {$/;"	f	class:MixtureMode_SDI
e1024_768	setting.h	/^	e1024_768,$/;"	e	enum:ERecordResolution
e1280_1024	setting.h	/^	e1280_1024$/;"	e	enum:ERecordResolution
e1280_720	setting.h	/^	e1280_720,$/;"	e	enum:ERecordResolution
e1536_768	setting.h	/^	e1536_768,$/;"	e	enum:ERecordResolution
e1920_1080	setting.h	/^	e1920_1080 = 0,$/;"	e	enum:ERecordResolution
eChannelDevice	setting.h	/^	eChannelDevice,$/;"	e	enum:EDeviceChannel
eChannelStudent1	setting.h	/^	eChannelStudent1,$/;"	e	enum:EDeviceChannel
eChannelStudent2	setting.h	/^	eChannelStudent2,$/;"	e	enum:EDeviceChannel
eChannelStudent3	setting.h	/^	eChannelStudent3,$/;"	e	enum:EDeviceChannel
eChannelStudent4	setting.h	/^	eChannelStudent4$/;"	e	enum:EDeviceChannel
eChannelTeacher1	setting.h	/^	eChannelTeacher1,$/;"	e	enum:EDeviceChannel
eChannelTeacher2	setting.h	/^	eChannelTeacher2,$/;"	e	enum:EDeviceChannel
eChannelTeacher3	setting.h	/^	eChannelTeacher3,$/;"	e	enum:EDeviceChannel
eChannelTeacher4	setting.h	/^	eChannelTeacher4,$/;"	e	enum:EDeviceChannel
eCommandNone	kernel.h	/^	eCommandNone,$/;"	e	enum:eCommandOrder
eCommandOrder	kernel.h	/^enum eCommandOrder {$/;"	g
eCommandStart	kernel.h	/^	eCommandStart,$/;"	e	enum:eCommandOrder
eCommandStop	kernel.h	/^	eCommandStop$/;"	e	enum:eCommandOrder
eCommandTail	kernel.h	/^	eCommandTail,$/;"	e	enum:eCommandOrder
eCommonState	netprotocal/ICIICommandStruct.h	/^}eCommonState;$/;"	t	typeref:enum:tagCommonState
eDisplayNone	core/HDMIDisplayManager.h	/^		eDisplayNone,$/;"	e	enum:HDMIDisplayManager::EDisplayContext
eDisplayRecord	core/HDMIDisplayManager.h	/^		eDisplayRecord$/;"	e	enum:HDMIDisplayManager::EDisplayContext
eDisplayVGA	core/HDMIDisplayManager.h	/^		eDisplayVGA,$/;"	e	enum:HDMIDisplayManager::EDisplayContext
eDualScreenMode	setting.h	/^	eDualScreenMode \/**< 双画面*\/$/;"	e	enum:ERecordMode
eEncodeType	netprotocal/ICIICommandStruct.h	/^}eEncodeType;$/;"	t	typeref:enum:tagEncodeType
eInputPort	core/constDefines.h	/^	eInputPort,$/;"	e	enum:EPortType
eInterMode	setting.h	/^	eInterMode, 	\/**< 互动	*\/$/;"	e	enum:ERecordMode
eLCAACAudio	liveCourse/livemtgConstDefine.h	/^	eLCAACAudio,$/;"	e	enum:ELiveCourseMediaType
eLCAssistJoinGroup	liveCourse/livemtgConstDefine.h	/^	eLCAssistJoinGroup, \/\/互动教室加入直播组$/;"	e	enum:EWebEventType
eLCAssistLeftGroup	liveCourse/livemtgConstDefine.h	/^	eLCAssistLeftGroup, \/\/互动教室退出直播组$/;"	e	enum:EWebEventType
eLCAssistServerInValid	liveCourse/livemtgConstDefine.h	/^	eLCAssistServerInValid, \/\/互动服务器不可用$/;"	e	enum:EWebEventType
eLCCancelLCGroup	liveCourse/livemtgConstDefine.h	/^	eLCCancelLCGroup, \/\/互动服务撤销直播组$/;"	e	enum:EWebEventType
eLCCanelLiveSource	liveCourse/livemtgConstDefine.h	/^	eLCCanelLiveSource, \/\/直播服务撤销直播源$/;"	e	enum:EWebEventType
eLCClassDeviceError	liveCourse/livemtgConstDefine.h	/^	eLCClassDeviceError \/\/教室设备自检错误$/;"	e	enum:EWebEventType
eLCClassPowerOff	liveCourse/livemtgConstDefine.h	/^	eLCClassPowerOff, \/\/教室关机$/;"	e	enum:EWebEventType
eLCClassPowerOn	liveCourse/livemtgConstDefine.h	/^	eLCClassPowerOn, \/\/教室开机$/;"	e	enum:EWebEventType
eLCClassReboot	liveCourse/livemtgConstDefine.h	/^	eLCClassReboot, \/\/教室重启$/;"	e	enum:EWebEventType
eLCCreateLCGroup	liveCourse/livemtgConstDefine.h	/^	eLCCreateLCGroup = 0x1, \/\/互动服务建立直播组$/;"	e	enum:EWebEventType
eLCCreateLiveSource	liveCourse/livemtgConstDefine.h	/^	eLCCreateLiveSource, \/\/直播服务建立直播源$/;"	e	enum:EWebEventType
eLCLiveServerInValid	liveCourse/livemtgConstDefine.h	/^	eLCLiveServerInValid, \/\/直播服务器不可用$/;"	e	enum:EWebEventType
eLCMainJoinGroup	liveCourse/livemtgConstDefine.h	/^	eLCMainJoinGroup, \/\/主讲教室加入直播组$/;"	e	enum:EWebEventType
eLCMainLeftGroup	liveCourse/livemtgConstDefine.h	/^	eLCMainLeftGroup, \/\/主讲教室退出直播组$/;"	e	enum:EWebEventType
eLCMediaTypeCount	liveCourse/livemtgConstDefine.h	/^	eLCMediaTypeCount$/;"	e	enum:ELiveCourseMediaType
eLCRecordVideo	liveCourse/livemtgConstDefine.h	/^	eLCRecordVideo = 0,$/;"	e	enum:ELiveCourseMediaType
eLCRoleAssistAudence	liveCourse/livemtgConstDefine.h	/^	eLCRoleAssistAudence,$/;"	e	enum:ELiveCourseRole
eLCRoleAssistLive	liveCourse/livemtgConstDefine.h	/^	eLCRoleAssistLive,$/;"	e	enum:ELiveCourseRole
eLCRoleAudence	liveCourse/livemtgConstDefine.h	/^	eLCRoleAudence,$/;"	e	enum:ELiveCourseRole
eLCRoleControl	liveCourse/livemtgConstDefine.h	/^	eLCRoleControl,$/;"	e	enum:ELiveCourseRole
eLCRoleLive	liveCourse/livemtgConstDefine.h	/^	eLCRoleLive,$/;"	e	enum:ELiveCourseRole
eLCRoleNone	liveCourse/livemtgConstDefine.h	/^	eLCRoleNone = 0,$/;"	e	enum:ELiveCourseRole
eLCRoleStreamMedia	liveCourse/livemtgConstDefine.h	/^	eLCRoleStreamMedia,$/;"	e	enum:ELiveCourseRole
eLCRoleVideoServer	liveCourse/livemtgConstDefine.h	/^	eLCRoleVideoServer$/;"	e	enum:ELiveCourseRole
eLCRoleWebProxy	liveCourse/livemtgConstDefine.h	/^	eLCRoleWebProxy,$/;"	e	enum:ELiveCourseRole
eLCServerPowerOff	liveCourse/livemtgConstDefine.h	/^	eLCServerPowerOff, \/\/服务器关机$/;"	e	enum:EWebEventType
eLCServerPowerOn	liveCourse/livemtgConstDefine.h	/^	eLCServerPowerOn, \/\/服务器开机$/;"	e	enum:EWebEventType
eLCServerReboot	liveCourse/livemtgConstDefine.h	/^	eLCServerReboot, \/\/服务器重启$/;"	e	enum:EWebEventType
eLCSpeexAudio	liveCourse/livemtgConstDefine.h	/^	eLCSpeexAudio,$/;"	e	enum:ELiveCourseMediaType
eLCStartRecord	liveCourse/livemtgConstDefine.h	/^	eLCStartRecord, \/\/录制开始$/;"	e	enum:EWebEventType
eLCStopRecord	liveCourse/livemtgConstDefine.h	/^	eLCStopRecord,  \/\/录制结束$/;"	e	enum:EWebEventType
eLCStudentVideo	liveCourse/livemtgConstDefine.h	/^	eLCStudentVideo,$/;"	e	enum:ELiveCourseMediaType
eLCTeacherVideo	liveCourse/livemtgConstDefine.h	/^	eLCTeacherVideo,$/;"	e	enum:ELiveCourseMediaType
eLCVGAVideo	liveCourse/livemtgConstDefine.h	/^	eLCVGAVideo,$/;"	e	enum:ELiveCourseMediaType
eLiveCourseCmdClassStatus	liveCourse/livemtgConstDefine.h	/^	eLiveCourseCmdClassStatus,$/;"	e	enum:ELiveCourseCmd
eLiveCourseCmdCourseStatus	liveCourse/livemtgConstDefine.h	/^	eLiveCourseCmdCourseStatus,$/;"	e	enum:ELiveCourseCmd
eLiveCourseCmdEnter	liveCourse/livemtgConstDefine.h	/^	eLiveCourseCmdEnter,$/;"	e	enum:ELiveCourseCmd
eLiveCourseCmdInteractiveList	liveCourse/livemtgConstDefine.h	/^	eLiveCourseCmdInteractiveList,$/;"	e	enum:ELiveCourseCmd
eLiveCourseCmdLeave	liveCourse/livemtgConstDefine.h	/^	eLiveCourseCmdLeave,$/;"	e	enum:ELiveCourseCmd
eLiveCourseCmdMonitorList	liveCourse/livemtgConstDefine.h	/^	eLiveCourseCmdMonitorList,$/;"	e	enum:ELiveCourseCmd
eLiveCourseCmdNULL	liveCourse/livemtgConstDefine.h	/^	eLiveCourseCmdNULL = 0,$/;"	e	enum:ELiveCourseCmd
eLiveCourseCmdRecordModeList	liveCourse/livemtgConstDefine.h	/^	eLiveCourseCmdRecordModeList,$/;"	e	enum:ELiveCourseCmd
eLiveCourseCmdSubscribeList	liveCourse/livemtgConstDefine.h	/^	eLiveCourseCmdSubscribeList$/;"	e	enum:ELiveCourseCmd
eLiveCourseCmdVGAList	liveCourse/livemtgConstDefine.h	/^	eLiveCourseCmdVGAList,$/;"	e	enum:ELiveCourseCmd
eLiveCourseCmdVideoList	liveCourse/livemtgConstDefine.h	/^	eLiveCourseCmdVideoList,$/;"	e	enum:ELiveCourseCmd
eMicroMode	setting.h	/^	eMicroMode,		\/**< 微格  	*\/$/;"	e	enum:ERecordMode
eMovieMode	setting.h	/^	eMovieMode = 0, \/**< 电影	*\/$/;"	e	enum:ERecordMode
eOutputPort	core/constDefines.h	/^	eOutputPort,$/;"	e	enum:EPortType
ePRMode	netprotocal/ICIICommandStruct.h	/^}ePRMode;$/;"	t	typeref:enum:tagPRMode
ePipeCmdEmptyBufferDone	core/constDefines.h	/^	ePipeCmdEmptyBufferDone,$/;"	e	enum:EPipeCmdType
ePipeCmdEmptyThisBuffer	core/constDefines.h	/^	ePipeCmdEmptyThisBuffer,$/;"	e	enum:EPipeCmdType
ePipeCmdExit	core/constDefines.h	/^	ePipeCmdExit,$/;"	e	enum:EPipeCmdType
ePipeCmdFillBufferDone	core/constDefines.h	/^	ePipeCmdFillBufferDone,$/;"	e	enum:EPipeCmdType
ePipeCmdFillThisBuffer	core/constDefines.h	/^	ePipeCmdFillThisBuffer,$/;"	e	enum:EPipeCmdType
ePipeCmdMax	core/constDefines.h	/^	ePipeCmdMax = 0x7FFFFFFF$/;"	e	enum:EPipeCmdType
ePortMax	core/constDefines.h	/^	ePortMax = 0x7FFFFFFF$/;"	e	enum:EPortType
eRecordMode	netprotocal/ICIICommandStruct.h	/^}eRecordMode;$/;"	t	typeref:enum:tagRecordMode
eRecordPos	netprotocal/ICIICommandStruct.h	/^}eRecordPos;$/;"	t	typeref:enum:tagRecordPos
eRecordRate	netprotocal/ICIICommandStruct.h	/^}eRecordRate;$/;"	t	typeref:enum:tagRecordRate
eRecordSize	netprotocal/ICIICommandStruct.h	/^}eRecordSize;$/;"	t	typeref:enum:tagRecordSize
eRecordState	netprotocal/ICIICommandStruct.h	/^}eRecordState;$/;"	t	typeref:enum:tagRecordState
eResourceMode	setting.h	/^	eResourceMode,$/;"	e	enum:ERecordMode
eSMState	netprotocal/SCSMCommandStruct.h	/^}eSMState;$/;"	t	typeref:enum:tageSMState
eSceneElementType	netprotocal/SCSMCommandStruct.h	/^}eSceneElementType;$/;"	t	typeref:enum:tageSceneElementType
eStudScene	core/constDefines.h	/^	eStudScene,			\/**< 学生场景		*\/$/;"	e	enum:EPrimeScene
eTeacherScene	core/constDefines.h	/^	eTeacherScene,		\/**< 教师场景 	*\/$/;"	e	enum:EPrimeScene
eTeacherStudScene	core/constDefines.h	/^	eTeacherStudScene	\/**< 教师学生双画面*\/$/;"	e	enum:EPrimeScene
eThirdScreenMode	setting.h	/^	eThirdScreenMode,	\/**< *\/$/;"	e	enum:ERecordMode
eUnitCtrl	netprotocal/ICIICommandStruct.h	/^}eUnitCtrl;$/;"	t	typeref:enum:tagUnitCtrl
eUnitState	netprotocal/ICIICommandStruct.h	/^}eUnitState;$/;"	t	typeref:enum:tagUnitState
eVGAScene	core/constDefines.h	/^	eVGAScene,			\/**< VGA场景		*\/$/;"	e	enum:EPrimeScene
eVGAStatusChange	KVideo/vgaProviderSystem.h	/^	eVGAStatusChange  \/**< resolution change or vga change *\/$/;"	e	enum:EVGAStatus
eVGAStatusClosed	KVideo/vgaProviderSystem.h	/^	eVGAStatusClosed,$/;"	e	enum:EVGAStatus
eVGAStatusNULL	KVideo/vgaProviderSystem.h	/^	eVGAStatusNULL = 0,$/;"	e	enum:EVGAStatus
eVGAStatusOpenFailed	KVideo/vgaProviderSystem.h	/^	eVGAStatusOpenFailed,$/;"	e	enum:EVGAStatus
eVGAStatusOpenOK	KVideo/vgaProviderSystem.h	/^	eVGAStatusOpenOK,$/;"	e	enum:EVGAStatus
eVideoDisplayDevice	KVideo/audio/macrodef.h	/^enum eVideoDisplayDevice {$/;"	g
eVideoSource	KVideo/audio/macrodef.h	/^enum eVideoSource {$/;"	g
eWebK8	liveCourse/livemtgConstDefine.h	/^	eWebK8 = 1,$/;"	e	enum:EWebMessageType
eWebL5000	liveCourse/livemtgConstDefine.h	/^	eWebL5000,$/;"	e	enum:EWebMessageType
eWebPlatServer	liveCourse/livemtgConstDefine.h	/^	eWebPlatServer,$/;"	e	enum:EWebMessageType
eWebPlayerControl	liveCourse/livemtgConstDefine.h	/^	eWebPlayerControl$/;"	e	enum:EWebMessageType
edma_arg	core/edma.h	/^struct edma_arg{$/;"	s
empty	monitor/json_value.cpp	/^Value::empty() const$/;"	f	class:Json::Value
enableAnalysisEvents	core/msgq.h	/^  Int enableAnalysisEvents;$/;"	m	struct:ConfigureUIA
enableStatusLogger	core/msgq.h	/^  Int enableStatusLogger;$/;"	m	struct:ConfigureUIA
enableYAMLCompatibility	monitor/json_writer.cpp	/^FastWriter::enableYAMLCompatibility()$/;"	f	class:Json::FastWriter
enablesize	KVideo/audio/fifo.cpp	/^void fifo::enablesize(int size)$/;"	f	class:fifo
enc_info	KVideo/audio/SpeexCod.h	/^struct enc_info$/;"	s
encode	KVideo/audio/codec_engine.cpp	/^int codec_engine::encode(char* buf, int length, char* outspeex, int *outlen)$/;"	f	class:codec_engine
encoderName	core/audioEncodeFAAC.h	/^const String encoderName  = "faacenc";$/;"	v
end	monitor/json_value.cpp	/^Value::end() const$/;"	f	class:Json::Value
end	monitor/json_value.cpp	/^Value::end()$/;"	f	class:Json::Value
end_	monitor/json_batchallocator.h	/^      AllocatedType *end_;$/;"	m	struct:Json::BatchAllocator::BatchInfo
end_	monitor/reader.h	/^         Location end_;$/;"	m	class:Json::Reader::Token
end_	monitor/reader.h	/^      Location end_;$/;"	m	class:Json::Reader
enterAssistContol	Command/KernelBoardCommandHandle.cpp	/^BOOL KernelBoardCommandHandle::enterAssistContol() {$/;"	f	class:KernelBoardCommandHandle
eos_sem	core/OMXCommonDef.h	/^  semp_t *eos_sem;$/;"	m	struct:tagComponentWrapper
error	log.cpp	/^void Log::error(const char *str) {$/;"	f	class:Log
errors_	monitor/reader.h	/^      Errors errors_;$/;"	m	class:Json::Reader
establishConnections	core/Mp4Player.cpp	/^BOOL Mp4FilePlayer::establishConnections() {$/;"	f	class:Mp4FilePlayer
establishConnections	core/movieHeaderTail.cpp	/^BOOL MovieHeaderTail::establishConnections() {$/;"	f	class:MovieHeaderTail
establishLowerHalfConnections	core/mixtureMode_IPC.cpp	/^bool MixtureMode_IPC::establishLowerHalfConnections() {$/;"	f	class:MixtureMode_IPC
establishLowerHalfConnections	core/mixtureMode_SDI.cpp	/^bool MixtureMode_SDI::establishLowerHalfConnections() {$/;"	f	class:MixtureMode_SDI
establistConnections	core/resourceMode_SDI.cpp	/^bool ResourceModeHandle_SDI::establistConnections() {$/;"	f	class:ResourceModeHandle_SDI
establistUpperHalfConnections	core/mixtureMode_IPC.cpp	/^bool MixtureMode_IPC::establistUpperHalfConnections() {$/;"	f	class:MixtureMode_IPC
establistUpperHalfConnections	core/mixtureMode_SDI.cpp	/^bool MixtureMode_SDI::establistUpperHalfConnections() {$/;"	f	class:MixtureMode_SDI
exec	package/ti_sdo_ce_examples_apps_armlivemedia.java	/^    public void exec( Scriptable xdcO, Session ses )$/;"	m	class:ti_sdo_ce_examples_apps_armlivemedia
execCmd	Command/Function.cpp	/^void CFunction::execCmd(const char* ip, IC2CMD_CmdID* pCmdID, unsigned char* pData, int len) {$/;"	f	class:CFunction
execCmd	Command/udpCommandListener.h	/^	virtual void execCmd(const char* ip, IC2CMD_CmdID* pCmdID, unsigned char* pData, int len){}$/;"	f	class:IUDPCommandListener
execCourseOver	kernel.cpp	/^bool Kernel::execCourseOver() {$/;"	f	class:Kernel
execCreate	kernel.cpp	/^bool Kernel::execCreate(bool bPreview) {$/;"	f	class:Kernel
execMovieHead	kernel.cpp	/^bool Kernel::execMovieHead() {$/;"	f	class:Kernel
execMovieTail	kernel.cpp	/^bool Kernel::execMovieTail() {$/;"	f	class:Kernel
execPowerOff	Command/Function.cpp	/^BOOL CFunction::execPowerOff() {$/;"	f	class:CFunction
execReplay	kernel.cpp	/^bool Kernel::execReplay(string strFileName) {$/;"	f	class:Kernel
execSceneSwitch	kernel.cpp	/^bool Kernel::execSceneSwitch() {$/;"	f	class:Kernel
expectToken	monitor/json_reader.cpp	/^Reader::expectToken( TokenType type, Token &token, const char *message )$/;"	f	class:Json::Reader
extension	KVideo/audio/rtpstruct.h	/^	uint8_t extension:1;$/;"	m	struct:RTPHeader
extid	KVideo/audio/rtpstruct.h	/^	uint16_t extid;$/;"	m	struct:RTPExtensionHeader
extra_	monitor/reader.h	/^         Location extra_;$/;"	m	class:Json::Reader::ErrorInfo
fd	KVideo/captureVideoDefines.h	/^	int fd;$/;"	m	struct:capt_obj
fd	core/v4lDisplay.h	/^	int fd;$/;"	m	struct:app_obj
features_	monitor/reader.h	/^      Features features_;$/;"	m	class:Json::Reader
fifo	KVideo/audio/fifo.cpp	/^fifo::fifo() :$/;"	f	class:fifo
fifo	KVideo/audio/fifo.h	/^class fifo {$/;"	c
fifthByte	core/DecodeUtils.h	/^  unsigned char fifthByte;$/;"	m	struct:__anon14
fileIndex	netprotocal/ICIICommandStruct.h	/^	WORD		fileIndex;	\/\/\/ 0x00$/;"	m	struct:tagUpdateUnitHead
fileType	netprotocal/ICIICommandStruct.h	/^	WORD		fileType;	$/;"	m	struct:tagUpdateUnitHead
fillData	core/Mp4Player.cpp	/^OMX_U32 Mp4FilePlayer::fillData(OMX_BUFFERHEADERTYPE *pBuf) {$/;"	f	class:Mp4FilePlayer
fillData	core/audioEncode.cpp	/^OMX_U32 AudioEncode::fillData(OMX_BUFFERHEADERTYPE * pBuf) {$/;"	f	class:AudioEncode
fillData	core/audioEncodeOMX.cpp	/^OMX_U32 AudioEncodeOMX::fillData(OMX_BUFFERHEADERTYPE * pBuf) {$/;"	f	class:AudioEncodeOMX
fillData	core/movieHeaderTail.cpp	/^OMX_U32 MovieHeaderTail::fillData(OMX_BUFFERHEADERTYPE *pBuf) {$/;"	f	class:MovieHeaderTail
fillHeadTailScaleData	core/mixtureMode_IPC.cpp	/^int MixtureMode_IPC::fillHeadTailScaleData(OMX_BUFFERHEADERTYPE* pBuf) {$/;"	f	class:MixtureMode_IPC
fillHeadTailScaleData	core/mixtureMode_SDI.cpp	/^int MixtureMode_SDI::fillHeadTailScaleData(OMX_BUFFERHEADERTYPE* pBuf) {$/;"	f	class:MixtureMode_SDI
firstParse	core/DecodeUtils.h	/^  unsigned char firstParse;$/;"	m	struct:__anon15
flag	kerneldef.h	/^    unsigned int flag;          \/\/命令标识$/;"	m	struct:_s_udp_cmd
flag	liveCourse/livemtgConstDefine.h	/^	int flag;$/;"	m	struct:tagLiveMtgCameraControl
flagAvailable	monitor/value.h	/^         flagAvailable = 0,$/;"	e	enum:Json::ValueInternalLink::InternalFlags
flagUsed	monitor/value.h	/^         flagUsed = 1$/;"	e	enum:Json::ValueInternalLink::InternalFlags
fmt	KVideo/captureVideoDefines.h	/^	struct v4l2_format fmt;$/;"	m	struct:capt_obj	typeref:struct:capt_obj::v4l2_format
fmt	core/v4lDisplay.h	/^	struct v4l2_format fmt;$/;"	m	struct:app_obj	typeref:struct:app_obj::v4l2_format
fmt_win	KVideo/captureVideoDefines.h	/^	struct v4l2_format fmt_win;$/;"	m	struct:capt_obj	typeref:struct:capt_obj::v4l2_format
fpcm	KVideo/audio/codec_engine.cpp	/^	FILE* fpcm[6] = {NULL};$/;"	m	namespace:__anon3	file:
frame	KVideo/audio/audio_mixer.h	/^	short* frame;$/;"	m	struct:__anon5
frameIndex	kerneldef.h	/^    unsigned char frameIndex;   \/\/包序号$/;"	m	struct:_s_udp_header
frameNo	core/DecodeUtils.h	/^  unsigned int frameNo;$/;"	m	struct:__anon15
frameSize	core/DecodeUtils.h	/^  unsigned int frameSize;$/;"	m	struct:__anon15
frame_count	KVideo/audio/structdef.h	/^	int   frame_count;$/;"	m	struct:stbufferflag
freeAudioEncodeBuffers	core/audioEncode.cpp	/^bool AudioEncode::freeAudioEncodeBuffers() {$/;"	f	class:AudioEncode
freeAudioEncodeBuffers	core/audioEncodeOMX.cpp	/^bool AudioEncodeOMX::freeAudioEncodeBuffers() {$/;"	f	class:AudioEncodeOMX
freeBmpData	utils/bmpfile.cpp	/^void BMPUtils::freeBmpData(U8* pdata) {$/;"	f	class:BMPUtils
freeDecBuffers	core/Mp4Player.cpp	/^bool Mp4FilePlayer::freeDecBuffers() {$/;"	f	class:Mp4FilePlayer
freeDecBuffers	core/mixtureMode_IPC.cpp	/^bool MixtureMode_IPC::freeDecBuffers(int aIndex) {$/;"	f	class:MixtureMode_IPC
freeDeiBuffers	core/mixtureMode_IPC.cpp	/^bool MixtureMode_IPC::freeDeiBuffers() {$/;"	f	class:MixtureMode_IPC
freeDeiBuffers	core/mixtureMode_SDI.cpp	/^bool MixtureMode_SDI::freeDeiBuffers() {$/;"	f	class:MixtureMode_SDI
freeDeiBuffers	core/movieHeaderTail.cpp	/^bool MovieHeaderTail::freeDeiBuffers() {$/;"	f	class:MovieHeaderTail
freeDisplayBuffers	core/Mp4Player.cpp	/^bool Mp4FilePlayer::freeDisplayBuffers() {$/;"	f	class:Mp4FilePlayer
freeDisplayBuffers	core/movieHeaderTail.cpp	/^bool MovieHeaderTail::freeDisplayBuffers() {$/;"	f	class:MovieHeaderTail
freeEncBuffers	core/mixtureMode_IPC.cpp	/^bool MixtureMode_IPC::freeEncBuffers() {$/;"	f	class:MixtureMode_IPC
freeEncBuffers	core/mixtureMode_SDI.cpp	/^bool MixtureMode_SDI::freeEncBuffers() {$/;"	f	class:MixtureMode_SDI
freeEncBuffers	core/movieHeaderTail.cpp	/^bool MovieHeaderTail::freeEncBuffers() {$/;"	f	class:MovieHeaderTail
freeEncBuffers	core/resourceMode_SDI.cpp	/^bool ResourceModeHandle_SDI::freeEncBuffers() {$/;"	f	class:ResourceModeHandle_SDI
freeEncodeBuffers	KVideo/vgaProviderSystem.cpp	/^bool VGAProviderSystem::freeEncodeBuffers() {$/;"	f	class:VGAProviderSystem
freeHeadTailScaleBuffers	core/mixtureMode_IPC.cpp	/^bool MixtureMode_IPC::freeHeadTailScaleBuffers() {$/;"	f	class:MixtureMode_IPC
freeHeadTailScaleBuffers	core/mixtureMode_SDI.cpp	/^bool MixtureMode_SDI::freeHeadTailScaleBuffers() {$/;"	f	class:MixtureMode_SDI
freeHead_	monitor/json_batchallocator.h	/^   AllocatedType *freeHead_;$/;"	m	class:Json::BatchAllocator
freeInOutLowerHalfParams	core/mixtureMode_IPC.cpp	/^bool MixtureMode_IPC::freeInOutLowerHalfParams() {$/;"	f	class:MixtureMode_IPC
freeInOutLowerHalfParams	core/mixtureMode_SDI.cpp	/^bool MixtureMode_SDI::freeInOutLowerHalfParams() {$/;"	f	class:MixtureMode_SDI
freeInOutParams	KVideo/vgaProviderSystem.cpp	/^bool VGAProviderSystem::freeInOutParams() {$/;"	f	class:VGAProviderSystem
freeInOutParams	core/Mp4Player.cpp	/^void Mp4FilePlayer::freeInOutParams() {$/;"	f	class:Mp4FilePlayer
freeInOutParams	core/OMXComponentUtils.cpp	/^void OMXComponentUtils::freeInOutParams(ComponentWrapper* &aComponent) {$/;"	f	class:OMXComponentUtils
freeInOutParams	core/audioEncode.cpp	/^void AudioEncode::freeInOutParams() {$/;"	f	class:AudioEncode
freeInOutParams	core/audioEncodeOMX.cpp	/^void AudioEncodeOMX::freeInOutParams() {$/;"	f	class:AudioEncodeOMX
freeInOutParams	core/movieHeaderTail.cpp	/^void MovieHeaderTail::freeInOutParams() {$/;"	f	class:MovieHeaderTail
freeInOutParams	core/resourceMode_SDI.cpp	/^void ResourceModeHandle_SDI::freeInOutParams() {$/;"	f	class:ResourceModeHandle_SDI
freeInOutUpperHalfParams	core/mixtureMode_IPC.cpp	/^bool MixtureMode_IPC::freeInOutUpperHalfParams() {$/;"	f	class:MixtureMode_IPC
freeInOutUpperHalfParams	core/mixtureMode_SDI.cpp	/^bool MixtureMode_SDI::freeInOutUpperHalfParams() {$/;"	f	class:MixtureMode_SDI
freeLiveEncBuffers	core/mixtureMode_IPC.cpp	/^bool MixtureMode_IPC::freeLiveEncBuffers() {$/;"	f	class:MixtureMode_IPC
freeLiveEncBuffers	core/mixtureMode_SDI.cpp	/^bool MixtureMode_SDI::freeLiveEncBuffers() {$/;"	f	class:MixtureMode_SDI
freeLiveNfBuffers	core/mixtureMode_IPC.cpp	/^bool MixtureMode_IPC::freeLiveNfBuffers() {$/;"	f	class:MixtureMode_IPC
freeLiveNfBuffers	core/mixtureMode_SDI.cpp	/^bool MixtureMode_SDI::freeLiveNfBuffers() {$/;"	f	class:MixtureMode_SDI
freeNfBuffers	core/mixtureMode_IPC.cpp	/^bool MixtureMode_IPC::freeNfBuffers() {$/;"	f	class:MixtureMode_IPC
freeNfBuffers	core/mixtureMode_SDI.cpp	/^bool MixtureMode_SDI::freeNfBuffers() {$/;"	f	class:MixtureMode_SDI
freeOMXHandles	KVideo/vgaProviderSystem.cpp	/^bool VGAProviderSystem::freeOMXHandles() {$/;"	f	class:VGAProviderSystem
freeOMXHandles	core/mixtureMode_IPC.cpp	/^bool MixtureMode_IPC::freeOMXHandles() {$/;"	f	class:MixtureMode_IPC
freeOMXHandles	core/mixtureMode_SDI.cpp	/^bool MixtureMode_SDI::freeOMXHandles() {$/;"	f	class:MixtureMode_SDI
freeOMXHandles	core/resourceMode_SDI.cpp	/^bool ResourceModeHandle_SDI::freeOMXHandles() {$/;"	f	class:ResourceModeHandle_SDI
freeSDIDEIBuffers	core/mixtureMode_SDI.cpp	/^bool MixtureMode_SDI::freeSDIDEIBuffers() {$/;"	f	class:MixtureMode_SDI
freeSDIDEIBuffers	core/resourceMode_SDI.cpp	/^bool ResourceModeHandle_SDI::freeSDIDEIBuffers(int aIndex) {$/;"	f	class:ResourceModeHandle_SDI
freeSDIEncBuffers	core/mixtureMode_SDI.cpp	/^bool MixtureMode_SDI::freeSDIEncBuffers() {$/;"	f	class:MixtureMode_SDI
freeSDIEncBuffers	core/resourceMode_SDI.cpp	/^bool ResourceModeHandle_SDI::freeSDIEncBuffers(int aIndex) {$/;"	f	class:ResourceModeHandle_SDI
freeSDINfBuffers	core/mixtureMode_SDI.cpp	/^bool MixtureMode_SDI::freeSDINfBuffers() {$/;"	f	class:MixtureMode_SDI
freeSDIScaleBuffers	core/mixtureMode_SDI.cpp	/^bool MixtureMode_SDI::freeSDIScaleBuffers() {$/;"	f	class:MixtureMode_SDI
freeScaleBuffers	KVideo/vgaProviderSystem.cpp	/^bool VGAProviderSystem::freeScaleBuffers() {$/;"	f	class:VGAProviderSystem
freeScaleBuffers	core/Mp4Player.cpp	/^bool Mp4FilePlayer::freeScaleBuffers() {$/;"	f	class:Mp4FilePlayer
freeScaleBuffers	core/mixtureMode_IPC.cpp	/^bool MixtureMode_IPC::freeScaleBuffers(int aIndex) {$/;"	f	class:MixtureMode_IPC
freeVGAEncBuffers	core/mixtureMode_SDI.cpp	/^bool MixtureMode_SDI::freeVGAEncBuffers() {$/;"	f	class:MixtureMode_SDI
freeVGAScaleBuffers	core/mixtureMode_IPC.cpp	/^bool MixtureMode_IPC::freeVGAScaleBuffers() {$/;"	f	class:MixtureMode_IPC
freeVGAScaleBuffers	core/mixtureMode_SDI.cpp	/^bool MixtureMode_SDI::freeVGAScaleBuffers() {$/;"	f	class:MixtureMode_SDI
fromIP	kerneldef.h	/^    unsigned int fromIP;        \/\/源IP$/;"	m	struct:_s_udp_header
gEventBase	app.cpp	/^event_base* gEventBase = NULL;$/;"	v
gHDMIDisplayAddr	kernel.cpp	/^long long gHDMIDisplayAddr = 0;$/;"	v
gSinalThreadId	app.cpp	/^pthread_t	gSinalThreadId;$/;"	v
gStep	app.cpp	/^int gStep = 0;$/;"	v
gStrAssitCannotRecord	constStringDefine.h	/^const char gStrAssitCannotRecord[] = {0xca, 0xd5, 0xca, 0xd3, 0xb2, 0xbb, 0xc4, 0xdc, 0xc2,$/;"	v
gStrDiskfull	constStringDefine.h	/^const char gStrDiskfull[] = {0xb4, 0xc5, 0xc5, 0xcc, 0xbf, 0xd5, 0xbc, 0xe4, 0xc2, 0xfa, 0x0};$/;"	v
gStrInteraction	constStringDefine.h	/^const char gStrInteraction[] = {0xef, 0xbb, 0xbf, 0xe4, 0xba, 0x92, 0xe5, 0x8a, 0xa8, 0x00};$/;"	v
gStrLCRecordNotSupport	constStringDefine.h	/^const char gStrLCRecordNotSupport[] = {0xc2, 0xbc, 0xd6, 0xc6, 0xcd, 0xa3, 0xd6, 0xb9, 0xa3, 0xac, 0xd6,$/;"	v
gStrMicro	constStringDefine.h	/^const char gStrMicro[] = {0xef, 0xbb, 0xbf, 0xe5, 0xbe, 0xae, 0xe6, 0xa0, 0xbc, 0x00};$/;"	v
gStrMovie	constStringDefine.h	/^const char gStrMovie[] = {0xef, 0xbb, 0xbf, 0xe7, 0x94, 0xb5, 0xe5, 0xbd, 0xb1, 0x00};$/;"	v
gStrOpenCameraFail	constStringDefine.h	/^const char gStrOpenCameraFail[] = {0xb4, 0xf2, 0xbf, 0xaa, 0xc9, 0xe3, 0xcf, 0xf1, 0xcd,$/;"	v
gStrPressFast	constStringDefine.h	/^const char gStrPressFast[] = {0xb2, 0xd9, 0xd7, 0xf7, 0xc6, 0xb5, 0xb7, 0xb1, 0x00};$/;"	v
gStrRecordFailed	constStringDefine.h	/^const char gStrRecordFailed[] = {0xc2, 0xbc, 0xd6, 0xc6, 0xca, 0xa7, 0xb0, 0xdc, 0x00};$/;"	v
gStrResource	constStringDefine.h	/^const char gStrResource[] = {0xef, 0xbb, 0xbf, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0x00};$/;"	v
gStrStatusOK	constStringDefine.h	/^const char gStrStatusOK[] = {0xef, 0xbb, 0xbf, 0xe6, 0xad, 0xa3, 0xe5, 0xb8, 0xb8, 0x00};$/;"	v
gStrVGADonotSupport	constStringDefine.h	/^const char gStrVGADonotSupport[] = {0x56, 0x47, 0x41, 0xb7, 0xd6, 0xb1, 0xe6, 0xc2, 0xca,$/;"	v
gVGADisplayAddr	kernel.cpp	/^long long gVGADisplayAddr = 0;$/;"	v
gVGAStateChanged	constStringDefine.h	/^const char gVGAStateChanged[] = {0x56, 0x47, 0x41, 0xd7, 0xb4, 0xcc, 0xac, 0xb8, 0xc4, 0xb1, 0xe4, 0x00};$/;"	v
gVGAStatus	app.cpp	/^volatile int gVGAStatus = -1;$/;"	v
g_STDDataCallBack_V30	KVideo/HikVideo.cpp	/^static void CALLBACK g_STDDataCallBack_V30(LONG lRealHandle, DWORD dwDataType,$/;"	f	file:
gbackTImagePhyAddr	kernel.cpp	/^long long gbackTImagePhyAddr;$/;"	v
gbackTSImagePhyAddr	kernel.cpp	/^long long gbackTSImagePhyAddr;$/;"	v
gbackTSVImagePhyAddr	kernel.cpp	/^long long gbackTSVImagePhyAddr;$/;"	v
gbackTVImagePhyAddr	kernel.cpp	/^long long gbackTVImagePhyAddr;$/;"	v
gcourseImageHeight	kernel.cpp	/^int		gcourseImageHeight;$/;"	v
gcourseImagePhyAddr	kernel.cpp	/^long long gcourseImagePhyAddr;$/;"	v
gcourseImageWidth	kernel.cpp	/^int		gcourseImageWidth;$/;"	v
genBmpFile	utils/bmpfile.cpp	/^int BMPUtils::genBmpFile(U8* pData, U8 bitCountPerPix,$/;"	f	class:BMPUtils
generateMessage	monitor/monitorSender.cpp	/^bool MonitorSender::generateMessage() {$/;"	f	class:MonitorSender
generate_course_id	utils/liveCourseUtils.cpp	/^int LiveCourseUtils::generate_course_id(const string& roomID) {$/;"	f	class:LiveCourseUtils
generate_uid	utils/liveCourseUtils.cpp	/^int LiveCourseUtils::generate_uid(const string& roomID, int role) {$/;"	f	class:LiveCourseUtils
get	monitor/json_value.cpp	/^Value::get( UInt index, $/;"	f	class:Json::Value
get	monitor/json_value.cpp	/^Value::get( const CppTL::ConstString &key,$/;"	f	class:Json::Value
get	monitor/json_value.cpp	/^Value::get( const char *key, $/;"	f	class:Json::Value
get	monitor/json_value.cpp	/^Value::get( const std::string &key,$/;"	f	class:Json::Value
getAACBitRate	setting.cpp	/^int Setting::getAACBitRate() {$/;"	f	class:Setting
getACCCourseID	setting.cpp	/^string  Setting::getACCCourseID() {$/;"	f	class:Setting
getACCFolderID	setting.cpp	/^string  Setting::getACCFolderID() {$/;"	f	class:Setting
getACCFolderName	setting.cpp	/^string  Setting::getACCFolderName() {$/;"	f	class:Setting
getACCFolderTreeID	setting.cpp	/^string  Setting::getACCFolderTreeID() {$/;"	f	class:Setting
getACCFolderType	setting.cpp	/^string  Setting::getACCFolderType() {$/;"	f	class:Setting
getACCLoginName	setting.cpp	/^string  Setting::getACCLoginName() {$/;"	f	class:Setting
getACCLoginPassword	setting.cpp	/^string  Setting::getACCLoginPassword() {$/;"	f	class:Setting
getACCParam	setting.cpp	/^PRACCParam* Setting::getACCParam() {$/;"	f	class:Setting
getACCProductID	setting.cpp	/^string Setting::getACCProductID() {$/;"	f	class:Setting
getACCServerID	setting.cpp	/^string  Setting::getACCServerID() {$/;"	f	class:Setting
getAssistCommandHandle	kernel.h	/^	AssistCommandHandle* getAssistCommandHandle() {$/;"	f	class:Kernel
getAudioCaptureInstance	kernel.h	/^	inline AudioCapture* getAudioCaptureInstance() {$/;"	f	class:Kernel
getAudioDelayFrames	setting.cpp	/^int Setting::getAudioDelayFrames() {$/;"	f	class:Setting
getAudioDeviceName	setting.cpp	/^string Setting::getAudioDeviceName() {$/;"	f	class:Setting
getAudioPlaybackInstance	kernel.h	/^	inline audio_playback* getAudioPlaybackInstance() {$/;"	f	class:Kernel
getAudioSampleRate	setting.cpp	/^int Setting::getAudioSampleRate() {$/;"	f	class:Setting
getAutoDeleteFiles	setting.cpp	/^bool Setting::getAutoDeleteFiles() {$/;"	f	class:Setting
getAutoUploadFile	setting.cpp	/^bool Setting::getAutoUploadFile() {$/;"	f	class:Setting
getBPIPInfo	setting.cpp	/^BPIPINFO *Setting::getBPIPInfo() {$/;"	f	class:Setting
getBaseRecordParams	setting.cpp	/^BaseRecordParam* Setting::getBaseRecordParams() {$/;"	f	class:Setting
getBmpData	utils/bmpfile.cpp	/^U8* BMPUtils::getBmpData(U8* bitCountPerPix,$/;"	f	class:BMPUtils
getBuilding	setting.h	/^	char* getBuilding() {$/;"	f	class:Setting
getCameraRepeatFrameCount	setting.cpp	/^int Setting::getCameraRepeatFrameCount(int width, int height) {$/;"	f	class:Setting
getCampus	setting.h	/^	char* getCampus() {$/;"	f	class:Setting
getCardDescription	KVideo/CardInfo.cpp	/^string CardInfo::getCardDescription() {$/;"	f	class:CardInfo
getCardInfo	KVideo/HikVideo.cpp	/^CardInfo* HikVideo::getCardInfo() {$/;"	f	class:HikVideo
getChannelID	KVideo/HikVideo.cpp	/^int HikVideo::getChannelID() {$/;"	f	class:HikVideo
getClassRoomID	setting.cpp	/^string Setting::getClassRoomID() {$/;"	f	class:Setting
getClassWxManager	liveCourse/liveCourseManager.h	/^	ClassWxManager* getClassWxManager() {$/;"	f	class:LiveCourseManager
getCodecEngineInstance	kernel.h	/^	inline codec_engine* getCodecEngineInstance() {$/;"	f	class:Kernel
getComment	monitor/json_value.cpp	/^Value::getComment( CommentPlacement placement ) const$/;"	f	class:Json::Value
getCourseId	liveCourse/courseWxManager.h	/^	int getCourseId() {$/;"	f	class:CourseWxManager
getCourseWxManager	liveCourse/liveCourseManager.h	/^	CourseWxManager* getCourseWxManager() {$/;"	f	class:LiveCourseManager
getCpuLoad	utils/commonUtils.cpp	/^int CommonUtils::getCpuLoad() {$/;"	f	class:CommonUtils
getDaysBeforeCanDelete	setting.cpp	/^int	Setting::getDaysBeforeCanDelete() {$/;"	f	class:Setting
getDeleteFrameCount	setting.cpp	/^int Setting::getDeleteFrameCount() {$/;"	f	class:Setting
getDestPath	setting.cpp	/^string Setting::getDestPath() {$/;"	f	class:Setting
getDeviceSceneVideoInfo	setting.cpp	/^SceneVideoInfo* Setting::getDeviceSceneVideoInfo() {$/;"	f	class:Setting
getDiskFreeSpace	utils/commonUtils.cpp	/^int	CommonUtils::getDiskFreeSpace(const char* pPath) {$/;"	f	class:CommonUtils
getDiskSpaceAlertSize	setting.cpp	/^int Setting::getDiskSpaceAlertSize() {$/;"	f	class:Setting
getDualScreenCrop	setting.cpp	/^bool Setting::getDualScreenCrop() {$/;"	f	class:Setting
getEdmaInstance	kernel.h	/^	inline EdmaUtils* getEdmaInstance() {$/;"	f	class:Kernel
getEncodeQualityEnable	setting.cpp	/^bool Setting::getEncodeQualityEnable() {$/;"	f	class:Setting
getEventId	setting.h	/^	int getEventId() {$/;"	f	class:Setting
getFileSize	utils/commonUtils.cpp	/^off_t CommonUtils::getFileSize(const char* pFileName) {$/;"	f	class:CommonUtils
getFormatedErrorMessages	monitor/json_reader.cpp	/^Reader::getFormatedErrorMessages() const$/;"	f	class:Json::Reader
getFrameIndex	Command/KernelBoardCommandHandle.cpp	/^BYTE KernelBoardCommandHandle::getFrameIndex() {$/;"	f	class:KernelBoardCommandHandle
getFrameSize	core/Mp4Player.cpp	/^OMX_U32 Mp4FilePlayer::getFrameSize() {$/;"	f	class:Mp4FilePlayer
getFunction	kernel.h	/^	CFunction *getFunction() {$/;"	f	class:Kernel
getHDMIDisplayDeviceName	setting.cpp	/^string	Setting::getHDMIDisplayDeviceName() {$/;"	f	class:Setting
getHDMIDisplayEnable	setting.cpp	/^bool Setting::getHDMIDisplayEnable() {$/;"	f	class:Setting
getHDMIDisplayManagerInstance	kernel.h	/^	inline HDMIDisplayManager* getHDMIDisplayManagerInstance() {$/;"	f	class:Kernel
getHeadEnable	liveMediaState.cpp	/^BOOL StateHandle::getHeadEnable() {$/;"	f	class:StateHandle
getHeaderEnable	setting.cpp	/^bool Setting::getHeaderEnable() {$/;"	f	class:Setting
getHeapObjectInstance	kernel.h	/^	inline IHeap_Object* getHeapObjectInstance() {$/;"	f	class:Kernel
getIP	KVideo/CardInfo.cpp	/^string CardInfo::getIP() {$/;"	f	class:CardInfo
getIPCChannel	setting.cpp	/^PRChannel* Setting::getIPCChannel() {$/;"	f	class:Setting
getIPCInfo	setting.cpp	/^IPCInfo* Setting::getIPCInfo(int index) {$/;"	f	class:Setting
getImage	core/osdManager.cpp	/^unsigned char* OSDManager::getImage() {$/;"	f	class:OSDManager
getImageHeight	core/osdManager.cpp	/^int OSDManager::getImageHeight() {$/;"	f	class:OSDManager
getImageWidth	core/osdManager.cpp	/^int OSDManager::getImageWidth() {$/;"	f	class:OSDManager
getInstance	KVideo/audio/audio_mixer.cpp	/^audio_mixer* audio_mixer::getInstance()$/;"	f	class:audio_mixer
getInterRtmpUrl	setting.cpp	/^string Setting::getInterRtmpUrl() {$/;"	f	class:Setting
getJoinStatus	core/mtgClient.cpp	/^bool MtgClient::getJoinStatus() {$/;"	f	class:MtgClient
getKernelBoardCommandHandle	kernel.h	/^	KernelBoardCommandHandle* getKernelBoardCommandHandle() {$/;"	f	class:Kernel
getLCAACPath	setting.cpp	/^string Setting::getLCAACPath() {$/;"	f	class:Setting
getLCRecordPath	setting.cpp	/^string Setting::getLCRecordPath() {$/;"	f	class:Setting
getLCRtmpUrl	setting.cpp	/^string	Setting::getLCRtmpUrl() {$/;"	f	class:Setting
getLCSendResourceEnable	setting.cpp	/^bool Setting::getLCSendResourceEnable() {$/;"	f	class:Setting
getLCSpeexPath	setting.cpp	/^string Setting::getLCSpeexPath() {$/;"	f	class:Setting
getLCStudentPath	setting.cpp	/^string Setting::getLCStudentPath() {$/;"	f	class:Setting
getLCTeacherPath	setting.cpp	/^string Setting::getLCTeacherPath() {$/;"	f	class:Setting
getLCVGAPath	setting.cpp	/^string Setting::getLCVGAPath() {$/;"	f	class:Setting
getLiveCourseManager	kernel.h	/^	inline LiveCourseManager* getLiveCourseManager() {$/;"	f	class:Kernel
getLiveDeleteFrameCount	setting.cpp	/^int Setting::getLiveDeleteFrameCount() {$/;"	f	class:Setting
getLiveEncBitrate	setting.cpp	/^int	 Setting::getLiveEncBitrate() {$/;"	f	class:Setting
getLiveEncEnable	setting.cpp	/^bool Setting::getLiveEncEnable() {$/;"	f	class:Setting
getLiveEncHighProfile	setting.cpp	/^bool Setting::getLiveEncHighProfile() {$/;"	f	class:Setting
getLiveEncVOPInter	setting.cpp	/^int	Setting::getLiveEncVOPInter() {$/;"	f	class:Setting
getLiveOutHeight	setting.cpp	/^int Setting::getLiveOutHeight() {$/;"	f	class:Setting
getLiveOutWidth	setting.cpp	/^int Setting::getLiveOutWidth() {$/;"	f	class:Setting
getLocationLineAndColumn	monitor/json_reader.cpp	/^Reader::getLocationLineAndColumn( Location location ) const$/;"	f	class:Json::Reader
getLocationLineAndColumn	monitor/json_reader.cpp	/^Reader::getLocationLineAndColumn( Location location,$/;"	f	class:Json::Reader
getMacInfo	utils/commonUtils.cpp	/^bool CommonUtils::getMacInfo(string& strMacInfo, const char* pEthName) {$/;"	f	class:CommonUtils
getMediaInitialize	liveMediaState.cpp	/^BOOL StateHandle::getMediaInitialize() {$/;"	f	class:StateHandle
getMemLoad	utils/commonUtils.cpp	/^int CommonUtils::getMemLoad() {$/;"	f	class:CommonUtils
getMemberNames	monitor/json_value.cpp	/^Value::getMemberNames() const$/;"	f	class:Json::Value
getMtgEnable	setting.cpp	/^bool Setting::getMtgEnable() {$/;"	f	class:Setting
getMtgHeartbeat	liveCourse/liveCourseManager.h	/^	MtgHeartbeat* getMtgHeartbeat() {$/;"	f	class:LiveCourseManager
getMtgIp	setting.cpp	/^string Setting::getMtgIp() {$/;"	f	class:Setting
getNextChar	monitor/json_reader.cpp	/^Reader::getNextChar()$/;"	f	class:Json::Reader
getNotifyVGAChangedEnable	setting.cpp	/^bool Setting::getNotifyVGAChangedEnable() {$/;"	f	class:Setting
getOldIPCChannel	setting.cpp	/^PRChannel* Setting::getOldIPCChannel() {$/;"	f	class:Setting
getOwnIP	setting.cpp	/^string Setting::getOwnIP(){$/;"	f	class:Setting
getOwnPort	setting.cpp	/^WORD Setting::getOwnPort(){$/;"	f	class:Setting
getPCMNonBlock	setting.cpp	/^bool Setting::getPCMNonBlock() {$/;"	f	class:Setting
getPRState	liveMediaState.cpp	/^PRState*	StateHandle::getPRState() {$/;"	f	class:StateHandle
getPassword	KVideo/CardInfo.cpp	/^string CardInfo::getPassword() {$/;"	f	class:CardInfo
getPlatformIP	liveCourse/courseWxManager.h	/^	string getPlatformIP() {$/;"	f	class:CourseWxManager
getPort	Command/udp.cpp	/^short Udp::getPort() {$/;"	f	class:Udp
getPort	KVideo/CardInfo.cpp	/^int CardInfo::getPort() {$/;"	f	class:CardInfo
getPowerOff	liveMediaState.cpp	/^BOOL StateHandle::getPowerOff() {$/;"	f	class:StateHandle
getRecordMode	setting.cpp	/^int Setting::getRecordMode() {$/;"	f	class:Setting
getRecordTemplate	setting.cpp	/^tagRecordTemplate* Setting::getRecordTemplate(int width, int height) {$/;"	f	class:Setting
getRecordTemplateName	setting.cpp	/^string Setting::getRecordTemplateName() {$/;"	f	class:Setting
getRecordTemplatePath	setting.cpp	/^string Setting::getRecordTemplatePath() {$/;"	f	class:Setting
getRecvCount	core/mtgClient.cpp	/^unsigned long MtgClient::getRecvCount() {$/;"	f	class:MtgClient
getRecvCount	liveCourse/courseWxManager.cpp	/^unsigned long CourseWxManager::getRecvCount() {$/;"	f	class:CourseWxManager
getRecvLossCount	core/mtgClient.cpp	/^unsigned long MtgClient::getRecvLossCount() {$/;"	f	class:MtgClient
getRecvLossCount	liveCourse/courseWxManager.cpp	/^unsigned long CourseWxManager::getRecvLossCount() {$/;"	f	class:CourseWxManager
getRefTime	liveMediaState.cpp	/^DWORD StateHandle::getRefTime() {$/;"	f	class:StateHandle
getRgbValue	setting.cpp	/^bool Setting::getRgbValue(string strColor, int& r, int& g, int& b) {$/;"	f	class:Setting
getRole	liveCourse/courseWxManager.h	/^	ELiveCourseRole getRole() {$/;"	f	class:CourseWxManager
getRoomName	setting.h	/^	char* getRoomName() {$/;"	f	class:Setting
getRtmpEnable	setting.cpp	/^bool Setting::getRtmpEnable() {$/;"	f	class:Setting
getRtmpManager	kernel.h	/^	inline RtmpManager* getRtmpManager() {$/;"	f	class:Kernel
getSDIProviderSystemInstance	kernel.h	/^	SDIVideoProviderSystem* getSDIProviderSystemInstance() {$/;"	f	class:Kernel
getSaveFileName	setting.cpp	/^string Setting::getSaveFileName() {$/;"	f	class:Setting
getSaveHeight	setting.cpp	/^int Setting::getSaveHeight() {$/;"	f	class:Setting
getSavePath	setting.cpp	/^string Setting::getSavePath() {$/;"	f	class:Setting
getSaveTime	liveMediaState.cpp	/^DWORD StateHandle::getSaveTime() {$/;"	f	class:StateHandle
getSaveWidth	setting.cpp	/^int Setting::getSaveWidth() {$/;"	f	class:Setting
getSceneBackPicInfo	setting.cpp	/^SceneBackPicInfo* Setting::getSceneBackPicInfo() {$/;"	f	class:Setting
getSceneMediaFileInfo	setting.cpp	/^SceneMeidaFileInfo* Setting::getSceneMediaFileInfo() {$/;"	f	class:Setting
getSceneMixPicInfo	setting.cpp	/^SceneMixPicInfo* Setting::getSceneMixPicInfo() {$/;"	f	class:Setting
getSceneStringInfo	setting.cpp	/^SceneStringInfo* Setting::getSceneStringInfo() {$/;"	f	class:Setting
getSceneStringInfo	setting.cpp	/^bool Setting::getSceneStringInfo(TiXmlAttribute* pAttr, SceneStringInfo* info, BOOL& bShow) {$/;"	f	class:Setting
getSchool	setting.h	/^	char*  getSchool() {$/;"	f	class:Setting
getSelfBufHeader	core/OMXComponentUtils.cpp	/^OMX_ERRORTYPE OMXComponentUtils::getSelfBufHeader(ComponentWrapper *thisComp,$/;"	f	class:OMXComponentUtils
getSendCount	core/mtgClient.cpp	/^unsigned long MtgClient::getSendCount() {$/;"	f	class:MtgClient
getSendCount	liveCourse/courseWxManager.cpp	/^unsigned long CourseWxManager::getSendCount() {$/;"	f	class:CourseWxManager
getSendLossCount	core/mtgClient.cpp	/^unsigned long MtgClient::getSendLossCount() {$/;"	f	class:MtgClient
getSendLossCount	liveCourse/courseWxManager.cpp	/^unsigned long CourseWxManager::getSendLossCount() {$/;"	f	class:CourseWxManager
getSetting	kernel.h	/^	inline Setting *getSetting() {$/;"	f	class:Kernel
getSharePath	setting.cpp	/^string Setting::getSharePath() {$/;"	f	class:Setting
getSharePathUsername	setting.cpp	/^string Setting::getSharePathUsername() {$/;"	f	class:Setting
getStateHandle	kernel.h	/^	StateHandle* getStateHandle() {$/;"	f	class:Kernel
getStreaInfos	liveCourse/courseWxManager.h	/^	vector<tagStreamInfo> getStreaInfos() {$/;"	f	class:CourseWxManager
getStreamMediaState	liveMediaState.cpp	/^StreamMediaState* StateHandle::getStreamMediaState() {$/;"	f	class:StateHandle
getStudentChannelChanged	KVideo/streamVideoManager.cpp	/^bool StreamVideoManager::getStudentChannelChanged() {$/;"	f	class:StreamVideoManager
getStudentSceneVideoInfo	setting.cpp	/^SceneVideoInfo* Setting::getStudentSceneVideoInfo() {$/;"	f	class:Setting
getTeacherChannelChanged	KVideo/streamVideoManager.cpp	/^bool StreamVideoManager::getTeacherChannelChanged() {$/;"	f	class:StreamVideoManager
getTeacherSceneVideoInfo	setting.cpp	/^SceneVideoInfo*	Setting::getTeacherSceneVideoInfo() {$/;"	f	class:Setting
getUnicodeRelateFileName	setting.cpp	/^string Setting::getUnicodeRelateFileName() {$/;"	f	class:Setting
getUnitIP	setting.cpp	/^string Setting::getUnitIP(){$/;"	f	class:Setting
getUnitPort	setting.cpp	/^WORD Setting::getUnitPort(){$/;"	f	class:Setting
getUsername	KVideo/CardInfo.cpp	/^string CardInfo::getUsername() {$/;"	f	class:CardInfo
getUtf8RecordParam	setting.cpp	/^stUtf8RecordParam* Setting::getUtf8RecordParam() {$/;"	f	class:Setting
getUtf8RelateFileName	setting.cpp	/^string Setting::getUtf8RelateFileName() {$/;"	f	class:Setting
getVGADisplayDeviceName	setting.cpp	/^string  Setting::getVGADisplayDeviceName() {$/;"	f	class:Setting
getVGADisplayEnable	setting.cpp	/^bool Setting::getVGADisplayEnable() {$/;"	f	class:Setting
getVGAEncBitrate	setting.cpp	/^int Setting::getVGAEncBitrate() {$/;"	f	class:Setting
getVGAEncodeEnable	setting.cpp	/^bool Setting::getVGAEncodeEnable() {$/;"	f	class:Setting
getVGAProviderSystemInstance	kernel.h	/^	inline VGAProviderSystem* getVGAProviderSystemInstance() {$/;"	f	class:Kernel
getVGASlowFrameCount	setting.cpp	/^int Setting::getVGASlowFrameCount(int width, int height) {$/;"	f	class:Setting
getVGASwitchOldPanel	setting.cpp	/^bool Setting::getVGASwitchOldPanel() {$/;"	f	class:Setting
getVideoBitrate	setting.cpp	/^int Setting::getVideoBitrate() {$/;"	f	class:Setting
getVideoFrameRate	setting.cpp	/^int Setting::getVideoFrameRate() {$/;"	f	class:Setting
getWebID	setting.cpp	/^string Setting::getWebID(){$/;"	f	class:Setting
getWebMessage	liveCourse/courseWxManager.h	/^	tagLiveMtgWebMessage* getWebMessage() {$/;"	f	class:CourseWxManager
getWebServiceParam	setting.cpp	/^WebServiceParam* Setting::getWebServiceParam() {$/;"	f	class:Setting
get_file_path	utils/commonUtils.cpp	/^void CommonUtils::get_file_path(const char *path, const char *file_name,  char *file_path)$/;"	f	class:CommonUtils
get_level	KVideo/audio/audio_mixer.cpp	/^int  audio_mixer::get_level(stAudioMixLevel* plevel, short* frame_buffer, int samples_per_frame)$/;"	f	class:audio_mixer
getcontent	utils/vgaState.cpp	/^int inline getcontent(char *path)$/;"	f
getcurlength	KVideo/audio/fifo.cpp	/^int fifo::getcurlength()$/;"	f	class:fifo
getvalidindex	KVideo/audio/fifo.cpp	/^int fifo::getvalidindex()$/;"	f	class:fifo
gheadImagePhyAddr	kernel.cpp	/^long long gheadImagePhyAddr;$/;"	v
glog	log.cpp	/^Log glog;$/;"	v
glogoHeight	kernel.cpp	/^int		glogoHeight;$/;"	v
glogoImagePhyAddr	kernel.cpp	/^long long glogoImagePhyAddr;$/;"	v
glogoWidth	kernel.cpp	/^int		glogoWidth;$/;"	v
gray1_to_gray8	utils/colorConvert.cpp	/^void ColorConvertUtils::gray1_to_gray8(unsigned char *d, unsigned char *s,$/;"	f	class:ColorConvertUtils
gray4_to_gray8	utils/colorConvert.cpp	/^void ColorConvertUtils::gray4_to_gray8(unsigned char *d, unsigned char *s,$/;"	f	class:ColorConvertUtils
gray8_to_gray1	utils/colorConvert.cpp	/^void ColorConvertUtils::gray8_to_gray1(unsigned char *d, unsigned char *s,$/;"	f	class:ColorConvertUtils
gray8_to_gray4	utils/colorConvert.cpp	/^void ColorConvertUtils::gray8_to_gray4(unsigned char *d, unsigned char *s,$/;"	f	class:ColorConvertUtils
gray8_to_yuv420	utils/colorConvert.cpp	/^void ColorConvertUtils::gray8_to_yuv420(unsigned char *dest, unsigned char *src,$/;"	f	class:ColorConvertUtils
gtailImagePhyAddr	kernel.cpp	/^long long gtailImagePhyAddr;$/;"	v
guid	kerneldef.h	/^    char guid[10];              \/\/$/;"	m	struct:_s_udp_cmd
handle	KVideo/audio/codec_engine.h	/^	void* handle;$/;"	m	struct:channelinfo
handle	core/OMXCommonDef.h	/^  OMX_HANDLETYPE handle;$/;"	m	struct:tagComponentWrapper
handle_local	KVideo/audio/codec_engine.cpp	/^	void* handle_local     = NULL;$/;"	m	namespace:__anon3	file:
handlerVGAException	app.cpp	/^static void handlerVGAException(int dunno) {$/;"	f	file:
handlerchange	app.cpp	/^static void handlerchange(int dunno)$/;"	f	file:
hasComment	monitor/json_value.cpp	/^Value::hasComment( CommentPlacement placement ) const$/;"	f	class:Json::Value
hasCommentForValue	monitor/json_writer.cpp	/^StyledStreamWriter::hasCommentForValue( const Value &value )$/;"	f	class:Json::StyledStreamWriter
hasCommentForValue	monitor/json_writer.cpp	/^StyledWriter::hasCommentForValue( const Value &value )$/;"	f	class:Json::StyledWriter
head	KVideo/audio/structdef.h	/^	int  head;$/;"	m	struct:stsendinfor
header	KVideo/audio/rtpstruct.h	/^	RTPHeader header;$/;"	m	struct:stRTPPacket
header	core/msgq.h	/^  MessageQ_MsgHeader header;$/;"	m	struct:ConfigureUIA
height	KVideo/audio/structdef.h	/^	int height;$/;"	m	struct:stvideoinfor
hi240_to_rgb32	utils/colorConvert.cpp	/^void ColorConvertUtils::hi240_to_rgb32(unsigned char *dest, unsigned char *src,$/;"	f	class:ColorConvertUtils
iBufferLen	core/cameraBufferPool.h	/^	int		iBufferLen;$/;"	m	struct:stCameraFrameBuffer
iBufferLen	core/framePool.h	/^	int		iBufferLen;$/;"	m	struct:stFrameBuffer
iDataLen	core/cameraBufferPool.h	/^	int		iDataLen;$/;"	m	struct:stCameraFrameBuffer
iDataLen	core/framePool.h	/^	int		iDataLen;$/;"	m	struct:stFrameBuffer
iMixSamplesData	KVideo/audio/audio_mixer.cpp	/^	int   iMixSamplesData[kSamplesPerFrame] = {0};$/;"	m	namespace:__anon7	file:
iUpdateIndex	netprotocal/ICIICommandStruct.h	/^	int				iUpdateIndex;$/;"	m	struct:tagPR2COM_UnitState
iaudio	KVideo/audio/iaudio.h	/^	iaudio(void) {}$/;"	f	class:iaudio
iaudio	KVideo/audio/iaudio.h	/^class iaudio {$/;"	c
icfgs	package/ti_sdo_ce_examples_apps_armlivemedia.java	/^    ArrayList<Object> icfgs = new ArrayList<Object>();$/;"	f	class:ti_sdo_ce_examples_apps_armlivemedia
id	KVideo/audio/codec_engine.h	/^	pthread_t id;	$/;"	m	struct:channelinfo
id	KVideo/audio/structdef.h	/^	int id;$/;"	m	struct:stvideoinfor
idle	utils/commonUtils.cpp	/^unsigned int idle;$/;"	m	struct:__anon1	file:
imports	package/ti_sdo_ce_examples_apps_armlivemedia.java	/^    ArrayList<Object> imports = new ArrayList<Object>();$/;"	f	class:ti_sdo_ce_examples_apps_armlivemedia
in	monitor/json_reader.cpp	/^in( Reader::Char c, Reader::Char c1, Reader::Char c2, Reader::Char c3, Reader::Char c4 )$/;"	f	namespace:Json
in	monitor/json_reader.cpp	/^in( Reader::Char c, Reader::Char c1, Reader::Char c2, Reader::Char c3, Reader::Char c4, Reader::Char c5 )$/;"	f	namespace:Json
inBuf	core/DecodeUtils.h	/^  AVChunk_Buf inBuf;$/;"	m	struct:__anon15
inDataStrmThrdId	core/OMXCommonDef.h	/^  pthread_t inDataStrmThrdId;$/;"	m	struct:tagComponentWrapper
inPortParams	core/OMXCommonDef.h	/^  InportParams *inPortParams;$/;"	m	struct:tagComponentWrapper
indent	monitor/json_writer.cpp	/^StyledStreamWriter::indent()$/;"	f	class:Json::StyledStreamWriter
indent	monitor/json_writer.cpp	/^StyledWriter::indent()$/;"	f	class:Json::StyledWriter
indentSize_	monitor/writer.h	/^      int indentSize_;$/;"	m	class:Json::StyledWriter
indentString_	monitor/writer.h	/^      std::string indentString_;$/;"	m	class:Json::StyledStreamWriter
indentString_	monitor/writer.h	/^      std::string indentString_;$/;"	m	class:Json::StyledWriter
indentation_	monitor/writer.h	/^      std::string indentation_;$/;"	m	class:Json::StyledStreamWriter
index	KVideo/audio/audio_mixer.h	/^	int index;$/;"	m	struct:__anon5
index	KVideo/audio/codec_engine.h	/^	int index;$/;"	m	struct:channelinfo
index	KVideo/audio/structdef.h	/^	int  index;$/;"	m	struct:stsendinfor
index	KVideo/captureVideoDefines.h	/^	int index;$/;"	m	struct:buf_info
index	monitor/json_value.cpp	/^Value::CZString::index() const$/;"	f	class:Json::Value::CZString
index_	monitor/value.h	/^         int index_;$/;"	m	class:Json::Value::CZString
index_	monitor/value.h	/^      UInt index_;$/;"	m	class:Json::PathArgument
inherits	package/ti_sdo_ce_examples_apps_armlivemedia.java	/^    ArrayList<String> inherits = new ArrayList<String>();$/;"	f	class:ti_sdo_ce_examples_apps_armlivemedia
init	Command/AssistCommandHandle.cpp	/^bool AssistCommandHandle::init(Setting* pSetting) {$/;"	f	class:AssistCommandHandle
init	Command/Function.cpp	/^BOOL CFunction::init(Kernel* pKernel){$/;"	f	class:CFunction
init	Command/KernelBoardCommandHandle.cpp	/^BOOL KernelBoardCommandHandle::init(Setting* pSetting, IUDPCommandListener * pUdpCommandListener) {$/;"	f	class:KernelBoardCommandHandle
init	Command/udp.cpp	/^bool Udp::init() {$/;"	f	class:Udp
init	KVideo/audio/audio_capture.cpp	/^int audio_capture::init(char* device)$/;"	f	class:audio_capture
init	KVideo/audio/audio_mixer.cpp	/^int audio_mixer::init()$/;"	f	class:audio_mixer
init	KVideo/audio/audio_playback.cpp	/^int audio_playback::init(char* device)$/;"	f	class:audio_playback
init	KVideo/audio/codec_engine.cpp	/^int codec_engine::init(char* pBaseAddr)$/;"	f	class:codec_engine
init	KVideo/audio/fifo.cpp	/^int fifo::init(int fifo_count)$/;"	f	class:fifo
init	KVideo/audioCapture.cpp	/^bool AudioCapture::init(int aAudioChannel, int aSampleRate,$/;"	f	class:AudioCapture
init	KVideo/captureSDIVideo.cpp	/^bool CaptureSDI::init(const char* pDeviceName) {$/;"	f	class:CaptureSDI
init	KVideo/captureVga.cpp	/^bool CaptureVGA::init() {$/;"	f	class:CaptureVGA
init	KVideo/sdiVideoProviderSystem.cpp	/^bool SDIVideoProviderSystem::init() {$/;"	f	class:SDIVideoProviderSystem
init	KVideo/streamVideoManager.cpp	/^bool StreamVideoManager::init(Kernel * pKernel) {$/;"	f	class:StreamVideoManager
init	KVideo/vgaProviderSystem.cpp	/^bool VGAProviderSystem::init(Kernel* pKernel) {$/;"	f	class:VGAProviderSystem
init	core/HDMIDisplayManager.cpp	/^bool HDMIDisplayManager::init(Setting* pSetting) {$/;"	f	class:HDMIDisplayManager
init	core/Mp4Player.cpp	/^bool Mp4FilePlayer::init(const char* pFileName) {$/;"	f	class:Mp4FilePlayer
init	core/Mutex.cpp	/^bool Mutex::init() {$/;"	f	class:Mutex
init	core/audioEncode.cpp	/^bool AudioEncode::init(int aAudioChannel, int aSampleRate,$/;"	f	class:AudioEncode
init	core/audioEncodeFAAC.cpp	/^bool AudioEncodeFAAC::init(int aAudioChannel, int aSampleRate,$/;"	f	class:AudioEncodeFAAC
init	core/audioEncodeOMX.cpp	/^bool AudioEncodeOMX::init(int aAudioChannel, int aSampleRate,$/;"	f	class:AudioEncodeOMX
init	core/baseMode.cpp	/^BOOL BaseMode::init(Setting* pSetting) {$/;"	f	class:BaseMode
init	core/cameraBufferPool.cpp	/^bool CameraBufferPool::init(int count) {$/;"	f	class:CameraBufferPool
init	core/edma.cpp	/^bool EdmaUtils::init() {$/;"	f	class:EdmaUtils
init	core/framePool.cpp	/^bool FrameBufferPool::init(int count) {$/;"	f	class:FrameBufferPool
init	core/mixtureMode_IPC.cpp	/^BOOL MixtureMode_IPC::init(Setting* pSetting) {$/;"	f	class:MixtureMode_IPC
init	core/mixtureMode_SDI.cpp	/^BOOL MixtureMode_SDI::init(Setting* pSetting) {$/;"	f	class:MixtureMode_SDI
init	core/movieHeaderTail.cpp	/^bool MovieHeaderTail::init(int inWidth, int inHeight,$/;"	f	class:MovieHeaderTail
init	core/mp4Output.cpp	/^bool Mp4Output::init(const string& strFilename, int videoWidth, int videoHeight, int frameRate$/;"	f	class:Mp4Output
init	core/mtgClient.cpp	/^bool MtgClient::init(const char* pMtgIP, int confId, int userId) {$/;"	f	class:MtgClient
init	core/mtgInit.cpp	/^bool MtgHeartbeat::init() {$/;"	f	class:MtgHeartbeat
init	core/osdManager.cpp	/^bool OSDManager::init(const char* pBkPngName,$/;"	f	class:OSDManager
init	core/resourceMode_IPC.cpp	/^BOOL ResourceModeHandle_IPC::init(Setting* pSetting) {$/;"	f	class:ResourceModeHandle_IPC
init	core/resourceMode_SDI.cpp	/^BOOL ResourceModeHandle_SDI::init(Setting* pSetting) {$/;"	f	class:ResourceModeHandle_SDI
init	core/rtmpHandle.cpp	/^bool RtmpHandle::init(const char* strUrl, int aVideoWidth, int aVideoHeight,$/;"	f	class:RtmpHandle
init	core/rtmpManager.cpp	/^bool RtmpManager::init(Setting* pSetting) {$/;"	f	class:RtmpManager
init	core/shareMem.cpp	/^bool ShareMemManager::init(int count) {$/;"	f	class:ShareMemManager
init	kernel.cpp	/^bool Kernel::init() {$/;"	f	class:Kernel
init	liveCourse/classWxManager.cpp	/^bool ClassWxManager::init(Kernel* pKernel, string strMtgIp, string strRoomId) {$/;"	f	class:ClassWxManager
init	liveCourse/courseWxManager.cpp	/^bool CourseWxManager::init(Setting* pSetting) {$/;"	f	class:CourseWxManager
init	liveCourse/liveCourseManager.cpp	/^bool LiveCourseManager::init(Kernel* pKernel, Setting* pSetting) {$/;"	f	class:LiveCourseManager
init	liveCourse/subVideoManager.cpp	/^bool SubVideoManager::init(Kernel* pKernel) {$/;"	f	class:SubVideoManager
init	monitor/monitorSender.cpp	/^bool MonitorSender::init(Setting* pSetting, LiveCourseManager* pLiveCourseManager) {$/;"	f	class:MonitorSender
init	timer.cpp	/^bool Timer::init() {$/;"	f	class:Timer
init	utils/vgaState.cpp	/^bool VGAStateHandle::init(IVGAStateListener* pListener, int millSecond) {$/;"	f	class:VGAStateHandle
init	web/modelStatus.cpp	/^bool ModelStatus::init(Kernel* pKernel) {$/;"	f	class:ModelStatus
init	web/recordList.cpp	/^bool RecordList::init(Kernel* pKernel) {$/;"	f	class:RecordList
initCodecEngine	core/audioEncodeFAAC.cpp	/^bool AudioEncodeFAAC::initCodecEngine() {$/;"	f	class:AudioEncodeFAAC
initComponent	core/OMXComponentUtils.cpp	/^void OMXComponentUtils::initComponent(ComponentWrapper* &aComponent) {$/;"	f	class:OMXComponentUtils
initDecOMXHandle	core/Mp4Player.cpp	/^BOOL Mp4FilePlayer::initDecOMXHandle() {$/;"	f	class:Mp4FilePlayer
initDecOMXHandle	core/mixtureMode_IPC.cpp	/^BOOL MixtureMode_IPC::initDecOMXHandle() {$/;"	f	class:MixtureMode_IPC
initDeiOMXHandle	core/mixtureMode_IPC.cpp	/^BOOL MixtureMode_IPC::initDeiOMXHandle() {$/;"	f	class:MixtureMode_IPC
initDeiOMXHandle	core/mixtureMode_SDI.cpp	/^BOOL MixtureMode_SDI::initDeiOMXHandle() {$/;"	f	class:MixtureMode_SDI
initDeiOMXHandle	core/movieHeaderTail.cpp	/^BOOL MovieHeaderTail::initDeiOMXHandle() {$/;"	f	class:MovieHeaderTail
initDisplayOMXHandle	core/Mp4Player.cpp	/^BOOL Mp4FilePlayer::initDisplayOMXHandle() {$/;"	f	class:Mp4FilePlayer
initDisplayOMXHandle	core/movieHeaderTail.cpp	/^BOOL MovieHeaderTail::initDisplayOMXHandle() {$/;"	f	class:MovieHeaderTail
initEncodeOMXHandle	KVideo/vgaProviderSystem.cpp	/^bool VGAProviderSystem::initEncodeOMXHandle() {$/;"	f	class:VGAProviderSystem
initEncodeOMXHandle	core/mixtureMode_IPC.cpp	/^BOOL MixtureMode_IPC::initEncodeOMXHandle() {$/;"	f	class:MixtureMode_IPC
initEncodeOMXHandle	core/mixtureMode_SDI.cpp	/^BOOL MixtureMode_SDI::initEncodeOMXHandle() {$/;"	f	class:MixtureMode_SDI
initEncodeOMXHandle	core/movieHeaderTail.cpp	/^BOOL MovieHeaderTail::initEncodeOMXHandle() {$/;"	f	class:MovieHeaderTail
initEncodeOMXHandle	core/resourceMode_SDI.cpp	/^BOOL ResourceModeHandle_SDI::initEncodeOMXHandle() {$/;"	f	class:ResourceModeHandle_SDI
initHeadTailInputResources	core/mixtureMode_IPC.cpp	/^bool MixtureMode_IPC::initHeadTailInputResources(int aInputIndex) {$/;"	f	class:MixtureMode_IPC
initHeadTailInputResources	core/mixtureMode_SDI.cpp	/^bool MixtureMode_SDI::initHeadTailInputResources(int aInputIndex) {$/;"	f	class:MixtureMode_SDI
initHeadTailScaleOMXHandle	core/mixtureMode_IPC.cpp	/^BOOL MixtureMode_IPC::initHeadTailScaleOMXHandle() {$/;"	f	class:MixtureMode_IPC
initHeadTailScaleOMXHandle	core/mixtureMode_SDI.cpp	/^BOOL MixtureMode_SDI::initHeadTailScaleOMXHandle() {$/;"	f	class:MixtureMode_SDI
initLiveEncodeOMXHandle	core/mixtureMode_IPC.cpp	/^BOOL MixtureMode_IPC::initLiveEncodeOMXHandle() {$/;"	f	class:MixtureMode_IPC
initLiveEncodeOMXHandle	core/mixtureMode_SDI.cpp	/^BOOL MixtureMode_SDI::initLiveEncodeOMXHandle() {$/;"	f	class:MixtureMode_SDI
initLiveNfOMXHandle	core/mixtureMode_IPC.cpp	/^BOOL MixtureMode_IPC::initLiveNfOMXHandle() {$/;"	f	class:MixtureMode_IPC
initLiveNfOMXHandle	core/mixtureMode_SDI.cpp	/^BOOL MixtureMode_SDI::initLiveNfOMXHandle() {$/;"	f	class:MixtureMode_SDI
initLowerHalf	core/mixtureMode_IPC.cpp	/^bool MixtureMode_IPC::initLowerHalf() {$/;"	f	class:MixtureMode_IPC
initLowerHalf	core/mixtureMode_SDI.cpp	/^bool MixtureMode_SDI::initLowerHalf() {$/;"	f	class:MixtureMode_SDI
initLowerHalfOMXHandle	core/mixtureMode_IPC.cpp	/^bool MixtureMode_IPC::initLowerHalfOMXHandle() {$/;"	f	class:MixtureMode_IPC
initLowerHalfOMXHandle	core/mixtureMode_SDI.cpp	/^bool MixtureMode_SDI::initLowerHalfOMXHandle() {$/;"	f	class:MixtureMode_SDI
initNfOMXHandle	core/mixtureMode_IPC.cpp	/^BOOL MixtureMode_IPC::initNfOMXHandle() {$/;"	f	class:MixtureMode_IPC
initNfOMXHandle	core/mixtureMode_SDI.cpp	/^BOOL MixtureMode_SDI::initNfOMXHandle() {$/;"	f	class:MixtureMode_SDI
initOMXHandle	KVideo/vgaProviderSystem.cpp	/^bool VGAProviderSystem::initOMXHandle() {$/;"	f	class:VGAProviderSystem
initOMXHandle	core/Mp4Player.cpp	/^BOOL Mp4FilePlayer::initOMXHandle() {$/;"	f	class:Mp4FilePlayer
initOMXHandle	core/audioEncode.cpp	/^bool AudioEncode::initOMXHandle() {$/;"	f	class:AudioEncode
initOMXHandle	core/audioEncodeOMX.cpp	/^bool AudioEncodeOMX::initOMXHandle() {$/;"	f	class:AudioEncodeOMX
initOMXHandle	core/movieHeaderTail.cpp	/^BOOL MovieHeaderTail::initOMXHandle() {$/;"	f	class:MovieHeaderTail
initOMXHandle	core/resourceMode_SDI.cpp	/^BOOL ResourceModeHandle_SDI::initOMXHandle() {$/;"	f	class:ResourceModeHandle_SDI
initSDIDEIOMXHandle	core/mixtureMode_SDI.cpp	/^BOOL MixtureMode_SDI::initSDIDEIOMXHandle() {$/;"	f	class:MixtureMode_SDI
initSDIDEIOMXHandle	core/resourceMode_SDI.cpp	/^BOOL ResourceModeHandle_SDI::initSDIDEIOMXHandle() {$/;"	f	class:ResourceModeHandle_SDI
initSDIEncOMXHandle	core/mixtureMode_SDI.cpp	/^BOOL MixtureMode_SDI::initSDIEncOMXHandle() {$/;"	f	class:MixtureMode_SDI
initSDIEncOMXHandle	core/resourceMode_SDI.cpp	/^BOOL ResourceModeHandle_SDI::initSDIEncOMXHandle() {$/;"	f	class:ResourceModeHandle_SDI
initSDINfOMXHandle	core/mixtureMode_SDI.cpp	/^BOOL MixtureMode_SDI::initSDINfOMXHandle() {$/;"	f	class:MixtureMode_SDI
initSDIScaleOMXHandle	core/mixtureMode_SDI.cpp	/^BOOL MixtureMode_SDI::initSDIScaleOMXHandle() {$/;"	f	class:MixtureMode_SDI
initScaleOMXHandle	KVideo/vgaProviderSystem.cpp	/^bool VGAProviderSystem::initScaleOMXHandle() {$/;"	f	class:VGAProviderSystem
initScaleOMXHandle	core/Mp4Player.cpp	/^BOOL Mp4FilePlayer::initScaleOMXHandle() {$/;"	f	class:Mp4FilePlayer
initScaleOMXHandle	core/mixtureMode_IPC.cpp	/^BOOL MixtureMode_IPC::initScaleOMXHandle() {$/;"	f	class:MixtureMode_IPC
initUpperHalf	core/mixtureMode_IPC.cpp	/^bool MixtureMode_IPC::initUpperHalf() {$/;"	f	class:MixtureMode_IPC
initUpperHalf	core/mixtureMode_SDI.cpp	/^bool MixtureMode_SDI::initUpperHalf() {$/;"	f	class:MixtureMode_SDI
initUpperHalfOMXHandle	core/mixtureMode_IPC.cpp	/^bool MixtureMode_IPC::initUpperHalfOMXHandle() {$/;"	f	class:MixtureMode_IPC
initUpperHalfOMXHandle	core/mixtureMode_SDI.cpp	/^bool MixtureMode_SDI::initUpperHalfOMXHandle() {$/;"	f	class:MixtureMode_SDI
initVGAComponent	core/mixtureMode_IPC.cpp	/^bool MixtureMode_IPC::initVGAComponent() {$/;"	f	class:MixtureMode_IPC
initVGAComponent	core/mixtureMode_SDI.cpp	/^bool MixtureMode_SDI::initVGAComponent() {$/;"	f	class:MixtureMode_SDI
initVGAEncOMXHandle	core/mixtureMode_SDI.cpp	/^BOOL MixtureMode_SDI::initVGAEncOMXHandle() {$/;"	f	class:MixtureMode_SDI
initVGAScaleOMXHandle	core/mixtureMode_IPC.cpp	/^BOOL MixtureMode_IPC::initVGAScaleOMXHandle() {$/;"	f	class:MixtureMode_IPC
initVGAScaleOMXHandle	core/mixtureMode_SDI.cpp	/^BOOL MixtureMode_SDI::initVGAScaleOMXHandle() {$/;"	f	class:MixtureMode_SDI
initcapture	KVideo/audio/audio_capture.cpp	/^int audio_capture::initcapture(char* device)$/;"	f	class:audio_capture
initchannelinfo	KVideo/audio/codec_engine.cpp	/^void codec_engine::initchannelinfo(char* path, channelinfo* cinfo)$/;"	f	class:codec_engine
initialInputResources	core/Mp4Player.cpp	/^bool Mp4FilePlayer::initialInputResources(int aInputIndex) {$/;"	f	class:Mp4FilePlayer
initialInputResources	core/audioEncode.cpp	/^bool AudioEncode::initialInputResources(int aInputIndex) {$/;"	f	class:AudioEncode
initialInputResources	core/audioEncodeOMX.cpp	/^bool AudioEncodeOMX::initialInputResources(int aInputIndex) {$/;"	f	class:AudioEncodeOMX
initialInputResources	core/movieHeaderTail.cpp	/^bool MovieHeaderTail::initialInputResources(int aInputIndex) {$/;"	f	class:MovieHeaderTail
initialOutputResources	core/OMXComponentUtils.cpp	/^OMX_ERRORTYPE OMXComponentUtils::initialOutputResources($/;"	f	class:OMXComponentUtils
initplayback	KVideo/audio/audio_playback.cpp	/^int audio_playback::initplayback(char* device)$/;"	f	class:audio_playback
initv4lhandle	core/v4lDisplay.cpp	/^bool DisplayHandle::initv4lhandle(int width, int height, const char* pDeviceName, int type) {$/;"	f	class:DisplayHandle
inputData	KVideo/audio/audio_mixer.cpp	/^void audio_mixer::inputData(void* handle, char* frame_buffer, int frame_length)$/;"	f	class:audio_mixer
instId	core/OMXCommonDef.h	/^	int instId;$/;"	m	struct:tagInputThreadArgs
intValue	monitor/value.h	/^      intValue,      \/\/\/< signed integer value$/;"	e	enum:Json::ValueType
int_	monitor/value.h	/^         Int int_;$/;"	m	union:Json::Value::ValueHolder
invalidPath	monitor/json_value.cpp	/^Path::invalidPath( const std::string &path, $/;"	f	class:Json::Path
ipBufPipe	core/OMXCommonDef.h	/^  OMX_S32 ipBufPipe[2];       \/* input pipe *\/$/;"	m	struct:tagInportParams
isArray	monitor/json_value.cpp	/^Value::isArray() const$/;"	f	class:Json::Value
isArray_	monitor/value.h	/^      bool isArray_;$/;"	m	class:Json::ValueIteratorBase
isBool	monitor/json_value.cpp	/^Value::isBool() const$/;"	f	class:Json::Value
isCFG	package/ti_sdo_ce_examples_apps_armlivemedia.java	/^    boolean isCFG;$/;"	f	class:ti_sdo_ce_examples_apps_armlivemedia
isComponentCreated	core/baseMode.cpp	/^bool BaseMode::isComponentCreated() {$/;"	f	class:BaseMode
isComponentCreated	core/mixtureMode_IPC.cpp	/^bool MixtureMode_IPC::isComponentCreated() {$/;"	f	class:MixtureMode_IPC
isComponentCreated	core/mixtureMode_SDI.cpp	/^bool MixtureMode_SDI::isComponentCreated() {$/;"	f	class:MixtureMode_SDI
isComponentCreated	core/resourceMode_IPC.cpp	/^bool ResourceModeHandle_IPC::isComponentCreated() {$/;"	f	class:ResourceModeHandle_IPC
isComponentCreated	core/resourceMode_SDI.cpp	/^bool ResourceModeHandle_SDI::isComponentCreated() {$/;"	f	class:ResourceModeHandle_SDI
isControlCharacter	monitor/json_writer.cpp	/^static bool isControlCharacter(char ch)$/;"	f	namespace:Json
isConvertibleTo	monitor/json_value.cpp	/^Value::isConvertibleTo( ValueType other ) const$/;"	f	class:Json::Value
isDouble	monitor/json_value.cpp	/^Value::isDouble() const$/;"	f	class:Json::Value
isGetPortSem	core/OMXComponentUtils.cpp	/^bool OMXComponentUtils::isGetPortSem(ComponentWrapper* &aComponent) {$/;"	f	class:OMXComponentUtils
isGetStateSem	core/OMXComponentUtils.cpp	/^bool OMXComponentUtils::isGetStateSem(ComponentWrapper* &aComponent) {$/;"	f	class:OMXComponentUtils
isIPValid	utils/commonUtils.cpp	/^bool CommonUtils::isIPValid(const char* str) {$/;"	f	class:CommonUtils
isInt	monitor/json_value.cpp	/^Value::isInt() const$/;"	f	class:Json::Value
isIntegral	monitor/json_value.cpp	/^Value::isIntegral() const$/;"	f	class:Json::Value
isItemAvailable	monitor/value.h	/^      inline bool isItemAvailable() const$/;"	f	class:Json::Value
isMember	monitor/json_value.cpp	/^Value::isMember( const CppTL::ConstString &key ) const$/;"	f	class:Json::Value
isMember	monitor/json_value.cpp	/^Value::isMember( const char *key ) const$/;"	f	class:Json::Value
isMember	monitor/json_value.cpp	/^Value::isMember( const std::string &key ) const$/;"	f	class:Json::Value
isMemberNameStatic	monitor/value.h	/^      inline bool isMemberNameStatic() const$/;"	f	class:Json::Value
isMultineArray	monitor/json_writer.cpp	/^StyledStreamWriter::isMultineArray( const Value &value )$/;"	f	class:Json::StyledStreamWriter
isMultineArray	monitor/json_writer.cpp	/^StyledWriter::isMultineArray( const Value &value )$/;"	f	class:Json::StyledWriter
isNull	monitor/json_value.cpp	/^Value::isNull() const$/;"	f	class:Json::Value
isNull_	monitor/value.h	/^      bool isNull_;$/;"	m	class:Json::ValueIteratorBase
isNumeric	monitor/json_value.cpp	/^Value::isNumeric() const$/;"	f	class:Json::Value
isObject	monitor/json_value.cpp	/^Value::isObject() const$/;"	f	class:Json::Value
isOpen	KVideo/HikVideo.cpp	/^bool HikVideo::isOpen() {$/;"	f	class:HikVideo
isROV	package/ti_sdo_ce_examples_apps_armlivemedia.java	/^    boolean isROV;$/;"	f	class:ti_sdo_ce_examples_apps_armlivemedia
isStaticString	monitor/json_value.cpp	/^Value::CZString::isStaticString() const$/;"	f	class:Json::Value::CZString
isString	monitor/json_value.cpp	/^Value::isString() const$/;"	f	class:Json::Value
isUInt	monitor/json_value.cpp	/^Value::isUInt() const$/;"	f	class:Json::Value
isValidIndex	monitor/json_value.cpp	/^Value::isValidIndex( UInt index ) const$/;"	f	class:Json::Value
itemCount_	monitor/value.h	/^      BucketIndex itemCount_;$/;"	m	class:Json::ValueInternalMap
itemIndex_	monitor/value.h	/^         BucketIndex itemIndex_;$/;"	m	struct:Json::ValueInternalMap::IteratorState
itemPerLink	monitor/value.h	/^      enum { itemPerLink = 6 };  \/\/ sizeof(ValueInternalLink) = 128 on 32 bits architecture.$/;"	e	enum:Json::ValueInternalLink::__anon9
itemsPerPage	monitor/value.h	/^      enum { itemsPerPage = 8 };    \/\/ should be a power of 2 for fast divide and modulo.$/;"	e	enum:Json::ValueInternalArray::__anon10
items_	monitor/value.h	/^      Value items_[itemPerLink];$/;"	m	class:Json::ValueInternalLink
iterator	monitor/value.h	/^      typedef ValueIterator iterator;$/;"	t	class:Json::Value
iterator_	monitor/value.h	/^      } iterator_;$/;"	m	class:Json::ValueIteratorBase	typeref:union:Json::ValueIteratorBase::__anon11
joinConf	core/mtgClient.cpp	/^bool MtgClient::joinConf() {$/;"	f	class:MtgClient
joinThreadProc	core/mtgClient.cpp	/^void*  MtgClient::joinThreadProc(void* pParam)$/;"	f	class:MtgClient
kAlsaBufSizeMax	KVideo/audio/audio_capture.cpp	/^	const int kAlsaBufSizeMax = 65536;$/;"	m	namespace:__anon6	file:
kBytesPerFrame	KVideo/audio/codec_engine.cpp	/^	const int kBytesPerFrame = 640;	$/;"	m	namespace:__anon3	file:
kChunkSize	KVideo/audio/audio_capture.cpp	/^	const int kChunkSize      = 320;$/;"	m	namespace:__anon6	file:
kChunkSize	KVideo/audio/audio_playback.cpp	/^	const int kChunkSize   = 320;$/;"	m	namespace:__anon2	file:
kDeleteFrameCount	KVideo/audio/audio_mixer.cpp	/^	const int kDeleteFrameCount = 100; \/\/ 5s$/;"	m	namespace:__anon7	file:
kFalse	KVideo/audio/macrodef.h	/^const int kFalse = 0;$/;"	v
kFifoBufferCount	KVideo/audio/audio_mixer.cpp	/^	const int kFifoBufferCount = 500; \/\/ 20ms per frame$/;"	m	namespace:__anon7	file:
kFifoEnableSize	KVideo/audio/audio_mixer.cpp	/^	const int kFifoEnableSize  = 20;$/;"	m	namespace:__anon7	file:
kMapSize	KVideo/audio/codec_engine.cpp	/^	const int kMapSize = 0x1000000;		         \/\/ 16M$/;"	m	namespace:__anon3	file:
kMaxBufferSize	KVideo/audio/structdef.h	/^const int kMaxBufferSize = 3110400; \/\/ 1920*1080*3\/2$/;"	v
kMaxChannel	KVideo/audio/codec_engine.cpp	/^	const int kMaxChannel = 8;$/;"	m	namespace:__anon3	file:
kRTPPacketLen	KVideo/audio/codec_engine.cpp	/^	const int kRTPPacketLen  = 54;$/;"	m	namespace:__anon3	file:
kSPXBufferLen	KVideo/audio/codec_engine.cpp	/^	const int kSPXBufferLen  = 100; \/\/ 2s$/;"	m	namespace:__anon3	file:
kSampleRate	KVideo/audio/audio_capture.cpp	/^	const int kSampleRate     = 16000;$/;"	m	namespace:__anon6	file:
kSampleRate	KVideo/audio/audio_mixer.cpp	/^	const int kSampleRate = 16000;$/;"	m	namespace:__anon7	file:
kSampleRate	KVideo/audio/audio_playback.cpp	/^	const int kSampleRate  = 16000;$/;"	m	namespace:__anon2	file:
kSamplesPerFrame	KVideo/audio/audio_mixer.cpp	/^	const int kSamplesPerFrame = 320;$/;"	m	namespace:__anon7	file:
kTrue	KVideo/audio/macrodef.h	/^const int kTrue = 1;$/;"	v
kVideoDisplayBigScreen	KVideo/audio/macrodef.h	/^	kVideoDisplayBigScreen = kVideoDisplayDevice,$/;"	e	enum:eVideoDisplayDevice
kVideoDisplayBigScreenLeft	KVideo/audio/macrodef.h	/^	kVideoDisplayBigScreenLeft,$/;"	e	enum:eVideoDisplayDevice
kVideoDisplayBigScreenRight	KVideo/audio/macrodef.h	/^	kVideoDisplayBigScreenRight,$/;"	e	enum:eVideoDisplayDevice
kVideoDisplayDevice	KVideo/audio/macrodef.h	/^const int kVideoDisplayDevice = 0x10;$/;"	v
kVideoDisplayTV	KVideo/audio/macrodef.h	/^	kVideoDisplayTV$/;"	e	enum:eVideoDisplayDevice
kVideoSource	KVideo/audio/macrodef.h	/^const int kVideoSource = 0x0;$/;"	v
kVideoSourceCameraLeft	KVideo/audio/macrodef.h	/^	kVideoSourceCameraLeft,$/;"	e	enum:eVideoSource
kVideoSourceCameraRight	KVideo/audio/macrodef.h	/^	kVideoSourceCameraRight,$/;"	e	enum:eVideoSource
kVideoSourceNetCameraLeft	KVideo/audio/macrodef.h	/^	kVideoSourceNetCameraLeft,$/;"	e	enum:eVideoSource
kVideoSourceNetCameraRight	KVideo/audio/macrodef.h	/^	kVideoSourceNetCameraRight,$/;"	e	enum:eVideoSource
kVideoSourceNetStudent	KVideo/audio/macrodef.h	/^	kVideoSourceNetStudent,$/;"	e	enum:eVideoSource
kVideoSourceNetTeacher	KVideo/audio/macrodef.h	/^	kVideoSourceNetTeacher,$/;"	e	enum:eVideoSource
kVideoSourceNetVGA	KVideo/audio/macrodef.h	/^	kVideoSourceNetVGA$/;"	e	enum:eVideoSource
kVideoSourceStudent	KVideo/audio/macrodef.h	/^	kVideoSourceStudent,$/;"	e	enum:eVideoSource
kVideoSourceTeacher	KVideo/audio/macrodef.h	/^	kVideoSourceTeacher = kVideoSource,$/;"	e	enum:eVideoSource
kVideoSourceVGA	KVideo/audio/macrodef.h	/^	kVideoSourceVGA,$/;"	e	enum:eVideoSource
key_	monitor/value.h	/^      std::string key_;$/;"	m	class:Json::PathArgument
keys_	monitor/value.h	/^      char *keys_[itemPerLink];$/;"	m	class:Json::ValueInternalLink
kindIndex	monitor/value.h	/^         kindIndex,$/;"	e	enum:Json::PathArgument::Kind
kindKey	monitor/value.h	/^         kindKey$/;"	e	enum:Json::PathArgument::Kind
kindNone	monitor/value.h	/^         kindNone = 0,$/;"	e	enum:Json::PathArgument::Kind
kind_	monitor/value.h	/^      Kind kind_;$/;"	m	class:Json::PathArgument
lastValueEnd_	monitor/reader.h	/^      Location lastValueEnd_;$/;"	m	class:Json::Reader
lastValue_	monitor/reader.h	/^      Value *lastValue_;$/;"	m	class:Json::Reader
last_mix_adj	KVideo/audio/audio_mixer.h	/^	int last_mix_adj;			\/\/ last adjustment level$/;"	m	struct:__anon4
leaveAssistContol	Command/KernelBoardCommandHandle.cpp	/^BOOL KernelBoardCommandHandle::leaveAssistContol() {$/;"	f	class:KernelBoardCommandHandle
leaveConf	core/mtgClient.cpp	/^bool MtgClient::leaveConf() {$/;"	f	class:MtgClient
len	core/shareMem.h	/^	int	 len;$/;"	m	struct:stShareMem
len	liveCourse/livemtgConstDefine.h	/^	int len;														\/\/长度，包括头$/;"	m	struct:tagLiveMtgHeader
length	KVideo/audio/rtpstruct.h	/^	uint16_t length;$/;"	m	struct:RTPExtensionHeader
length	KVideo/audio/structdef.h	/^	int   length;$/;"	m	struct:stbufferflag
length	KVideo/audio/structdef.h	/^	int  length;$/;"	m	struct:stsendinfor
length	KVideo/captureVideoDefines.h	/^	unsigned int length;$/;"	m	struct:buf_info
level	KVideo/audio/audio_mixer.h	/^	int level;$/;"	m	struct:__anon4
level	KVideo/audio/audio_mixer.h	/^	stAudioMixLevel* level;$/;"	m	struct:__anon5
link_	monitor/value.h	/^         ValueInternalLink *link_;$/;"	m	struct:Json::ValueInternalMap::IteratorState
listenerList	KVideo/audio/iaudio.h	/^typedef std::list<iaudio*>   listenerList;$/;"	t
liveRoomID	liveCourse/livemtgConstDefine.h	/^	char liveRoomID[LIVEMTG_ROOM_ID_LEN];							\/\/直播课堂RoomID$/;"	m	struct:tagLiveMtgClassStatus
liveRoomID	liveCourse/livemtgConstDefine.h	/^	char liveRoomID[LIVEMTG_ROOM_ID_LEN];$/;"	m	struct:tagLiveMtgCourse
loadBackImage	kernel.cpp	/^bool Kernel::loadBackImage(int videoWidth, int videoHeight) {$/;"	f	class:Kernel
loadFunc	core/rtmpHandle.cpp	/^bool RtmpHandle::loadFunc() {$/;"	f	class:RtmpHandle
loadHeadPic	kernel.cpp	/^bool Kernel::loadHeadPic(int outWidth, int outHeight) {$/;"	f	class:Kernel
loadHikFunc	hikFunc.cpp	/^bool loadHikFunc() {$/;"	f
loadMtgFunc	mtgFunc.cpp	/^bool loadMtgFunc() {$/;"	f
loadTailPic	kernel.cpp	/^bool Kernel::loadTailPic(int outWidth, int outHeight) {$/;"	f	class:Kernel
loadVideoCourseInfo	kernel.cpp	/^bool Kernel::loadVideoCourseInfo(int outWidth, int outHeight) {$/;"	f	class:Kernel
localPipe	core/OMXCommonDef.h	/^  OMX_S32 localPipe[2];$/;"	m	struct:tagComponentWrapper
lock	core/Mutex.cpp	/^void Mutex::lock() {$/;"	f	class:Mutex
loggables	package/ti_sdo_ce_examples_apps_armlivemedia.java	/^    ArrayList<Object> loggables = new ArrayList<Object>();$/;"	f	class:ti_sdo_ce_examples_apps_armlivemedia
m_AudioChannels	core/rtmpHandle.h	/^	int			m_AudioChannels;$/;"	m	class:RtmpHandle
m_AudioSampleBit	core/rtmpHandle.h	/^	int			m_AudioSampleBit;$/;"	m	class:RtmpHandle
m_AudioSem	core/rtmpHandle.h	/^	semp_t 			m_AudioSem;$/;"	m	class:RtmpHandle
m_AudioframePool	core/rtmpHandle.h	/^	FrameBufferPool m_AudioframePool;$/;"	m	class:RtmpHandle
m_BPIPInfo	setting.h	/^	BPIPINFO		m_BPIPInfo;$/;"	m	class:Setting
m_CmdData1	Command/KernelBoardCommandHandle.h	/^	IC2CMD_Data1 m_CmdData1;$/;"	m	class:KernelBoardCommandHandle
m_CmdData2	Command/KernelBoardCommandHandle.h	/^	IC2CMD_Data2 m_CmdData2;$/;"	m	class:KernelBoardCommandHandle
m_CmdHeader	Command/AssistCommandHandle.h	/^	IC2CMD_Header m_CmdHeader;$/;"	m	class:AssistCommandHandle
m_CmdHeader	Command/KernelBoardCommandHandle.h	/^	IC2CMD_Header m_CmdHeader;$/;"	m	class:KernelBoardCommandHandle
m_CmdID	Command/KernelBoardCommandHandle.h	/^	IC2CMD_CmdID m_CmdID;$/;"	m	class:KernelBoardCommandHandle
m_EFRAMESIZE	core/audioEncodeFAAC.h	/^	int m_EFRAMESIZE;$/;"	m	class:AudioEncodeFAAC
m_EngineAttrs	core/audioEncodeFAAC.h	/^    Engine_Attrs  m_EngineAttrs;$/;"	m	class:AudioEncodeFAAC
m_Event_Pipe	core/audioEncodeOMX.h	/^	OMX_S32 m_Event_Pipe[2];$/;"	m	class:AudioEncodeOMX
m_ExitTimer	core/mixtureMode_IPC.h	/^	Timer m_ExitTimer;$/;"	m	class:MixtureMode_IPC
m_ExitTimer	core/mixtureMode_SDI.h	/^	Timer m_ExitTimer;$/;"	m	class:MixtureMode_SDI
m_ExitTimerValid	core/mixtureMode_IPC.h	/^	bool  m_ExitTimerValid;$/;"	m	class:MixtureMode_IPC
m_ExitTimerValid	core/mixtureMode_SDI.h	/^	bool  m_ExitTimerValid;$/;"	m	class:MixtureMode_SDI
m_IFRAMESIZE	core/audioEncodeFAAC.h	/^	int m_IFRAMESIZE;$/;"	m	class:AudioEncodeFAAC
m_IPCChannel	KVideo/streamVideoManager.h	/^	PRChannel	 m_IPCChannel;$/;"	m	class:StreamVideoManager
m_IPCChannel	core/mixtureMode_SDI.h	/^	PRChannel	 m_IPCChannel;$/;"	m	class:MixtureMode_SDI
m_IPCChannel	liveCourse/subVideoManager.h	/^	PRChannel	 m_IPCChannel;$/;"	m	class:SubVideoManager
m_IPCChannel	setting.h	/^	PRChannel	 m_IPCChannel; \/**< this index is for m_IPCINfo*\/$/;"	m	class:Setting
m_IPCChannelMutex	KVideo/streamVideoManager.h	/^	Mutex		 m_IPCChannelMutex;$/;"	m	class:StreamVideoManager
m_IPCChannelMutex	core/mixtureMode_SDI.h	/^	Mutex		 m_IPCChannelMutex;$/;"	m	class:MixtureMode_SDI
m_IPCInfo	setting.h	/^	IPCInfo		 m_IPCInfo[MAX_IPC];$/;"	m	class:Setting
m_IpBuf_Pipe	core/audioEncodeOMX.h	/^	OMX_S32 m_IpBuf_Pipe[2];$/;"	m	class:AudioEncodeOMX
m_LiveState	Command/AssistCommandHandle.h	/^	LiveState		m_LiveState;$/;"	m	class:AssistCommandHandle
m_MtgSem	web/modelStatus.h	/^	sem_t	m_MtgSem;$/;"	m	class:ModelStatus
m_NSAMPLES	core/audioEncodeFAAC.h	/^	int m_NSAMPLES;$/;"	m	class:AudioEncodeFAAC
m_OFRAMESIZE	core/audioEncodeFAAC.h	/^	int m_OFRAMESIZE;$/;"	m	class:AudioEncodeFAAC
m_OldIPCChannel	KVideo/streamVideoManager.h	/^	PRChannel	 m_OldIPCChannel;$/;"	m	class:StreamVideoManager
m_OldIPCChannel	core/mixtureMode_SDI.h	/^	PRChannel	 m_OldIPCChannel;$/;"	m	class:MixtureMode_SDI
m_OpBuf_Pipe	core/audioEncodeOMX.h	/^	OMX_S32 m_OpBuf_Pipe[2];$/;"	m	class:AudioEncodeOMX
m_PPTConfig	Command/AssistCommandHandle.h	/^	PPTConfig		m_PPTConfig;$/;"	m	class:AssistCommandHandle
m_PRstate	liveMediaState.h	/^	PRState			m_PRstate;$/;"	m	class:StateHandle
m_RecordModeHandle	kernel.h	/^	BaseMode*		m_RecordModeHandle;$/;"	m	class:Kernel
m_ResumeTimer	core/mixtureMode_IPC.h	/^	Timer			m_ResumeTimer; \/**< when state from pause to resume, it delay sometime to copy frame*\/$/;"	m	class:MixtureMode_IPC
m_ResumeTimer	core/mixtureMode_SDI.h	/^	Timer			m_ResumeTimer; \/**< when state from pause to resume, it delay sometime to copy frame*\/$/;"	m	class:MixtureMode_SDI
m_ResumeTimerValid	core/mixtureMode_IPC.h	/^	bool			m_ResumeTimerValid;\/**< when it is true, then do not copy *\/$/;"	m	class:MixtureMode_IPC
m_ResumeTimerValid	core/mixtureMode_SDI.h	/^	bool			m_ResumeTimerValid;\/**< when it is true, then do not copy *\/$/;"	m	class:MixtureMode_SDI
m_RtmpSem	web/modelStatus.h	/^	sem_t 	m_RtmpSem;$/;"	m	class:ModelStatus
m_SDIDEIComponent	core/resourceMode_SDI.h	/^	ComponentWrapper *m_SDIDEIComponent[KMaxSDICount];$/;"	m	class:ResourceModeHandle_SDI
m_SDIDEIParams	core/resourceMode_SDI.h	/^	stConnInConnOutThreadArgs m_SDIDEIParams[2];$/;"	m	class:ResourceModeHandle_SDI
m_SDIEncComponent	core/resourceMode_SDI.h	/^	ComponentWrapper *m_SDIEncComponent[KMaxSDICount];$/;"	m	class:ResourceModeHandle_SDI
m_SDIEncParams	core/resourceMode_SDI.h	/^	stConnInConnOutThreadArgs m_SDIEncParams[2];$/;"	m	class:ResourceModeHandle_SDI
m_ShareMem	core/shareMem.h	/^	stShareMem	m_ShareMem[KShareMemCount];$/;"	m	class:ShareMemManager
m_ShareMutex	core/shareMem.h	/^	Mutex		m_ShareMutex;$/;"	m	class:ShareMemManager
m_Udp	Command/AssistCommandHandle.h	/^	Udp 	m_Udp;$/;"	m	class:AssistCommandHandle
m_Udp	Command/KernelBoardCommandHandle.h	/^	Udp 	m_Udp;$/;"	m	class:KernelBoardCommandHandle
m_VGAEncComponent	core/resourceMode_SDI.h	/^	ComponentWrapper *m_VGAEncComponent;$/;"	m	class:ResourceModeHandle_SDI
m_VGAH264fd	core/mixtureMode_SDI.h	/^	int	  m_VGAH264fd;$/;"	m	class:MixtureMode_SDI
m_VideoSem	core/rtmpHandle.h	/^	semp_t			m_VideoSem;$/;"	m	class:RtmpHandle
m_VideoframePool	core/rtmpHandle.h	/^	FrameBufferPool m_VideoframePool;$/;"	m	class:RtmpHandle
m_aacBitRate	core/audioEncodeFAAC.h	/^	int		m_aacBitRate;$/;"	m	class:AudioEncodeFAAC
m_aacBitRate	core/audioEncodeOMX.h	/^	int		m_aacBitRate;$/;"	m	class:AudioEncodeOMX
m_aacBitRate	setting.h	/^	int			m_aacBitRate;$/;"	m	class:Setting
m_aacfd	core/mixtureMode_IPC.h	/^	int		m_aacfd;$/;"	m	class:MixtureMode_IPC
m_aacfd	core/mixtureMode_SDI.h	/^	int	  m_aacfd;$/;"	m	class:MixtureMode_SDI
m_aacfd	core/resourceMode_IPC.h	/^	int	 m_aacfd;$/;"	m	class:ResourceModeHandle_IPC
m_accParam	setting.h	/^	PRACCParam	m_accParam;$/;"	m	class:Setting
m_after	core/v4lDisplay.h	/^	long long m_after;$/;"	m	class:DisplayHandle
m_afttime	core/movieHeaderTail.h	/^	long long m_afttime;$/;"	m	class:MovieHeaderTail
m_allocParams	core/audioEncodeFAAC.h	/^    Memory_AllocParams m_allocParams;$/;"	m	class:AudioEncodeFAAC
m_assistcommandHandle	kernel.h	/^	AssistCommandHandle   m_assistcommandHandle;$/;"	m	class:Kernel
m_audioBuf	KVideo/audioCapture.h	/^	unsigned char* m_audioBuf;$/;"	m	class:AudioCapture
m_audioBuf	core/audioEncodeFAAC.h	/^	unsigned char* m_audioBuf;$/;"	m	class:AudioEncodeFAAC
m_audioCapture	kernel.h	/^	AudioCapture m_audioCapture;$/;"	m	class:Kernel
m_audioCounts	core/rtmpHandle.h	/^	unsigned int m_audioCounts;$/;"	m	class:RtmpHandle
m_audioDelayFrames	setting.h	/^	int 			m_audioDelayFrames;$/;"	m	class:Setting
m_audioEncHandle	core/audioEncodeFAAC.h	/^    AUDENC_Handle m_audioEncHandle;$/;"	m	class:AudioEncodeFAAC
m_audioFrameCount	core/rtmpHandle.h	/^	int				m_audioFrameCount;$/;"	m	class:RtmpHandle
m_audioPlayback	kernel.h	/^	audio_playback m_audioPlayback;$/;"	m	class:Kernel
m_audioSampleRate	setting.h	/^	int			m_audioSampleRate;	\/**< 音频的采样率 *\/$/;"	m	class:Setting
m_audioSamplerate	core/rtmpHandle.h	/^	int m_audioSamplerate;$/;"	m	class:RtmpHandle
m_audioThreadAttr	core/mtgClient.h	/^	pthread_attr_t m_audioThreadAttr;$/;"	m	class:MtgClient
m_audioThreadExitSem	core/mtgClient.h	/^	sem_t m_audioThreadExitSem;$/;"	m	class:MtgClient
m_audioThreadId	core/mtgClient.h	/^	pthread_t m_audioThreadId;$/;"	m	class:MtgClient
m_bAutoDeleteFiles	setting.h	/^	bool			m_bAutoDeleteFiles;$/;"	m	class:Setting
m_bAutoUploadFile	setting.h	/^	bool			m_bAutoUploadFile;$/;"	m	class:Setting
m_bBackCamera1Connect	web/modelStatus.h	/^	bool	m_bBackCamera1Connect;$/;"	m	class:ModelStatus
m_bBackCamera1Valid	web/modelStatus.h	/^	bool	m_bBackCamera1Valid;$/;"	m	class:ModelStatus
m_bBackCamera2Connect	web/modelStatus.h	/^	bool	m_bBackCamera2Connect;$/;"	m	class:ModelStatus
m_bBackCamera2Valid	web/modelStatus.h	/^	bool	m_bBackCamera2Valid;$/;"	m	class:ModelStatus
m_bCameraStudent1Connect	web/modelStatus.h	/^	bool	m_bCameraStudent1Connect;$/;"	m	class:ModelStatus
m_bCameraStudent1Valid	web/modelStatus.h	/^	bool	m_bCameraStudent1Valid;$/;"	m	class:ModelStatus
m_bCameraStudent2Connect	web/modelStatus.h	/^	bool	m_bCameraStudent2Connect;$/;"	m	class:ModelStatus
m_bCameraStudent2Valid	web/modelStatus.h	/^	bool	m_bCameraStudent2Valid;$/;"	m	class:ModelStatus
m_bCameraTeacher1Connect	web/modelStatus.h	/^	bool	m_bCameraTeacher1Connect;$/;"	m	class:ModelStatus
m_bCameraTeacher1Valid	web/modelStatus.h	/^	bool	m_bCameraTeacher1Valid;$/;"	m	class:ModelStatus
m_bCameraTeacher2Connect	web/modelStatus.h	/^	bool	m_bCameraTeacher2Connect;$/;"	m	class:ModelStatus
m_bCameraTeacher2Valid	web/modelStatus.h	/^	bool 	m_bCameraTeacher2Valid;$/;"	m	class:ModelStatus
m_bChannelChangedTimerValid	core/mixtureMode_IPC.h	/^	bool	m_bChannelChangedTimerValid;$/;"	m	class:MixtureMode_IPC
m_bControlSwitchScene	core/mixtureMode_IPC.h	/^	bool		m_bControlSwitchScene;$/;"	m	class:MixtureMode_IPC
m_bCouldExit	core/mixtureMode_IPC.h	/^	bool	m_bCouldExit;$/;"	m	class:MixtureMode_IPC
m_bCouldExit	core/mixtureMode_SDI.h	/^	bool	m_bCouldExit;$/;"	m	class:MixtureMode_SDI
m_bDetailValid	web/modelStatus.h	/^	bool	m_bDetailValid;$/;"	m	class:ModelStatus
m_bDirectCopyChannel1	core/mixtureMode_SDI.h	/^	bool			m_bDirectCopyChannel1;$/;"	m	class:MixtureMode_SDI
m_bDirectCopyChannel2	core/mixtureMode_SDI.h	/^	bool			m_bDirectCopyChannel2;$/;"	m	class:MixtureMode_SDI
m_bDualScreenCrop	setting.h	/^	bool			m_bDualScreenCrop; \/**< 双画面裁剪 *\/$/;"	m	class:Setting
m_bEncodeQulityEnable	setting.h	/^	bool			m_bEncodeQulityEnable;$/;"	m	class:Setting
m_bExit	Command/KernelBoardCommandHandle.h	/^	BOOL m_bExit;$/;"	m	class:KernelBoardCommandHandle
m_bExit	Command/udp.h	/^	bool m_bExit;$/;"	m	class:Udp
m_bExit	KVideo/captureSDIVideo.h	/^	bool 	m_bExit;$/;"	m	class:CaptureSDI
m_bExit	KVideo/captureVga.h	/^	bool 	m_bExit;$/;"	m	class:CaptureVGA
m_bExit	core/Mp4Player.h	/^	bool 	m_bExit;$/;"	m	class:Mp4FilePlayer
m_bExit	core/audioEncodeFAAC.h	/^	BOOL m_bExit;$/;"	m	class:AudioEncodeFAAC
m_bExit	core/audioEncodeOMX.h	/^	BOOL m_bExit;$/;"	m	class:AudioEncodeOMX
m_bExit	core/mixtureMode_IPC.h	/^	bool 	m_bExit;$/;"	m	class:MixtureMode_IPC
m_bExit	core/mixtureMode_SDI.h	/^	bool 	m_bExit;$/;"	m	class:MixtureMode_SDI
m_bExit	core/movieHeaderTail.h	/^	BOOL m_bExit;$/;"	m	class:MovieHeaderTail
m_bExit	core/resourceMode_IPC.h	/^	bool 	m_bExit;$/;"	m	class:ResourceModeHandle_IPC
m_bExit	core/resourceMode_SDI.h	/^	bool 	m_bExit;$/;"	m	class:ResourceModeHandle_SDI
m_bExitCourse	liveCourse/courseWxManager.h	/^	bool m_bExitCourse;$/;"	m	class:CourseWxManager
m_bExitDecodeThread	core/mixtureMode_IPC.h	/^	bool 	m_bExitDecodeThread;$/;"	m	class:MixtureMode_IPC
m_bExitHeadTailScaleThread	core/mixtureMode_IPC.h	/^	bool	m_bExitHeadTailScaleThread;$/;"	m	class:MixtureMode_IPC
m_bExitHeadTailScaleThread	core/mixtureMode_SDI.h	/^	bool	m_bExitHeadTailScaleThread;$/;"	m	class:MixtureMode_SDI
m_bExitMixtureThread	core/mixtureMode_IPC.h	/^	bool	m_bExitMixtureThread;$/;"	m	class:MixtureMode_IPC
m_bExitMixtureThread	core/mixtureMode_SDI.h	/^	bool	m_bExitMixtureThread;$/;"	m	class:MixtureMode_SDI
m_bExitPcmReadThread	KVideo/audioCapture.h	/^	bool m_bExitPcmReadThread;$/;"	m	class:AudioCapture
m_bExitPcmReadThread	core/audioEncodeFAAC.h	/^	BOOL m_bExitPcmReadThread;$/;"	m	class:AudioEncodeFAAC
m_bExitThread	KVideo/vgaProviderSystem.h	/^	bool 	m_bExitThread;$/;"	m	class:VGAProviderSystem
m_bExitVGAEncodeThread	KVideo/vgaProviderSystem.h	/^	bool 	m_bExitVGAEncodeThread;$/;"	m	class:VGAProviderSystem
m_bExitVGAEncodeThread	core/mixtureMode_SDI.h	/^	bool	m_bExitVGAEncodeThread;$/;"	m	class:MixtureMode_SDI
m_bExitVGAScaleThread	core/mixtureMode_IPC.h	/^	bool 	m_bExitVGAScaleThread;$/;"	m	class:MixtureMode_IPC
m_bExitVGAScaleThread	core/mixtureMode_SDI.h	/^	bool 	m_bExitVGAScaleThread;$/;"	m	class:MixtureMode_SDI
m_bFreezeVGA	KVideo/vgaProviderSystem.h	/^	bool m_bFreezeVGA;$/;"	m	class:VGAProviderSystem
m_bGetHeader	core/Mp4Player.h	/^	bool 			m_bGetHeader;$/;"	m	class:Mp4FilePlayer
m_bHDMIDisplayEnable	setting.h	/^	bool			m_bHDMIDisplayEnable;$/;"	m	class:Setting
m_bHeadEnable	liveMediaState.h	/^	BOOL 			m_bHeadEnable;$/;"	m	class:StateHandle
m_bHeadState	core/mixtureMode_IPC.h	/^	bool 	m_bHeadState;$/;"	m	class:MixtureMode_IPC
m_bHeadState	core/mixtureMode_SDI.h	/^	bool 	m_bHeadState;$/;"	m	class:MixtureMode_SDI
m_bHeaderEnable	setting.h	/^	bool 		m_bHeaderEnable;$/;"	m	class:Setting
m_bHeartbeat	core/mtgInit.h	/^	bool m_bHeartbeat;$/;"	m	class:MtgHeartbeat
m_bIPCChannelChanged	core/mixtureMode_SDI.h	/^	bool		 m_bIPCChannelChanged;$/;"	m	class:MixtureMode_SDI
m_bInited	Command/udp.h	/^	bool m_bInited;$/;"	m	class:Udp
m_bInited	KVideo/audioCapture.h	/^	bool m_bInited;$/;"	m	class:AudioCapture
m_bInited	KVideo/captureSDIVideo.h	/^	bool 	m_bInited;$/;"	m	class:CaptureSDI
m_bInited	KVideo/captureVga.h	/^	bool 	m_bInited;$/;"	m	class:CaptureVGA
m_bInited	KVideo/vgaProviderSystem.h	/^	bool m_bInited;$/;"	m	class:VGAProviderSystem
m_bInited	core/HDMIDisplayManager.h	/^	bool m_bInited;$/;"	m	class:HDMIDisplayManager
m_bInited	core/audioEncodeFAAC.h	/^	bool m_bInited;$/;"	m	class:AudioEncodeFAAC
m_bInited	core/audioEncodeOMX.h	/^	bool m_bInited;$/;"	m	class:AudioEncodeOMX
m_bInited	core/mixtureMode_IPC.h	/^	bool m_bInited;$/;"	m	class:MixtureMode_IPC
m_bInited	core/mixtureMode_SDI.h	/^	bool m_bInited;$/;"	m	class:MixtureMode_SDI
m_bInited	core/mtgClient.h	/^	bool m_bInited;$/;"	m	class:MtgClient
m_bInited	core/resourceMode_IPC.h	/^	bool m_bInited;$/;"	m	class:ResourceModeHandle_IPC
m_bInited	core/resourceMode_SDI.h	/^	bool m_bInited;$/;"	m	class:ResourceModeHandle_SDI
m_bInited	core/rtmpHandle.h	/^	bool	m_bInited;$/;"	m	class:RtmpHandle
m_bInited	kernel.h	/^	bool m_bInited;$/;"	m	class:Kernel
m_bInited	monitor/monitorSender.h	/^	bool	m_bInited;$/;"	m	class:MonitorSender
m_bInited	timer.h	/^	bool	m_bInited;$/;"	m	class:Timer
m_bInited	utils/vgaState.h	/^	bool	m_bInited;$/;"	m	class:VGAStateHandle
m_bInitedSucess	core/v4lDisplay.h	/^	bool	m_bInitedSucess;$/;"	m	class:DisplayHandle
m_bIsInit	Command/AssistCommandHandle.h	/^	bool 	 m_bIsInit;$/;"	m	class:AssistCommandHandle
m_bIsInit	Command/KernelBoardCommandHandle.h	/^	BOOL m_bIsInit;$/;"	m	class:KernelBoardCommandHandle
m_bLCLive	core/rtmpManager.h	/^	bool m_bLCLive;$/;"	m	class:RtmpManager
m_bLCSendResourceEnable	setting.h	/^	bool		m_bLCSendResourceEnable; \/\/LC short for LiveCourse$/;"	m	class:Setting
m_bLiveCourseConnect	web/modelStatus.h	/^	bool	m_bLiveCourseConnect;$/;"	m	class:ModelStatus
m_bLiveCourseValid	web/modelStatus.h	/^	bool	m_bLiveCourseValid;$/;"	m	class:ModelStatus
m_bLiveEncEnable	setting.h	/^	bool 			m_bLiveEncEnable;$/;"	m	class:Setting
m_bLiveEncHighProfile	setting.h	/^	bool			m_bLiveEncHighProfile;$/;"	m	class:Setting
m_bMediaInitialize	liveMediaState.h	/^	BOOL 			m_bMediaInitialize;$/;"	m	class:StateHandle
m_bMixRemoteEnable	KVideo/audio/codec_engine.h	/^	bool						m_bMixRemoteEnable;$/;"	m	class:codec_engine
m_bMountSharePath	Command/AssistCommandHandle.h	/^	bool	m_bMountSharePath;$/;"	m	class:AssistCommandHandle
m_bMtgConnect	web/modelStatus.h	/^	bool	m_bMtgConnect;$/;"	m	class:ModelStatus
m_bMtgEnable	setting.h	/^	bool		m_bMtgEnable;$/;"	m	class:Setting
m_bMtgValid	web/modelStatus.h	/^	bool	m_bMtgValid;$/;"	m	class:ModelStatus
m_bNeedReconnect	core/rtmpHandle.h	/^	bool  m_bNeedReconnect;$/;"	m	class:RtmpHandle
m_bNextVideo	core/rtmpHandle.h	/^	bool m_bNextVideo;$/;"	m	class:RtmpHandle
m_bNotifyVGAChangeEnable	setting.h	/^	bool			m_bNotifyVGAChangeEnable;$/;"	m	class:Setting
m_bPCMNonBlock	KVideo/audioCapture.h	/^	bool m_bPCMNonBlock;$/;"	m	class:AudioCapture
m_bPCMNonBlock	core/audioEncodeFAAC.h	/^	bool m_bPCMNonBlock;$/;"	m	class:AudioEncodeFAAC
m_bPCMNonBlock	setting.h	/^	bool		m_bPCMNonBlock;$/;"	m	class:Setting
m_bPaused	core/mixtureMode_IPC.h	/^	bool 		m_bPaused;$/;"	m	class:MixtureMode_IPC
m_bPaused	core/mixtureMode_SDI.h	/^	bool 		m_bPaused;$/;"	m	class:MixtureMode_SDI
m_bPaused	core/resourceMode_IPC.h	/^	bool 		m_bPaused;$/;"	m	class:ResourceModeHandle_IPC
m_bPaused	core/resourceMode_SDI.h	/^	bool 		m_bPaused;$/;"	m	class:ResourceModeHandle_SDI
m_bPersistent	timer.h	/^	bool m_bPersistent;$/;"	m	class:Timer
m_bPowerOff	liveMediaState.h	/^	BOOL 			m_bPowerOff;$/;"	m	class:StateHandle
m_bPreExchangeImageValid	core/mixtureMode_IPC.h	/^	bool	  m_bPreExchangeImageValid;$/;"	m	class:MixtureMode_IPC
m_bPreExchangeImageValid	core/mixtureMode_SDI.h	/^	bool	  m_bPreExchangeImageValid;$/;"	m	class:MixtureMode_SDI
m_bRTMPConnect	web/modelStatus.h	/^	bool	m_bRTMPConnect;$/;"	m	class:ModelStatus
m_bRTMPValid	web/modelStatus.h	/^	bool	m_bRTMPValid;$/;"	m	class:ModelStatus
m_bReadyCourseOver	kernel.h	/^	bool 	m_bReadyCourseOver;$/;"	m	class:Kernel
m_bReadyCourseOver	liveMediaState.h	/^	BOOL 			m_bReadyCourseOver;$/;"	m	class:StateHandle
m_bRoomIDValid	setting.h	/^	bool		m_bRoomIDValid;$/;"	m	class:Setting
m_bRtmpEnable	setting.h	/^	bool 		m_bRtmpEnable;$/;"	m	class:Setting
m_bSendLCMediaType	liveCourse/courseWxManager.h	/^	bool	m_bSendLCMediaType[eLCMediaTypeCount];$/;"	m	class:CourseWxManager
m_bStart	core/v4lDisplay.h	/^	bool m_bStart;$/;"	m	class:DisplayHandle
m_bStartCaptureVGASucess	KVideo/vgaProviderSystem.h	/^	bool	m_bStartCaptureVGASucess;$/;"	m	class:VGAProviderSystem
m_bStudContainTeacher	core/mixtureMode_IPC.h	/^	bool   m_bStudContainTeacher;$/;"	m	class:MixtureMode_IPC
m_bStudContainTeacher	core/mixtureMode_SDI.h	/^	bool   m_bStudContainTeacher;$/;"	m	class:MixtureMode_SDI
m_bStudContainVGA	core/mixtureMode_IPC.h	/^	bool   m_bStudContainVGA;$/;"	m	class:MixtureMode_IPC
m_bStudContainVGA	core/mixtureMode_SDI.h	/^	bool   m_bStudContainVGA;$/;"	m	class:MixtureMode_SDI
m_bStudentChannelChanged	KVideo/streamVideoManager.h	/^	bool		 m_bStudentChannelChanged;$/;"	m	class:StreamVideoManager
m_bStudentChannelNormal	core/mixtureMode_SDI.h	/^	bool		 m_bStudentChannelNormal;$/;"	m	class:MixtureMode_SDI
m_bTailState	core/mixtureMode_IPC.h	/^	bool	m_bTailState;$/;"	m	class:MixtureMode_IPC
m_bTailState	core/mixtureMode_SDI.h	/^	bool	m_bTailState;$/;"	m	class:MixtureMode_SDI
m_bTailState	core/resourceMode_SDI.h	/^	bool		m_bTailState;$/;"	m	class:ResourceModeHandle_SDI
m_bTeacherChannelChanged	KVideo/streamVideoManager.h	/^	bool		 m_bTeacherChannelChanged;$/;"	m	class:StreamVideoManager
m_bTeacherChannelNormal	core/mixtureMode_SDI.h	/^	bool		 m_bTeacherChannelNormal;$/;"	m	class:MixtureMode_SDI
m_bTeacherContainStud	core/mixtureMode_IPC.h	/^	bool   m_bTeacherContainStud; \/**< *\/$/;"	m	class:MixtureMode_IPC
m_bTeacherContainStud	core/mixtureMode_SDI.h	/^	bool   m_bTeacherContainStud; \/**< *\/$/;"	m	class:MixtureMode_SDI
m_bTeacherContainVGA	core/mixtureMode_IPC.h	/^	bool   m_bTeacherContainVGA;$/;"	m	class:MixtureMode_IPC
m_bTeacherContainVGA	core/mixtureMode_SDI.h	/^	bool   m_bTeacherContainVGA;$/;"	m	class:MixtureMode_SDI
m_bThreadStart	core/audioEncodeFAAC.h	/^	bool		m_bThreadStart;$/;"	m	class:AudioEncodeFAAC
m_bThreadStart	core/audioEncodeOMX.h	/^	bool		m_bThreadStart;$/;"	m	class:AudioEncodeOMX
m_bThreadsStart	core/mixtureMode_IPC.h	/^	bool 	m_bThreadsStart;$/;"	m	class:MixtureMode_IPC
m_bThreadsStart	core/mixtureMode_SDI.h	/^	bool m_bThreadsStart;$/;"	m	class:MixtureMode_SDI
m_bThreadsStart	core/resourceMode_SDI.h	/^	bool m_bThreadsStart;$/;"	m	class:ResourceModeHandle_SDI
m_bTimerValid	core/HDMIDisplayManager.h	/^	bool m_bTimerValid;$/;"	m	class:HDMIDisplayManager
m_bTimerValid	core/rtmpHandle.h	/^	bool  m_bTimerValid;$/;"	m	class:RtmpHandle
m_bTimerValid	liveCourse/classWxManager.h	/^	bool	m_bTimerValid;$/;"	m	class:ClassWxManager
m_bTimerValid	liveCourse/courseWxManager.h	/^	bool	m_bTimerValid;$/;"	m	class:CourseWxManager
m_bUpHalfInited	core/mixtureMode_IPC.h	/^	bool	m_bUpHalfInited;$/;"	m	class:MixtureMode_IPC
m_bUpHalfInited	core/mixtureMode_SDI.h	/^	bool	m_bUpHalfInited;$/;"	m	class:MixtureMode_SDI
m_bVGAContainStud	core/mixtureMode_IPC.h	/^	bool   m_bVGAContainStud;$/;"	m	class:MixtureMode_IPC
m_bVGAContainStud	core/mixtureMode_SDI.h	/^	bool   m_bVGAContainStud;$/;"	m	class:MixtureMode_SDI
m_bVGAContainTeacher	core/mixtureMode_IPC.h	/^	bool   m_bVGAContainTeacher;$/;"	m	class:MixtureMode_IPC
m_bVGAContainTeacher	core/mixtureMode_SDI.h	/^	bool   m_bVGAContainTeacher;$/;"	m	class:MixtureMode_SDI
m_bVGADisplayEnable	setting.h	/^	bool			m_bVGADisplayEnable;$/;"	m	class:Setting
m_bVGAEncodeEnable	setting.h	/^	bool 		m_bVGAEncodeEnable;$/;"	m	class:Setting
m_bVGAFreeze	core/baseMode.h	/^	bool m_bVGAFreeze;$/;"	m	class:BaseMode
m_bVGASwitchOldPanel	setting.h	/^	bool			m_bVGASwitchOldPanel; \/**< VGA是否老面板切换*\/$/;"	m	class:Setting
m_bVGAUnder768	KVideo/vgaProviderSystem.h	/^	bool 	 m_bVGAUnder768;$/;"	m	class:VGAProviderSystem
m_bVideoCenterConnect	web/modelStatus.h	/^	bool	m_bVideoCenterConnect;$/;"	m	class:ModelStatus
m_bVideoCenterValid	web/modelStatus.h	/^	bool	m_bVideoCenterValid;$/;"	m	class:ModelStatus
m_bWaitVGAFreezeSwitchScene	core/mixtureMode_IPC.h	/^	bool 	m_bWaitVGAFreezeSwitchScene;$/;"	m	class:MixtureMode_IPC
m_backTImage	core/mixtureMode_SDI.h	/^	unsigned char*  m_backTImage; \/**< only teacher or student,or vga*\/$/;"	m	class:MixtureMode_SDI
m_backTImagePhyAddr	core/mixtureMode_SDI.h	/^	OMX_PTR			m_backTImagePhyAddr;$/;"	m	class:MixtureMode_SDI
m_backTSImage	core/mixtureMode_SDI.h	/^	unsigned char*	m_backTSImage; \/**< only teacher and student*\/$/;"	m	class:MixtureMode_SDI
m_backTSImagePhyAddr	core/mixtureMode_SDI.h	/^	OMX_PTR			m_backTSImagePhyAddr;$/;"	m	class:MixtureMode_SDI
m_backTSVImage	core/mixtureMode_SDI.h	/^	unsigned char*	m_backTSVImage; \/**< both teacher and student and vga *\/$/;"	m	class:MixtureMode_SDI
m_backTSVImagePhyAddr	core/mixtureMode_SDI.h	/^	OMX_PTR		m_backTSVImagePhyAddr;$/;"	m	class:MixtureMode_SDI
m_backTVImage	core/mixtureMode_SDI.h	/^	unsigned char*	m_backTVImage; \/**< only teacher and vga or only student and vga *\/$/;"	m	class:MixtureMode_SDI
m_backTVImagePhyAddr	core/mixtureMode_SDI.h	/^	OMX_PTR			m_backTVImagePhyAddr;$/;"	m	class:MixtureMode_SDI
m_bcheckAudioSyncEnable	core/mixtureMode_SDI.h	/^	bool  m_bcheckAudioSyncEnable;$/;"	m	class:MixtureMode_SDI
m_before	core/v4lDisplay.h	/^	long long m_before;$/;"	m	class:DisplayHandle
m_beftime	core/movieHeaderTail.h	/^	long long m_beftime;$/;"	m	class:MovieHeaderTail
m_bgetVGABuffer	KVideo/vgaProviderSystem.h	/^	bool m_bgetVGABuffer;$/;"	m	class:VGAProviderSystem
m_binputMixInited	core/mixtureMode_IPC.h	/^	bool	m_binputMixInited;$/;"	m	class:MixtureMode_IPC
m_binputMixInited	core/mixtureMode_SDI.h	/^	bool		m_binputMixInited;$/;"	m	class:MixtureMode_SDI
m_bits_per_frame	KVideo/audioCapture.h	/^	int		m_bits_per_frame;$/;"	m	class:AudioCapture
m_bits_per_frame	core/audioEncodeFAAC.h	/^	int		m_bits_per_frame;$/;"	m	class:AudioEncodeFAAC
m_bkcr	core/osdManager.h	/^	cairo_t *m_bkcr;$/;"	m	class:OSDManager
m_bksurface	core/osdManager.h	/^	cairo_surface_t* m_bksurface;$/;"	m	class:OSDManager
m_bregisterToKernelBoard	Command/Function.h	/^	bool 			m_bregisterToKernelBoard;$/;"	m	class:CFunction
m_byteFrameIndex	Command/AssistCommandHandle.h	/^	BYTE			m_byteFrameIndex;$/;"	m	class:AssistCommandHandle
m_byteFrameIndex	Command/KernelBoardCommandHandle.h	/^	BYTE m_byteFrameIndex;$/;"	m	class:KernelBoardCommandHandle
m_cUtf8CourseName	kernel.h	/^	char 	m_cUtf8CourseName[50];$/;"	m	class:Kernel
m_cUtf8TeacherName	kernel.h	/^	char	m_cUtf8TeacherName[50];$/;"	m	class:Kernel
m_cUtf8TitleName	kernel.h	/^	char	m_cUtf8TitleName[50];$/;"	m	class:Kernel
m_captureChangeTime	KVideo/vgaProviderSystem.h	/^	unsigned long long m_captureChangeTime;$/;"	m	class:VGAProviderSystem
m_captureSDITimer	KVideo/sdiVideoProviderSystem.h	/^	Timer 		m_captureSDITimer[2];$/;"	m	class:SDIVideoProviderSystem
m_captureSDITimerValid	KVideo/sdiVideoProviderSystem.h	/^	bool		m_captureSDITimerValid[2];$/;"	m	class:SDIVideoProviderSystem
m_captureVGATimer	KVideo/vgaProviderSystem.h	/^	Timer m_captureVGATimer;$/;"	m	class:VGAProviderSystem
m_captureVGATimerValid	KVideo/vgaProviderSystem.h	/^	bool m_captureVGATimerValid;$/;"	m	class:VGAProviderSystem
m_cardinfo	KVideo/HikVideo.h	/^	CardInfo m_cardinfo;$/;"	m	class:KVideo::HikVideo
m_cardname	KVideo/CardInfo.h	/^	string m_cardname;$/;"	m	class:KVideo::CardInfo
m_cd	utils/codeConverter.h	/^	iconv_t m_cd;$/;"	m	class:CodeConverter
m_ce	core/audioEncodeFAAC.h	/^	Engine_Handle m_ce;$/;"	m	class:AudioEncodeFAAC
m_channelChangedTimer	core/mixtureMode_IPC.h	/^	Timer	m_channelChangedTimer;$/;"	m	class:MixtureMode_IPC
m_channelid	KVideo/HikVideo.h	/^	int m_channelid;$/;"	m	class:KVideo::HikVideo
m_checkAudioSyncTimer	core/mixtureMode_SDI.h	/^	Timer m_checkAudioSyncTimer;$/;"	m	class:MixtureMode_SDI
m_checkAudioSyncTimerValid	core/mixtureMode_SDI.h	/^	bool  m_checkAudioSyncTimerValid;$/;"	m	class:MixtureMode_SDI
m_checkThreadAttr	utils/vgaState.h	/^	pthread_attr_t	m_checkThreadAttr;$/;"	m	class:VGAStateHandle
m_checkThreadId	utils/vgaState.h	/^	pthread_t	m_checkThreadId;$/;"	m	class:VGAStateHandle
m_chunk_bytes	KVideo/audioCapture.h	/^	int		m_chunk_bytes;$/;"	m	class:AudioCapture
m_chunk_bytes	core/audioEncodeFAAC.h	/^	int		m_chunk_bytes;$/;"	m	class:AudioEncodeFAAC
m_chunk_size	KVideo/audioCapture.h	/^	unsigned long int m_chunk_size;$/;"	m	class:AudioCapture
m_chunk_size	core/audioEncodeFAAC.h	/^	unsigned long int m_chunk_size;$/;"	m	class:AudioEncodeFAAC
m_classWxManager	liveCourse/liveCourseManager.h	/^	ClassWxManager m_classWxManager;$/;"	m	class:LiveCourseManager
m_commandOrder	kernel.h	/^	eCommandOrder m_commandOrder; \/**< *\/$/;"	m	class:Kernel
m_commandSem	kernel.h	/^	semp_t		m_commandSem;$/;"	m	class:Kernel
m_commandTimer	kernel.h	/^	Timer		m_commandTimer;$/;"	m	class:Kernel
m_commandVector	kernel.h	/^	vector<int>	m_commandVector;$/;"	m	class:Kernel
m_confId	core/mtgClient.h	/^	int m_confId;$/;"	m	class:MtgClient
m_conf_handle	core/mtgClient.h	/^	s_handle_t m_conf_handle;$/;"	m	class:MtgClient
m_containStudImagePhyAddr	core/mixtureMode_IPC.h	/^	OMX_PTR	m_containStudImagePhyAddr;$/;"	m	class:MixtureMode_IPC
m_containStudImagePhyAddr	core/mixtureMode_SDI.h	/^	OMX_PTR	m_containStudImagePhyAddr;$/;"	m	class:MixtureMode_SDI
m_containStudSem	core/mixtureMode_IPC.h	/^	semp_t  m_containStudSem;$/;"	m	class:MixtureMode_IPC
m_containStudSem	core/mixtureMode_SDI.h	/^	semp_t  m_containStudSem;$/;"	m	class:MixtureMode_SDI
m_containTeacherImagePhyAddr	core/mixtureMode_IPC.h	/^	OMX_PTR		m_containTeacherImagePhyAddr;$/;"	m	class:MixtureMode_IPC
m_containTeacherImagePhyAddr	core/mixtureMode_SDI.h	/^	OMX_PTR		m_containTeacherImagePhyAddr;$/;"	m	class:MixtureMode_SDI
m_containTeacherSem	core/mixtureMode_IPC.h	/^	semp_t		m_containTeacherSem;$/;"	m	class:MixtureMode_IPC
m_containTeacherSem	core/mixtureMode_SDI.h	/^	semp_t		m_containTeacherSem;$/;"	m	class:MixtureMode_SDI
m_containVGAImagePhyAddr	core/mixtureMode_IPC.h	/^	OMX_PTR m_containVGAImagePhyAddr;$/;"	m	class:MixtureMode_IPC
m_containVGAImagePhyAddr	core/mixtureMode_SDI.h	/^	OMX_PTR m_containVGAImagePhyAddr;$/;"	m	class:MixtureMode_SDI
m_containVGASem	core/mixtureMode_IPC.h	/^	semp_t  m_containVGASem;$/;"	m	class:MixtureMode_IPC
m_containVGASem	core/mixtureMode_SDI.h	/^	semp_t  m_containVGASem;$/;"	m	class:MixtureMode_SDI
m_count	core/cameraBufferPool.h	/^	int m_count;$/;"	m	class:CameraBufferPool
m_count	core/framePool.h	/^	int m_count;$/;"	m	class:FrameBufferPool
m_courseID	liveCourse/courseWxManager.h	/^	int		m_courseID;$/;"	m	class:CourseWxManager
m_courseWxManager	liveCourse/liveCourseManager.h	/^	CourseWxManager m_courseWxManager;$/;"	m	class:LiveCourseManager
m_decComponent	core/Mp4Player.h	/^	ComponentWrapper *m_decComponent;$/;"	m	class:Mp4FilePlayer
m_decComponent	core/mixtureMode_IPC.h	/^	ComponentWrapper *m_decComponent[KMaxDecComponentCount];$/;"	m	class:MixtureMode_IPC
m_decParams	core/Mp4Player.h	/^	stConnInConnOutThreadArgs m_decParams;$/;"	m	class:Mp4FilePlayer
m_decParams	core/mixtureMode_IPC.h	/^	stConnInConnOutThreadArgs m_decParams[KMaxDecComponentCount];$/;"	m	class:MixtureMode_IPC
m_deiComponent	core/mixtureMode_IPC.h	/^	ComponentWrapper *m_deiComponent;$/;"	m	class:MixtureMode_IPC
m_deiComponent	core/mixtureMode_SDI.h	/^	ComponentWrapper *m_deiComponent;$/;"	m	class:MixtureMode_SDI
m_deiComponent	core/movieHeaderTail.h	/^	ComponentWrapper *m_deiComponent;$/;"	m	class:MovieHeaderTail
m_deiParams	core/mixtureMode_IPC.h	/^	stConnInConnOutThreadArgs m_deiParams;$/;"	m	class:MixtureMode_IPC
m_deiParams	core/mixtureMode_SDI.h	/^	stConnInConnOutThreadArgs m_deiParams;$/;"	m	class:MixtureMode_SDI
m_deiParams	core/movieHeaderTail.h	/^	stConnInConnOutThreadArgs m_deiParams;$/;"	m	class:MovieHeaderTail
m_detailConnectInfo	web/modelStatus.h	/^	int		m_detailConnectInfo;$/;"	m	class:ModelStatus
m_deviceSceneInfo	core/mixtureMode_IPC.h	/^	SceneVideoInfo	m_deviceSceneInfo;$/;"	m	class:MixtureMode_IPC
m_deviceSceneInfo	core/mixtureMode_SDI.h	/^	SceneVideoInfo	m_deviceSceneInfo;$/;"	m	class:MixtureMode_SDI
m_diskCheckTimer	kernel.h	/^	Timer	m_diskCheckTimer;$/;"	m	class:Kernel
m_displayComponent	core/Mp4Player.h	/^	ComponentWrapper *m_displayComponent;$/;"	m	class:Mp4FilePlayer
m_displayComponent	core/movieHeaderTail.h	/^	ComponentWrapper *m_displayComponent;$/;"	m	class:MovieHeaderTail
m_displayContext	core/HDMIDisplayManager.h	/^	EDisplayContext m_displayContext;$/;"	m	class:HDMIDisplayManager
m_displayHandle	core/HDMIDisplayManager.h	/^	DisplayHandle m_displayHandle;$/;"	m	class:HDMIDisplayManager
m_displayHandle	core/mixtureMode_SDI.h	/^	DisplayHandle m_displayHandle;$/;"	m	class:MixtureMode_SDI
m_displayHeight	core/HDMIDisplayManager.h	/^	int m_displayHeight;$/;"	m	class:HDMIDisplayManager
m_displayId	core/Mp4Player.h	/^	OMX_U32 m_displayId;$/;"	m	class:Mp4FilePlayer
m_displayId	core/movieHeaderTail.h	/^	OMX_U32 m_displayId;$/;"	m	class:MovieHeaderTail
m_displayParams	core/Mp4Player.h	/^	stConnInConnOutThreadArgs m_displayParams;$/;"	m	class:Mp4FilePlayer
m_displayParams	core/movieHeaderTail.h	/^	stConnInConnOutThreadArgs m_displayParams;$/;"	m	class:MovieHeaderTail
m_displayWidth	core/HDMIDisplayManager.h	/^	int	m_displayWidth;$/;"	m	class:HDMIDisplayManager
m_dst	core/audioEncodeFAAC.h	/^    XDAS_Int8                  *m_dst[XDM_MAX_IO_BUFFERS];$/;"	m	class:AudioEncodeFAAC
m_dwEncodeServiceIP	Command/AssistCommandHandle.h	/^	DWORD			m_dwEncodeServiceIP;$/;"	m	class:AssistCommandHandle
m_dwPPTDestIP	Command/AssistCommandHandle.h	/^	DWORD			m_dwPPTDestIP;$/;"	m	class:AssistCommandHandle
m_dwRecordTime	Command/AssistCommandHandle.h	/^	DWORD			m_dwRecordTime;$/;"	m	class:AssistCommandHandle
m_dwRecvBeatCount	liveMediaState.h	/^	DWORD 			m_dwRecvBeatCount;$/;"	m	class:StateHandle
m_dwRecvLen	Command/AssistCommandHandle.h	/^	DWORD			m_dwRecvLen;			\/\/\/ 接收到的数据长度$/;"	m	class:AssistCommandHandle
m_dwRefTime	Command/AssistCommandHandle.h	/^	DWORD			m_dwRefTime;$/;"	m	class:AssistCommandHandle
m_dwRefTime	liveMediaState.h	/^	DWORD			m_dwRefTime;$/;"	m	class:StateHandle
m_dwSaveTime	liveMediaState.h	/^	DWORD 			m_dwSaveTime;$/;"	m	class:StateHandle
m_dwSendBeatCount	liveMediaState.h	/^	DWORD 			m_dwSendBeatCount;$/;"	m	class:StateHandle
m_dwSendLen	Command/AssistCommandHandle.h	/^	DWORD			m_dwSendLen;			\/\/\/ 要发送的数据长度$/;"	m	class:AssistCommandHandle
m_dwSendLen	Command/KernelBoardCommandHandle.h	/^	DWORD m_dwSendLen;$/;"	m	class:KernelBoardCommandHandle
m_eCompressionFormat	core/audioEncodeOMX.h	/^	OMX_U8 m_eCompressionFormat;$/;"	m	class:AudioEncodeOMX
m_eState	core/audioEncodeOMX.h	/^	OMX_STATETYPE m_eState;$/;"	m	class:AudioEncodeOMX
m_edmaUtils	kernel.h	/^	EdmaUtils m_edmaUtils;$/;"	m	class:Kernel
m_edmafd	core/edma.h	/^	int 	 m_edmafd;$/;"	m	class:EdmaUtils
m_encBufSizes	core/audioEncodeFAAC.h	/^    XDAS_Int32                  m_encBufSizes[XDM_MAX_IO_BUFFERS];$/;"	m	class:AudioEncodeFAAC
m_encComponent	KVideo/vgaProviderSystem.h	/^	ComponentWrapper *m_encComponent;$/;"	m	class:VGAProviderSystem
m_encComponent	core/mixtureMode_IPC.h	/^	ComponentWrapper *m_encComponent;$/;"	m	class:MixtureMode_IPC
m_encComponent	core/mixtureMode_SDI.h	/^	ComponentWrapper *m_encComponent;$/;"	m	class:MixtureMode_SDI
m_encComponent	core/movieHeaderTail.h	/^	ComponentWrapper *m_encComponent;$/;"	m	class:MovieHeaderTail
m_encDynParams	core/audioEncodeFAAC.h	/^    AUDENC_DynamicParams        m_encDynParams;$/;"	m	class:AudioEncodeFAAC
m_encInArgs	core/audioEncodeFAAC.h	/^    AUDENC_InArgs               m_encInArgs;$/;"	m	class:AudioEncodeFAAC
m_encOutArgs	core/audioEncodeFAAC.h	/^    AUDENC_OutArgs              m_encOutArgs;$/;"	m	class:AudioEncodeFAAC
m_encParams	core/mixtureMode_IPC.h	/^	stConnInConnOutThreadArgs m_encParams;$/;"	m	class:MixtureMode_IPC
m_encParams	core/mixtureMode_SDI.h	/^	stConnInConnOutThreadArgs m_encParams;$/;"	m	class:MixtureMode_SDI
m_encParams	core/movieHeaderTail.h	/^	stConnInConnOutThreadArgs m_encParams;$/;"	m	class:MovieHeaderTail
m_encStatus	core/audioEncodeFAAC.h	/^    AUDENC_Status               m_encStatus;$/;"	m	class:AudioEncodeFAAC
m_enc_frames	core/mixtureMode_IPC.h	/^	int m_enc_frames;$/;"	m	class:MixtureMode_IPC
m_enc_frames	core/mixtureMode_SDI.h	/^	int m_enc_frames;$/;"	m	class:MixtureMode_SDI
m_encoded	core/audioEncodeFAAC.h	/^    XDAS_Int8                  *m_encoded[XDM_MAX_IO_BUFFERS];$/;"	m	class:AudioEncodeFAAC
m_encodedBufDesc	core/audioEncodeFAAC.h	/^    XDM_BufDesc                 m_encodedBufDesc;$/;"	m	class:AudioEncodeFAAC
m_eos_sem	core/audioEncodeFAAC.h	/^	semp_t	m_eos_sem;$/;"	m	class:AudioEncodeFAAC
m_eos_sem	core/audioEncodeOMX.h	/^	semp_t *m_eos_sem;$/;"	m	class:AudioEncodeOMX
m_er	core/audioEncodeOMX.h	/^    fd_set m_er;$/;"	m	class:AudioEncodeOMX
m_eventId	setting.h	/^	int 			m_eventId;$/;"	m	class:Setting
m_exchangeImagePhyAddr	core/mixtureMode_IPC.h	/^	long long m_exchangeImagePhyAddr;$/;"	m	class:MixtureMode_IPC
m_exchangeImagePhyAddr	core/mixtureMode_SDI.h	/^	OMX_PTR		m_exchangeImagePhyAddr;$/;"	m	class:MixtureMode_SDI
m_exchangeImagePhyAddr	core/mixtureMode_SDI.h	/^	long long m_exchangeImagePhyAddr;$/;"	m	class:MixtureMode_SDI
m_exchangeMutex	core/mixtureMode_IPC.h	/^	Mutex	m_exchangeMutex;$/;"	m	class:MixtureMode_IPC
m_exchangeMutex	core/mixtureMode_SDI.h	/^	Mutex		m_exchangeMutex;$/;"	m	class:MixtureMode_SDI
m_exitReadSem	core/audioEncodeFAAC.h	/^	semp_t	m_exitReadSem;$/;"	m	class:AudioEncodeFAAC
m_exitSem	Command/udp.h	/^	sem_t		m_exitSem;$/;"	m	class:Udp
m_exitSem	KVideo/audioCapture.h	/^	semp_t	m_exitSem;$/;"	m	class:AudioCapture
m_exitSem	KVideo/captureSDIVideo.h	/^	semp_t 	m_exitSem;$/;"	m	class:CaptureSDI
m_exitSem	KVideo/captureVga.h	/^	semp_t 	m_exitSem;$/;"	m	class:CaptureVGA
m_exitSem	core/rtmpHandle.h	/^	sem_t	m_exitSem;$/;"	m	class:RtmpHandle
m_exitSem	utils/vgaState.h	/^	sem_t	m_exitSem;$/;"	m	class:VGAStateHandle
m_fd	utils/vgaState.h	/^	int		m_fd;$/;"	m	class:VGAStateHandle
m_fdmem	core/membufUtils.h	/^	int m_fdmem;$/;"	m	class:MemBufUtils
m_flags	timer.h	/^	int m_flags;$/;"	m	class:Timer
m_forePosX	core/osdManager.h	/^	int		m_forePosX;	\/**< 前景图片所在位置X	*\/$/;"	m	class:OSDManager
m_forePosY	core/osdManager.h	/^	int		m_forePosY;	\/**< 前景图片所在位置Y *\/$/;"	m	class:OSDManager
m_forecr	core/osdManager.h	/^	cairo_t	*m_forecr;$/;"	m	class:OSDManager
m_foresurface	core/osdManager.h	/^	cairo_surface_t* m_foresurface;$/;"	m	class:OSDManager
m_function	kernel.h	/^	CFunction		m_function;$/;"	m	class:Kernel
m_hAnalyze	KVideo/HikVideo.h	/^	HANDLE m_hAnalyze;$/;"	m	class:KVideo::HikVideo
m_handle	KVideo/HikVideo.h	/^	long	m_handle;$/;"	m	class:KVideo::HikVideo
m_handle	core/rtmpHandle.h	/^	RecordHandle m_handle;$/;"	m	class:RtmpHandle
m_hdmiDisplayManager	kernel.h	/^	HDMIDisplayManager m_hdmiDisplayManager;$/;"	m	class:Kernel
m_headDelayTimer	core/mixtureMode_IPC.h	/^	Timer m_headDelayTimer;$/;"	m	class:MixtureMode_IPC
m_headDelayTimer	core/mixtureMode_SDI.h	/^	Timer m_headDelayTimer;$/;"	m	class:MixtureMode_SDI
m_headDelayTimerValid	core/mixtureMode_IPC.h	/^	bool  m_headDelayTimerValid;$/;"	m	class:MixtureMode_IPC
m_headDelayTimerValid	core/mixtureMode_SDI.h	/^	bool  m_headDelayTimerValid;$/;"	m	class:MixtureMode_SDI
m_headTailMutex	core/mixtureMode_IPC.h	/^	Mutex		m_headTailMutex;$/;"	m	class:MixtureMode_IPC
m_headTailMutex	core/mixtureMode_SDI.h	/^	Mutex		m_headTailMutex;$/;"	m	class:MixtureMode_SDI
m_headTailScaleComponent	core/mixtureMode_IPC.h	/^	ComponentWrapper *m_headTailScaleComponent; \/**< 用作片头片尾处理*\/$/;"	m	class:MixtureMode_IPC
m_headTailScaleComponent	core/mixtureMode_SDI.h	/^	ComponentWrapper *m_headTailScaleComponent; \/**< 用作片头片尾处理*\/$/;"	m	class:MixtureMode_SDI
m_headTailScaleReadExpectTime	core/mixtureMode_IPC.h	/^	long long m_headTailScaleReadExpectTime;$/;"	m	class:MixtureMode_IPC
m_headTailScaleReadExpectTime	core/mixtureMode_SDI.h	/^	long long m_headTailScaleReadExpectTime;$/;"	m	class:MixtureMode_SDI
m_headTailScaleReadaftTime	core/mixtureMode_IPC.h	/^	long long m_headTailScaleReadaftTime;$/;"	m	class:MixtureMode_IPC
m_headTailScaleReadaftTime	core/mixtureMode_SDI.h	/^	long long m_headTailScaleReadaftTime;$/;"	m	class:MixtureMode_SDI
m_headTailScaleReadbefTime	core/mixtureMode_IPC.h	/^	long long m_headTailScaleReadbefTime;$/;"	m	class:MixtureMode_IPC
m_headTailScaleReadbefTime	core/mixtureMode_SDI.h	/^	long long m_headTailScaleReadbefTime;$/;"	m	class:MixtureMode_SDI
m_heap	KVideo/vgaProviderSystem.h	/^	IHeap_Object* m_heap;$/;"	m	class:VGAProviderSystem
m_heap	core/mixtureMode_IPC.h	/^	IHeap_Object*	m_heap;$/;"	m	class:MixtureMode_IPC
m_heap	core/mixtureMode_SDI.h	/^	IHeap_Handle    m_heap;$/;"	m	class:MixtureMode_SDI
m_heap	core/resourceMode_SDI.h	/^	IHeap_Handle    m_heap;$/;"	m	class:ResourceModeHandle_SDI
m_heap	kernel.h	/^	IHeap_Object* m_heap;$/;"	m	class:Kernel
m_heartbeatExitSem	core/mtgInit.h	/^	sem_t m_heartbeatExitSem;$/;"	m	class:MtgHeartbeat
m_heartbeatThreadAttr	core/mtgInit.h	/^	pthread_attr_t m_heartbeatThreadAttr;$/;"	m	class:MtgHeartbeat
m_heartbeatThreadId	core/mtgInit.h	/^	pthread_t m_heartbeatThreadId;$/;"	m	class:MtgHeartbeat
m_heartbeatTimer	Command/Function.h	/^	Timer			m_heartbeatTimer;$/;"	m	class:CFunction
m_iGetIndex	core/cameraBufferPool.h	/^	int m_iGetIndex;$/;"	m	class:CameraBufferPool
m_iGetIndex	core/framePool.h	/^	int m_iGetIndex;$/;"	m	class:FrameBufferPool
m_iPutIndex	core/cameraBufferPool.h	/^	int m_iPutIndex;$/;"	m	class:CameraBufferPool
m_iPutIndex	core/framePool.h	/^	int m_iPutIndex;$/;"	m	class:FrameBufferPool
m_imageHeight	core/osdManager.h	/^	int 	m_imageHeight;$/;"	m	class:OSDManager
m_imageWidth	core/osdManager.h	/^	int 	m_imageWidth;$/;"	m	class:OSDManager
m_inBufDesc	core/audioEncodeFAAC.h	/^    XDM_BufDesc                 m_inBufDesc;$/;"	m	class:AudioEncodeFAAC
m_inBufSizes	core/audioEncodeFAAC.h	/^    XDAS_Int32                  m_inBufSizes[XDM_MAX_IO_BUFFERS];$/;"	m	class:AudioEncodeFAAC
m_inConnectAttr	core/audioEncodeOMX.h	/^	pthread_attr_t m_inConnectAttr;$/;"	m	class:AudioEncodeOMX
m_inHeight	core/Mp4Player.h	/^	OMX_U32 m_inHeight;$/;"	m	class:Mp4FilePlayer
m_inHeight	core/mixtureMode_IPC.h	/^	OMX_U32 m_inHeight[KMaxDecComponentCount];$/;"	m	class:MixtureMode_IPC
m_inHeight	core/mixtureMode_SDI.h	/^	OMX_U32 m_inHeight[KMaxDecComponentCount];$/;"	m	class:MixtureMode_SDI
m_inHeight	core/movieHeaderTail.h	/^	int 	m_inHeight;$/;"	m	class:MovieHeaderTail
m_inHeight	core/resourceMode_IPC.h	/^	int 	m_inHeight[KResourceNum];$/;"	m	class:ResourceModeHandle_IPC
m_inHeight	core/resourceMode_SDI.h	/^	int 	m_inHeight[KResourceNum];$/;"	m	class:ResourceModeHandle_SDI
m_inThreadId	core/audioEncodeOMX.h	/^	pthread_t m_inThreadId;$/;"	m	class:AudioEncodeOMX
m_inVGAHeight	KVideo/vgaProviderSystem.h	/^	int m_inVGAHeight;$/;"	m	class:VGAProviderSystem
m_inVGAHeight	core/mixtureMode_IPC.h	/^	OMX_U32 m_inVGAHeight;$/;"	m	class:MixtureMode_IPC
m_inVGAHeight	core/mixtureMode_SDI.h	/^	OMX_U32 m_inVGAHeight;$/;"	m	class:MixtureMode_SDI
m_inVGAHeight	core/resourceMode_IPC.h	/^	OMX_U32 m_inVGAHeight;$/;"	m	class:ResourceModeHandle_IPC
m_inVGAHeight	core/resourceMode_SDI.h	/^	OMX_U32 m_inVGAHeight;$/;"	m	class:ResourceModeHandle_SDI
m_inVGAWidth	KVideo/vgaProviderSystem.h	/^	int m_inVGAWidth;$/;"	m	class:VGAProviderSystem
m_inVGAWidth	core/mixtureMode_IPC.h	/^	OMX_U32 m_inVGAWidth;$/;"	m	class:MixtureMode_IPC
m_inVGAWidth	core/mixtureMode_SDI.h	/^	OMX_U32 m_inVGAWidth;$/;"	m	class:MixtureMode_SDI
m_inVGAWidth	core/resourceMode_IPC.h	/^	OMX_U32 m_inVGAWidth;$/;"	m	class:ResourceModeHandle_IPC
m_inVGAWidth	core/resourceMode_SDI.h	/^	OMX_U32 m_inVGAWidth;$/;"	m	class:ResourceModeHandle_SDI
m_inWidth	core/Mp4Player.h	/^	OMX_U32 m_inWidth;$/;"	m	class:Mp4FilePlayer
m_inWidth	core/mixtureMode_IPC.h	/^	OMX_U32 m_inWidth[KMaxDecComponentCount];$/;"	m	class:MixtureMode_IPC
m_inWidth	core/mixtureMode_SDI.h	/^	OMX_U32 m_inWidth[KMaxDecComponentCount];$/;"	m	class:MixtureMode_SDI
m_inWidth	core/movieHeaderTail.h	/^	int		m_inWidth;$/;"	m	class:MovieHeaderTail
m_inWidth	core/resourceMode_IPC.h	/^	int		m_inWidth[KResourceNum];$/;"	m	class:ResourceModeHandle_IPC
m_inWidth	core/resourceMode_SDI.h	/^	int		m_inWidth[KResourceNum];$/;"	m	class:ResourceModeHandle_SDI
m_infor	core/mp4Output.h	/^	stmp4infor  m_infor;$/;"	m	class:Mp4Output
m_inputMixWaitSem	core/mixtureMode_IPC.h	/^	sem_t	m_inputMixWaitSem;$/;"	m	class:MixtureMode_IPC
m_inputMixWaitSem	core/mixtureMode_SDI.h	/^	sem_t		m_inputMixWaitSem;$/;"	m	class:MixtureMode_SDI
m_inputThreadArgs	core/Mp4Player.h	/^	stInputThreadArgs m_inputThreadArgs;$/;"	m	class:Mp4FilePlayer
m_ip	KVideo/CardInfo.h	/^	string m_ip;$/;"	m	class:KVideo::CardInfo
m_isSoundopen	KVideo/HikVideo.h	/^	bool m_isSoundopen;$/;"	m	class:KVideo::HikVideo
m_isopen	KVideo/HikVideo.h	/^	bool m_isopen;$/;"	m	class:KVideo::HikVideo
m_joinSem	core/mtgClient.h	/^	sem_t m_joinSem;$/;"	m	class:MtgClient
m_joinThreadAttr	core/mtgClient.h	/^	pthread_attr_t	m_joinThreadAttr;$/;"	m	class:MtgClient
m_joinThreadId	core/mtgClient.h	/^	pthread_t	m_joinThreadId;$/;"	m	class:MtgClient
m_kernelboardcommndHandle	kernel.h	/^	KernelBoardCommandHandle 	m_kernelboardcommndHandle;$/;"	m	class:Kernel
m_lastDisplayHeight	core/HDMIDisplayManager.h	/^	int m_lastDisplayHeight;$/;"	m	class:HDMIDisplayManager
m_lastDisplayWidth	core/HDMIDisplayManager.h	/^	int m_lastDisplayWidth;$/;"	m	class:HDMIDisplayManager
m_lastconnect	utils/vgaState.h	/^	int m_lastconnect;$/;"	m	class:VGAStateHandle
m_laststate	utils/vgaState.h	/^	int m_laststate;$/;"	m	class:VGAStateHandle
m_lcWebMessage	liveCourse/courseWxManager.h	/^	tagLiveMtgWebMessage m_lcWebMessage;$/;"	m	class:CourseWxManager
m_listeners	KVideo/HikVideo.h	/^	vector<KVideo::IStreamVideoListener*> m_listeners;$/;"	m	class:KVideo::HikVideo
m_listeners	KVideo/streamVideoManager.h	/^	vector<IStreamVideoManagerListener*> m_listeners;$/;"	m	class:StreamVideoManager
m_listeners	KVideo/vgaProviderSystem.h	/^	vector<IVGAProviderObserver*> m_listeners;$/;"	m	class:VGAProviderSystem
m_liveCourseManager	kernel.h	/^	LiveCourseManager m_liveCourseManager;$/;"	m	class:Kernel
m_liveEncBitrate	setting.h	/^	int				m_liveEncBitrate;$/;"	m	class:Setting
m_liveEncComponent	core/mixtureMode_IPC.h	/^	ComponentWrapper *m_liveEncComponent;$/;"	m	class:MixtureMode_IPC
m_liveEncComponent	core/mixtureMode_SDI.h	/^	ComponentWrapper *m_liveEncComponent;$/;"	m	class:MixtureMode_SDI
m_liveEncParams	core/mixtureMode_IPC.h	/^	stConnInConnOutThreadArgs m_liveEncParams;$/;"	m	class:MixtureMode_IPC
m_liveEncParams	core/mixtureMode_SDI.h	/^	stConnInConnOutThreadArgs m_liveEncParams;$/;"	m	class:MixtureMode_SDI
m_liveH264fd	core/mixtureMode_IPC.h	/^	int		m_liveH264fd;$/;"	m	class:MixtureMode_IPC
m_liveH264fd	core/mixtureMode_SDI.h	/^	int	  m_liveH264fd;$/;"	m	class:MixtureMode_SDI
m_liveNfComponent	core/mixtureMode_IPC.h	/^	ComponentWrapper *m_liveNfComponent;$/;"	m	class:MixtureMode_IPC
m_liveNfComponent	core/mixtureMode_SDI.h	/^	ComponentWrapper *m_liveNfComponent;$/;"	m	class:MixtureMode_SDI
m_liveNfParams	core/mixtureMode_IPC.h	/^	stConnInConnOutThreadArgs m_liveNfParams;$/;"	m	class:MixtureMode_IPC
m_liveNfParams	core/mixtureMode_SDI.h	/^	stConnInConnOutThreadArgs m_liveNfParams;$/;"	m	class:MixtureMode_SDI
m_liveOutHeight	core/mixtureMode_IPC.h	/^	int m_liveOutHeight;$/;"	m	class:MixtureMode_IPC
m_liveOutHeight	core/mixtureMode_SDI.h	/^	int m_liveOutHeight;$/;"	m	class:MixtureMode_SDI
m_liveOutHeight	core/resourceMode_SDI.h	/^	int			m_liveOutHeight;$/;"	m	class:ResourceModeHandle_SDI
m_liveOutWidth	core/mixtureMode_IPC.h	/^	int m_liveOutWidth;$/;"	m	class:MixtureMode_IPC
m_liveOutWidth	core/mixtureMode_SDI.h	/^	int m_liveOutWidth;$/;"	m	class:MixtureMode_SDI
m_liveOutWidth	core/resourceMode_SDI.h	/^	int			m_liveOutWidth;$/;"	m	class:ResourceModeHandle_SDI
m_liveVideoHeight	setting.h	/^	int				m_liveVideoHeight;$/;"	m	class:Setting
m_liveVideoWidth	setting.h	/^	int				m_liveVideoWidth;$/;"	m	class:Setting
m_live_enc_frames	core/mixtureMode_IPC.h	/^	int m_live_enc_frames;$/;"	m	class:MixtureMode_IPC
m_liveafttime	core/mixtureMode_SDI.h	/^	unsigned int m_liveafttime;$/;"	m	class:MixtureMode_SDI
m_livebeftime	core/mixtureMode_SDI.h	/^	unsigned int m_livebeftime;$/;"	m	class:MixtureMode_SDI
m_logBuffer	core/mixtureMode_IPC.h	/^	char			m_logBuffer[256];$/;"	m	class:MixtureMode_IPC
m_logoImage	core/mixtureMode_SDI.h	/^	unsigned char*	m_logoImage;$/;"	m	class:MixtureMode_SDI
m_logoImagePhyAddr	core/mixtureMode_SDI.h	/^	OMX_PTR		m_logoImagePhyAddr;$/;"	m	class:MixtureMode_SDI
m_maxDecode	core/mixtureMode_IPC.h	/^	int m_maxDecode;$/;"	m	class:MixtureMode_IPC
m_maxDecode	core/mixtureMode_SDI.h	/^	int m_maxDecode;$/;"	m	class:MixtureMode_SDI
m_memBufUtils	kernel.h	/^	MemBufUtils m_memBufUtils;$/;"	m	class:Kernel
m_millSecond	timer.h	/^	int m_millSecond;$/;"	m	class:Timer
m_millSecond	utils/vgaState.h	/^	int m_millSecond;$/;"	m	class:VGAStateHandle
m_mixTotalCount	core/mixtureMode_IPC.h	/^	long long m_mixTotalCount;$/;"	m	class:MixtureMode_IPC
m_mixTotalCount	core/mixtureMode_SDI.h	/^	long long m_mixTotalCount;$/;"	m	class:MixtureMode_SDI
m_mixafttime	core/mixtureMode_IPC.h	/^	long long m_mixafttime;$/;"	m	class:MixtureMode_IPC
m_mixafttime	core/mixtureMode_SDI.h	/^	long long m_mixafttime;$/;"	m	class:MixtureMode_SDI
m_mixbeftime	core/mixtureMode_IPC.h	/^	long long m_mixbeftime;$/;"	m	class:MixtureMode_IPC
m_mixbeftime	core/mixtureMode_SDI.h	/^	long long m_mixbeftime;$/;"	m	class:MixtureMode_SDI
m_monitorSender	kernel.h	/^	MonitorSender m_monitorSender;$/;"	m	class:Kernel
m_monotonic	KVideo/audioCapture.h	/^	int		m_monotonic;$/;"	m	class:AudioCapture
m_monotonic	core/audioEncodeFAAC.h	/^	int		m_monotonic;$/;"	m	class:AudioEncodeFAAC
m_moveFileMutex	kernel.h	/^	Mutex			m_moveFileMutex;$/;"	m	class:Kernel
m_moveFileThreadAttr	kernel.h	/^	pthread_attr_t m_moveFileThreadAttr;$/;"	m	class:Kernel
m_moveFileThreadId	kernel.h	/^	pthread_t		m_moveFileThreadId;$/;"	m	class:Kernel
m_mp4File	core/rtmpHandle.h	/^	Mp4Output* m_mp4File;$/;"	m	class:RtmpHandle
m_mp4Mutex	core/mixtureMode_SDI.h	/^	Mutex 	m_mp4Mutex;$/;"	m	class:MixtureMode_SDI
m_mp4Mutex	core/mp4Output.h	/^	Mutex 	m_mp4Mutex;$/;"	m	class:Mp4Output
m_mp4OutputHandle	core/mixtureMode_IPC.h	/^	Mp4Output* m_mp4OutputHandle;$/;"	m	class:MixtureMode_IPC
m_mp4OutputHandle	core/mixtureMode_SDI.h	/^	Mp4Output* m_mp4OutputHandle;$/;"	m	class:MixtureMode_SDI
m_mp4OutputHandle	core/resourceMode_SDI.h	/^	Mp4Output* m_mp4OutputHandle;$/;"	m	class:ResourceModeHandle_SDI
m_mp4Reader	core/Mp4Player.h	/^	CMP4FileReader* m_mp4Reader;$/;"	m	class:Mp4FilePlayer
m_mp4Sem	core/resourceMode_SDI.h	/^	semp_t 	m_mp4Sem;$/;"	m	class:ResourceModeHandle_SDI
m_mtgHeartbeat	liveCourse/liveCourseManager.h	/^	MtgHeartbeat m_mtgHeartbeat;$/;"	m	class:LiveCourseManager
m_mutex	core/HDMIDisplayManager.h	/^	Mutex m_mutex;$/;"	m	class:HDMIDisplayManager
m_mutex	liveCourse/classWxManager.h	/^	Mutex	m_mutex;$/;"	m	class:ClassWxManager
m_mutex	liveCourse/courseWxManager.h	/^	Mutex	m_mutex;$/;"	m	class:CourseWxManager
m_mutex	monitor/monitorSender.h	/^	Mutex 	m_mutex;$/;"	m	class:MonitorSender
m_nAudioCountInMP4File	core/mixtureMode_IPC.h	/^	int				m_nAudioCountInMP4File;$/;"	m	class:MixtureMode_IPC
m_nAudioCountInMP4File	core/mixtureMode_SDI.h	/^	int				m_nAudioCountInMP4File;$/;"	m	class:MixtureMode_SDI
m_nAudioFrames	core/mixtureMode_IPC.h	/^	int m_nAudioFrames;$/;"	m	class:MixtureMode_IPC
m_nAudioFrames	core/mixtureMode_SDI.h	/^	unsigned int m_nAudioFrames;$/;"	m	class:MixtureMode_SDI
m_nChannels	KVideo/audioCapture.h	/^	int m_nChannels;$/;"	m	class:AudioCapture
m_nChannels	core/audioEncodeFAAC.h	/^	int m_nChannels;$/;"	m	class:AudioEncodeFAAC
m_nChannels	core/audioEncodeOMX.h	/^	OMX_U32 m_nChannels;$/;"	m	class:AudioEncodeOMX
m_nContainStudSize	core/mixtureMode_IPC.h	/^	int		m_nContainStudSize;$/;"	m	class:MixtureMode_IPC
m_nContainStudSize	core/mixtureMode_SDI.h	/^	int		m_nContainStudSize;$/;"	m	class:MixtureMode_SDI
m_nContainTeacherSize	core/mixtureMode_IPC.h	/^	int			m_nContainTeacherSize;$/;"	m	class:MixtureMode_IPC
m_nContainTeacherSize	core/mixtureMode_SDI.h	/^	int			m_nContainTeacherSize;$/;"	m	class:MixtureMode_SDI
m_nContainVGASize	core/mixtureMode_IPC.h	/^	int		m_nContainVGASize;$/;"	m	class:MixtureMode_IPC
m_nContainVGASize	core/mixtureMode_SDI.h	/^	int		m_nContainVGASize;$/;"	m	class:MixtureMode_SDI
m_nCustomCount	core/shareMem.h	/^	int			m_nCustomCount;$/;"	m	class:ShareMemManager
m_nDaysBeforeCanDelete	setting.h	/^	int				m_nDaysBeforeCanDelete;$/;"	m	class:Setting
m_nDecInputIndex	core/mixtureMode_IPC.h	/^	int			 m_nDecInputIndex[KMaxDecComponentCount];$/;"	m	class:MixtureMode_IPC
m_nDecStride	core/Mp4Player.h	/^	OMX_U32 m_nDecStride;$/;"	m	class:Mp4FilePlayer
m_nDecStride	core/mixtureMode_IPC.h	/^	OMX_U32 m_nDecStride[KMaxDecComponentCount];$/;"	m	class:MixtureMode_IPC
m_nDeleteFrameCount	setting.h	/^	int				m_nDeleteFrameCount;$/;"	m	class:Setting
m_nDiskSpaceAlertSize	setting.h	/^	int				m_nDiskSpaceAlertSize;$/;"	m	class:Setting
m_nDisplayCount	core/v4lDisplay.h	/^	unsigned int m_nDisplayCount;$/;"	m	class:DisplayHandle
m_nEncBitRate	core/mixtureMode_IPC.h	/^	OMX_U32 m_nEncBitRate;$/;"	m	class:MixtureMode_IPC
m_nEncBitRate	core/mixtureMode_SDI.h	/^	OMX_U32 m_nEncBitRate;$/;"	m	class:MixtureMode_SDI
m_nEncBitRate	core/movieHeaderTail.h	/^	OMX_U32 m_nEncBitRate;$/;"	m	class:MovieHeaderTail
m_nEncBitRate	core/resourceMode_SDI.h	/^	OMX_U32 m_nEncBitRate;$/;"	m	class:ResourceModeHandle_SDI
m_nFrameRate	core/Mp4Player.h	/^	OMX_U32 m_nFrameRate;$/;"	m	class:Mp4FilePlayer
m_nFrameRate	core/mixtureMode_IPC.h	/^	OMX_U32 m_nFrameRate;$/;"	m	class:MixtureMode_IPC
m_nFrameRate	core/mixtureMode_SDI.h	/^	OMX_U32 m_nFrameRate;$/;"	m	class:MixtureMode_SDI
m_nFrameRate	core/movieHeaderTail.h	/^	OMX_U32 m_nFrameRate;$/;"	m	class:MovieHeaderTail
m_nFrameRate	core/resourceMode_SDI.h	/^	OMX_U32 m_nFrameRate;$/;"	m	class:ResourceModeHandle_SDI
m_nInBufferLen	core/Mp4Player.h	/^	int 			m_nInBufferLen;$/;"	m	class:Mp4FilePlayer
m_nInBufferMaxLen	core/Mp4Player.h	/^	int				m_nInBufferMaxLen;$/;"	m	class:Mp4FilePlayer
m_nInitEndTime	core/mixtureMode_IPC.h	/^	unsigned long m_nInitEndTime;$/;"	m	class:MixtureMode_IPC
m_nInitEndTime	core/mixtureMode_SDI.h	/^	unsigned long m_nInitEndTime;$/;"	m	class:MixtureMode_SDI
m_nInitTime	core/mixtureMode_IPC.h	/^	unsigned long m_nInitTime;$/;"	m	class:MixtureMode_IPC
m_nInitTime	core/mixtureMode_SDI.h	/^	unsigned long m_nInitTime;$/;"	m	class:MixtureMode_SDI
m_nInstanceCount	KVideo/VideoFactory.cpp	/^int KVideoCreatorFactory::m_nInstanceCount = 0;$/;"	m	class:KVideoCreatorFactory	file:
m_nInstanceCount	KVideo/VideoFactory.h	/^	static int m_nInstanceCount;$/;"	m	class:KVideoCreatorFactory
m_nLiveDeleteFrameCount	setting.h	/^	int				m_nLiveDeleteFrameCount;$/;"	m	class:Setting
m_nLiveEncVOPInter	setting.h	/^	int				m_nLiveEncVOPInter;$/;"	m	class:Setting
m_nLiveTotalEncCount	core/mixtureMode_IPC.h	/^	long long m_nLiveTotalEncCount;$/;"	m	class:MixtureMode_IPC
m_nLiveTotalEncCount	core/mixtureMode_SDI.h	/^	long long   m_nLiveTotalEncCount;$/;"	m	class:MixtureMode_SDI
m_nMixInputIndex	core/mixtureMode_IPC.h	/^	int			m_nMixInputIndex;$/;"	m	class:MixtureMode_IPC
m_nMixInputIndex	core/mixtureMode_SDI.h	/^	int			m_nMixInputIndex;$/;"	m	class:MixtureMode_SDI
m_nPcmBufferMaxSize	core/audioEncodeFAAC.h	/^	int   m_nPcmBufferMaxSize;$/;"	m	class:AudioEncodeFAAC
m_nPcmBufferMaxSize	core/audioEncodeOMX.h	/^	int   m_nPcmBufferMaxSize;$/;"	m	class:AudioEncodeOMX
m_nPcmBufferSize	core/audioEncodeFAAC.h	/^	int   m_nPcmBufferSize;$/;"	m	class:AudioEncodeFAAC
m_nPcmBufferSize	core/audioEncodeOMX.h	/^	int   m_nPcmBufferSize;$/;"	m	class:AudioEncodeOMX
m_nReadSameChannelCount	core/mixtureMode_SDI.h	/^	int			 m_nReadSameChannelCount;$/;"	m	class:MixtureMode_SDI
m_nResendCount	core/rtmpHandle.h	/^	int	  m_nResendCount;$/;"	m	class:RtmpHandle
m_nSDIIndex	KVideo/captureSDIVideo.h	/^	int		m_nSDIIndex;$/;"	m	class:CaptureSDI
m_nSDIInputIndex	core/mixtureMode_SDI.h	/^	int			 m_nSDIInputIndex[KMaxDecComponentCount];$/;"	m	class:MixtureMode_SDI
m_nSDIInputIndex	core/resourceMode_SDI.h	/^	int		m_nSDIInputIndex[KMaxSDICount];$/;"	m	class:ResourceModeHandle_SDI
m_nSampleBit	KVideo/audioCapture.h	/^	int m_nSampleBit;$/;"	m	class:AudioCapture
m_nSampleBit	core/audioEncodeFAAC.h	/^	int m_nSampleBit;$/;"	m	class:AudioEncodeFAAC
m_nSampleBit	core/audioEncodeOMX.h	/^	OMX_U32 m_nSampleBit;$/;"	m	class:AudioEncodeOMX
m_nSampleRate	KVideo/audioCapture.h	/^	int m_nSampleRate;$/;"	m	class:AudioCapture
m_nSampleRate	core/audioEncodeFAAC.h	/^	int m_nSampleRate;$/;"	m	class:AudioEncodeFAAC
m_nSampleRate	core/audioEncodeOMX.h	/^	OMX_U32 m_nSampleRate;$/;"	m	class:AudioEncodeOMX
m_nTotalEncCount	core/mixtureMode_IPC.h	/^	long long m_nTotalEncCount;$/;"	m	class:MixtureMode_IPC
m_nTotalEncCount	core/mixtureMode_SDI.h	/^	long long 	m_nTotalEncCount;$/;"	m	class:MixtureMode_SDI
m_nTotalEncCount	core/resourceMode_SDI.h	/^	long long 	m_nTotalEncCount;$/;"	m	class:ResourceModeHandle_SDI
m_nVGAEncodeInputIndex	KVideo/vgaProviderSystem.h	/^	int	 m_nVGAEncodeInputIndex;$/;"	m	class:VGAProviderSystem
m_nVGAEncodeInputIndex	core/mixtureMode_SDI.h	/^	int			m_nVGAEncodeInputIndex;$/;"	m	class:MixtureMode_SDI
m_nVGAEncodeInputIndex	core/resourceMode_SDI.h	/^	int			m_nVGAEncodeInputIndex;$/;"	m	class:ResourceModeHandle_SDI
m_nVGAScaleInputIndex	KVideo/vgaProviderSystem.h	/^	int  m_nVGAScaleInputIndex;$/;"	m	class:VGAProviderSystem
m_nVGAScaleInputIndex	core/mixtureMode_IPC.h	/^	int			m_nVGAScaleInputIndex;$/;"	m	class:MixtureMode_IPC
m_nVGAScaleInputIndex	core/mixtureMode_SDI.h	/^	int			m_nVGAScaleInputIndex;$/;"	m	class:MixtureMode_SDI
m_nVgaCaptureMicroSecond	KVideo/vgaProviderSystem.h	/^	long long m_nVgaCaptureMicroSecond;$/;"	m	class:VGAProviderSystem
m_nVideoCountInMP4File	core/mixtureMode_IPC.h	/^	int				m_nVideoCountInMP4File;$/;"	m	class:MixtureMode_IPC
m_nVideoCountInMP4File	core/mixtureMode_SDI.h	/^	int				m_nVideoCountInMP4File;$/;"	m	class:MixtureMode_SDI
m_nWriteIndex	core/shareMem.h	/^	int			m_nWriteIndex;$/;"	m	class:ShareMemManager
m_nfComponent	core/mixtureMode_IPC.h	/^	ComponentWrapper *m_nfComponent;$/;"	m	class:MixtureMode_IPC
m_nfComponent	core/mixtureMode_SDI.h	/^	ComponentWrapper *m_nfComponent;$/;"	m	class:MixtureMode_SDI
m_nfParams	core/mixtureMode_IPC.h	/^	stConnInConnOutThreadArgs m_nfParams;$/;"	m	class:MixtureMode_IPC
m_nfParams	core/mixtureMode_SDI.h	/^	stConnInConnOutThreadArgs m_nfParams;$/;"	m	class:MixtureMode_SDI
m_nlastVGAChannel	kernel.h	/^	int		m_nlastVGAChannel;$/;"	m	class:Kernel
m_nowconnect	utils/vgaState.h	/^	int m_nowconnect;$/;"	m	class:VGAStateHandle
m_nowstate	utils/vgaState.h	/^	int m_nowstate;$/;"	m	class:VGAStateHandle
m_oldIPCChannel	setting.h	/^	PRChannel 	 m_oldIPCChannel;$/;"	m	class:Setting
m_openUrlSem	core/rtmpHandle.h	/^	sem_t	m_openUrlSem;$/;"	m	class:RtmpHandle
m_openUrlThreadAttr	core/rtmpHandle.h	/^	pthread_attr_t	m_openUrlThreadAttr;$/;"	m	class:RtmpHandle
m_openUrlThreadId	core/rtmpHandle.h	/^	pthread_t	m_openUrlThreadId;$/;"	m	class:RtmpHandle
m_outBufDesc	core/audioEncodeFAAC.h	/^    XDM_BufDesc                 m_outBufDesc;$/;"	m	class:AudioEncodeFAAC
m_outBufSizes	core/audioEncodeFAAC.h	/^    XDAS_Int32                  m_outBufSizes[XDM_MAX_IO_BUFFERS];$/;"	m	class:AudioEncodeFAAC
m_outConnectAttr	core/audioEncodeOMX.h	/^	pthread_attr_t m_outConnectAttr;$/;"	m	class:AudioEncodeOMX
m_outHeight	core/mixtureMode_IPC.h	/^	int m_outHeight;$/;"	m	class:MixtureMode_IPC
m_outHeight	core/mixtureMode_SDI.h	/^	int m_outHeight;$/;"	m	class:MixtureMode_SDI
m_outHeight	core/movieHeaderTail.h	/^	int		m_outHeight;$/;"	m	class:MovieHeaderTail
m_outHeight	kernel.h	/^	int		m_outHeight;$/;"	m	class:Kernel
m_outScaleHeight	core/mixtureMode_IPC.h	/^	OMX_U32 m_outScaleHeight[KMaxDecComponentCount];$/;"	m	class:MixtureMode_IPC
m_outScaleHeight	core/mixtureMode_SDI.h	/^	OMX_U32 m_outScaleHeight[KMaxDecComponentCount];$/;"	m	class:MixtureMode_SDI
m_outScaleWidth	core/mixtureMode_IPC.h	/^	OMX_U32 m_outScaleWidth[KMaxDecComponentCount];	\/**< 经过scale组件输出的分辨率*\/$/;"	m	class:MixtureMode_IPC
m_outScaleWidth	core/mixtureMode_SDI.h	/^	OMX_U32 m_outScaleWidth[KMaxDecComponentCount];	\/**< 经过scale组件输出的分辨率*\/$/;"	m	class:MixtureMode_SDI
m_outThreadAttr	core/audioEncodeFAAC.h	/^	pthread_attr_t m_outThreadAttr;$/;"	m	class:AudioEncodeFAAC
m_outThreadId	core/audioEncodeFAAC.h	/^	pthread_t m_outThreadId;$/;"	m	class:AudioEncodeFAAC
m_outThreadId	core/audioEncodeOMX.h	/^	pthread_t m_outThreadId;$/;"	m	class:AudioEncodeOMX
m_outVGAHeight	core/mixtureMode_IPC.h	/^	OMX_U32 m_outVGAHeight;$/;"	m	class:MixtureMode_IPC
m_outVGAHeight	core/mixtureMode_SDI.h	/^	OMX_U32 m_outVGAHeight;$/;"	m	class:MixtureMode_SDI
m_outVGAWidth	core/mixtureMode_IPC.h	/^	OMX_U32 m_outVGAWidth;$/;"	m	class:MixtureMode_IPC
m_outVGAWidth	core/mixtureMode_SDI.h	/^	OMX_U32 m_outVGAWidth;$/;"	m	class:MixtureMode_SDI
m_outWidth	core/mixtureMode_IPC.h	/^	int m_outWidth;$/;"	m	class:MixtureMode_IPC
m_outWidth	core/mixtureMode_SDI.h	/^	int m_outWidth;$/;"	m	class:MixtureMode_SDI
m_outWidth	core/movieHeaderTail.h	/^	int		m_outWidth;$/;"	m	class:MovieHeaderTail
m_outWidth	kernel.h	/^	int		m_outWidth;$/;"	m	class:Kernel
m_outputformat	core/audioEncodeOMX.h	/^	OMX_AUDIO_AACSTREAMFORMATTYPE m_outputformat;$/;"	m	class:AudioEncodeOMX
m_ownPort	setting.h	/^	WORD		m_ownPort;$/;"	m	class:Setting
m_pAACFile	core/resourceMode_SDI.h	/^	FILE* m_pAACFile;$/;"	m	class:ResourceModeHandle_SDI
m_pAudioCodecEngine	kernel.h	/^	codec_engine* m_pAudioCodecEngine;$/;"	m	class:Kernel
m_pAudioEncode	core/mixtureMode_IPC.h	/^	IAudioEncodeInterface*	m_pAudioEncode;$/;"	m	class:MixtureMode_IPC
m_pAudioEncode	core/mixtureMode_SDI.h	/^	IAudioEncodeInterface*	m_pAudioEncode;$/;"	m	class:MixtureMode_SDI
m_pAudioEncode	core/mixtureMode_SDI.h	/^	codec_engine* m_pAudioEncode;$/;"	m	class:MixtureMode_SDI
m_pAudioEncode	core/resourceMode_IPC.h	/^	IAudioEncodeInterface*	m_pAudioEncode;$/;"	m	class:ResourceModeHandle_IPC
m_pAudioEncode	core/resourceMode_IPC.h	/^	codec_engine* m_pAudioEncode;$/;"	m	class:ResourceModeHandle_IPC
m_pAudioEncode	core/resourceMode_SDI.h	/^	IAudioEncodeInterface*	m_pAudioEncode;$/;"	m	class:ResourceModeHandle_SDI
m_pAudioEncode	core/resourceMode_SDI.h	/^	codec_engine* m_pAudioEncode;$/;"	m	class:ResourceModeHandle_SDI
m_pCaptureSDI	KVideo/sdiVideoProviderSystem.h	/^	CaptureSDI* m_pCaptureSDI[2];$/;"	m	class:SDIVideoProviderSystem
m_pCaptureVGAHandle	KVideo/vgaProviderSystem.h	/^	CaptureVGA* m_pCaptureVGAHandle;$/;"	m	class:VGAProviderSystem
m_pCb	KVideo/vgaProviderSystem.h	/^	OMX_CALLBACKTYPE m_pCb;$/;"	m	class:VGAProviderSystem
m_pCb	core/Mp4Player.h	/^	OMX_CALLBACKTYPE m_pCb;$/;"	m	class:Mp4FilePlayer
m_pCb	core/audioEncodeOMX.h	/^	OMX_CALLBACKTYPE *m_pCb;$/;"	m	class:AudioEncodeOMX
m_pCb	core/mixtureMode_IPC.h	/^	OMX_CALLBACKTYPE m_pCb;$/;"	m	class:MixtureMode_IPC
m_pCb	core/mixtureMode_SDI.h	/^	OMX_CALLBACKTYPE m_pCb;$/;"	m	class:MixtureMode_SDI
m_pCb	core/movieHeaderTail.h	/^	OMX_CALLBACKTYPE m_pCb;$/;"	m	class:MovieHeaderTail
m_pCb	core/resourceMode_SDI.h	/^	OMX_CALLBACKTYPE m_pCb;$/;"	m	class:ResourceModeHandle_SDI
m_pClassClient	liveCourse/classWxManager.h	/^	MtgClient* m_pClassClient; \/\/get the command$/;"	m	class:ClassWxManager
m_pContainStudImage	core/mixtureMode_IPC.h	/^	unsigned char*   m_pContainStudImage;$/;"	m	class:MixtureMode_IPC
m_pContainStudImage	core/mixtureMode_SDI.h	/^	unsigned char*   m_pContainStudImage;$/;"	m	class:MixtureMode_SDI
m_pContainTeacherImage	core/mixtureMode_IPC.h	/^	unsigned char*  		m_pContainTeacherImage;$/;"	m	class:MixtureMode_IPC
m_pContainTeacherImage	core/mixtureMode_SDI.h	/^	unsigned char*  		m_pContainTeacherImage;$/;"	m	class:MixtureMode_SDI
m_pContainVGAImage	core/mixtureMode_IPC.h	/^	unsigned char*   m_pContainVGAImage;$/;"	m	class:MixtureMode_IPC
m_pContainVGAImage	core/mixtureMode_SDI.h	/^	unsigned char*   m_pContainVGAImage;$/;"	m	class:MixtureMode_SDI
m_pCourseClient	liveCourse/courseWxManager.h	/^	MtgClient* m_pCourseClient;$/;"	m	class:CourseWxManager
m_pCustomReadIndex	core/shareMem.h	/^	int*		m_pCustomReadIndex;$/;"	m	class:ShareMemManager
m_pDecHandle	core/Mp4Player.h	/^	OMX_HANDLETYPE m_pDecHandle;$/;"	m	class:Mp4FilePlayer
m_pDecHandle	core/mixtureMode_IPC.h	/^	OMX_HANDLETYPE m_pDecHandle[KMaxDecComponentCount];$/;"	m	class:MixtureMode_IPC
m_pDeiHandle	core/mixtureMode_IPC.h	/^	OMX_HANDLETYPE m_pDeiHandle;$/;"	m	class:MixtureMode_IPC
m_pDeiHandle	core/mixtureMode_SDI.h	/^	OMX_HANDLETYPE m_pDeiHandle;$/;"	m	class:MixtureMode_SDI
m_pDeiHandle	core/movieHeaderTail.h	/^	OMX_HANDLETYPE m_pDeiHandle;$/;"	m	class:MovieHeaderTail
m_pDisplayHandle	core/Mp4Player.h	/^	OMX_HANDLETYPE m_pDisplayHandle;$/;"	m	class:Mp4FilePlayer
m_pDisplayHandle	core/movieHeaderTail.h	/^	OMX_HANDLETYPE m_pDisplayHandle;$/;"	m	class:MovieHeaderTail
m_pEncHandle	KVideo/vgaProviderSystem.h	/^	OMX_HANDLETYPE m_pEncHandle;$/;"	m	class:VGAProviderSystem
m_pEncHandle	core/mixtureMode_IPC.h	/^	OMX_HANDLETYPE m_pEncHandle;$/;"	m	class:MixtureMode_IPC
m_pEncHandle	core/mixtureMode_SDI.h	/^	OMX_HANDLETYPE m_pEncHandle;$/;"	m	class:MixtureMode_SDI
m_pEncHandle	core/movieHeaderTail.h	/^	OMX_HANDLETYPE m_pEncHandle;$/;"	m	class:MovieHeaderTail
m_pEncodedBuf	core/audioEncodeFAAC.h	/^	XDAS_Int8 *m_pEncodedBuf;$/;"	m	class:AudioEncodeFAAC
m_pExchangeImage	core/mixtureMode_SDI.h	/^	unsigned char*		m_pExchangeImage;$/;"	m	class:MixtureMode_SDI
m_pFrameBuffer	core/cameraBufferPool.h	/^	CameraFrameBuffer* m_pFrameBuffer;$/;"	m	class:CameraBufferPool
m_pFrameBuffer	core/framePool.h	/^	FRAMEBUFFER* m_pFrameBuffer;$/;"	m	class:FrameBufferPool
m_pHandle	core/audioEncodeOMX.h	/^	OMX_HANDLETYPE m_pHandle;$/;"	m	class:AudioEncodeOMX
m_pHeadTailScaleHandle	core/mixtureMode_IPC.h	/^	OMX_HANDLETYPE m_pHeadTailScaleHandle;\/**< 用作片头片尾处理*\/$/;"	m	class:MixtureMode_IPC
m_pHeadTailScaleHandle	core/mixtureMode_SDI.h	/^	OMX_HANDLETYPE m_pHeadTailScaleHandle;\/**< 用作片头片尾处理*\/$/;"	m	class:MixtureMode_SDI
m_pHeapBuffer	KVideo/vgaProviderSystem.h	/^	OMX_PTR m_pHeapBuffer;$/;"	m	class:VGAProviderSystem
m_pHeapBuffer	core/mixtureMode_IPC.h	/^	OMX_PTR m_pHeapBuffer;$/;"	m	class:MixtureMode_IPC
m_pHeapBuffer	core/mixtureMode_SDI.h	/^	OMX_PTR m_pHeapBuffer;$/;"	m	class:MixtureMode_SDI
m_pHeapBuffer	core/resourceMode_SDI.h	/^	OMX_PTR m_pHeapBuffer;$/;"	m	class:ResourceModeHandle_SDI
m_pInBuf	core/audioEncodeFAAC.h	/^	XDAS_Int8 *m_pInBuf;$/;"	m	class:AudioEncodeFAAC
m_pInBuff	core/audioEncodeOMX.h	/^	OMX_BUFFERHEADERTYPE *m_pInBuff[NUM_OF_IN_BUFFERS];$/;"	m	class:AudioEncodeOMX
m_pInBuffer	core/Mp4Player.h	/^	unsigned char* m_pInBuffer;$/;"	m	class:Mp4FilePlayer
m_pInImage	core/movieHeaderTail.h	/^	unsigned char* m_pInImage;$/;"	m	class:MovieHeaderTail
m_pInPortDef	core/audioEncodeOMX.h	/^	OMX_PARAM_PORTDEFINITIONTYPE *m_pInPortDef;$/;"	m	class:AudioEncodeOMX
m_pKernel	Command/Function.h	/^	Kernel			*m_pKernel;$/;"	m	class:CFunction
m_pKernel	KVideo/streamVideoManager.h	/^	Kernel* m_pKernel;$/;"	m	class:StreamVideoManager
m_pKernel	KVideo/vgaProviderSystem.h	/^	Kernel* m_pKernel;$/;"	m	class:VGAProviderSystem
m_pKernel	core/baseMode.h	/^	Kernel* m_pKernel;$/;"	m	class:BaseMode
m_pKernel	liveCourse/classWxManager.h	/^	Kernel* m_pKernel;$/;"	m	class:ClassWxManager
m_pKernel	liveCourse/liveCourseManager.h	/^	Kernel* m_pKernel;$/;"	m	class:LiveCourseManager
m_pKernel	liveCourse/subVideoManager.h	/^	Kernel* m_pKernel;$/;"	m	class:SubVideoManager
m_pKernel	web/modelStatus.h	/^	Kernel* m_pKernel;$/;"	m	class:ModelStatus
m_pKernel	web/recordList.h	/^	Kernel* m_pKernel;$/;"	m	class:RecordList
m_pListener	core/movieHeaderTail.h	/^	IMovieHeaderTailStreamListener* m_pListener;$/;"	m	class:MovieHeaderTail
m_pListener	timer.h	/^	ITimerListener* m_pListener;$/;"	m	class:Timer
m_pListener	utils/vgaState.h	/^	IVGAStateListener* m_pListener;$/;"	m	class:VGAStateHandle
m_pLiveCourseManager	monitor/monitorSender.h	/^	LiveCourseManager* m_pLiveCourseManager;$/;"	m	class:MonitorSender
m_pLiveEncHandle	core/mixtureMode_IPC.h	/^	OMX_HANDLETYPE m_pLiveEncHandle; \/**< double birate enc *\/$/;"	m	class:MixtureMode_IPC
m_pLiveEncHandle	core/mixtureMode_SDI.h	/^	OMX_HANDLETYPE m_pLiveEncHandle; \/**< double birate enc *\/$/;"	m	class:MixtureMode_SDI
m_pLiveNfHandle	core/mixtureMode_IPC.h	/^	OMX_HANDLETYPE m_pLiveNfHandle;$/;"	m	class:MixtureMode_IPC
m_pLiveNfHandle	core/mixtureMode_SDI.h	/^	OMX_HANDLETYPE m_pLiveNfHandle;$/;"	m	class:MixtureMode_SDI
m_pLogFile	core/mixtureMode_IPC.h	/^	FILE*			m_pLogFile;$/;"	m	class:MixtureMode_IPC
m_pModelStatus	kernel.h	/^	ModelStatus*		m_pModelStatus;$/;"	m	class:Kernel
m_pMp4WriterHandle	core/mp4Output.h	/^	void*	m_pMp4WriterHandle;$/;"	m	class:Mp4Output
m_pMtgClient	web/modelStatus.h	/^	MtgClient* m_pMtgClient;$/;"	m	class:ModelStatus
m_pMtglibHandle	mtgFunc.cpp	/^void* m_pMtglibHandle = NULL;$/;"	v
m_pNfHandle	core/mixtureMode_IPC.h	/^	OMX_HANDLETYPE m_pNfHandle;$/;"	m	class:MixtureMode_IPC
m_pNfHandle	core/mixtureMode_SDI.h	/^	OMX_HANDLETYPE m_pNfHandle;$/;"	m	class:MixtureMode_SDI
m_pOutBuf	core/audioEncodeFAAC.h	/^	XDAS_Int8 *m_pOutBuf;$/;"	m	class:AudioEncodeFAAC
m_pOutBuff	core/audioEncodeOMX.h	/^	OMX_BUFFERHEADERTYPE *m_pOutBuff[NUM_OF_OUT_BUFFERS];$/;"	m	class:AudioEncodeOMX
m_pOutPortDef	core/audioEncodeOMX.h	/^	OMX_PARAM_PORTDEFINITIONTYPE *m_pOutPortDef;$/;"	m	class:AudioEncodeOMX
m_pPcmBuffer	core/audioEncodeFAAC.h	/^	unsigned char* m_pPcmBuffer;$/;"	m	class:AudioEncodeFAAC
m_pPcmBuffer	core/audioEncodeOMX.h	/^	unsigned char* m_pPcmBuffer;$/;"	m	class:AudioEncodeOMX
m_pRecordH264File	core/resourceMode_SDI.h	/^	FILE* m_pRecordH264File;$/;"	m	class:ResourceModeHandle_SDI
m_pResourceH264File	core/resourceMode_SDI.h	/^	FILE* m_pResourceH264File[KResourceNum];$/;"	m	class:ResourceModeHandle_SDI
m_pResourceMP4File	core/resourceMode_IPC.h	/^	Mp4Output* m_pResourceMP4File[KResourceNum];$/;"	m	class:ResourceModeHandle_IPC
m_pResourceMP4File	core/resourceMode_SDI.h	/^	Mp4Output* m_pResourceMP4File[KResourceNum];$/;"	m	class:ResourceModeHandle_SDI
m_pSDIDEIHandle	core/mixtureMode_SDI.h	/^	OMX_HANDLETYPE m_pSDIDEIHandle;$/;"	m	class:MixtureMode_SDI
m_pSDIDEIHandle	core/resourceMode_SDI.h	/^	OMX_HANDLETYPE m_pSDIDEIHandle[KMaxSDICount];$/;"	m	class:ResourceModeHandle_SDI
m_pSDIEncHandle	core/mixtureMode_SDI.h	/^	OMX_HANDLETYPE m_pSDIEncHandle; \/**< for channel 1 to enc*\/$/;"	m	class:MixtureMode_SDI
m_pSDIEncHandle	core/resourceMode_SDI.h	/^	OMX_HANDLETYPE m_pSDIEncHandle[KMaxSDICount];$/;"	m	class:ResourceModeHandle_SDI
m_pSDINfHandle	core/mixtureMode_SDI.h	/^	OMX_HANDLETYPE m_pSDINfHandle; \/**< for channel 1 to enc *\/$/;"	m	class:MixtureMode_SDI
m_pSDIScaleHandle	core/mixtureMode_SDI.h	/^	OMX_HANDLETYPE m_pSDIScaleHandle;$/;"	m	class:MixtureMode_SDI
m_pScaleHandle	KVideo/vgaProviderSystem.h	/^	OMX_HANDLETYPE m_pScaleHandle;$/;"	m	class:VGAProviderSystem
m_pScaleHandle	core/Mp4Player.h	/^	OMX_HANDLETYPE m_pScaleHandle;$/;"	m	class:Mp4FilePlayer
m_pScaleHandle	core/mixtureMode_IPC.h	/^	OMX_HANDLETYPE m_pScaleHandle[KMaxDecComponentCount];$/;"	m	class:MixtureMode_IPC
m_pSendBuffer	Command/AssistCommandHandle.h	/^	BYTE m_pSendBuffer[IC2_COMMAND_MAXLEN];$/;"	m	class:AssistCommandHandle
m_pSendBuffer	Command/KernelBoardCommandHandle.h	/^	BYTE m_pSendBuffer[IC2_COMMAND_MAXLEN];$/;"	m	class:KernelBoardCommandHandle
m_pSetting	Command/AssistCommandHandle.h	/^	Setting* m_pSetting;$/;"	m	class:AssistCommandHandle
m_pSetting	Command/Function.h	/^	Setting			*m_pSetting;$/;"	m	class:CFunction
m_pSetting	Command/KernelBoardCommandHandle.h	/^	Setting *m_pSetting;$/;"	m	class:KernelBoardCommandHandle
m_pSetting	core/HDMIDisplayManager.h	/^	Setting* m_pSetting;$/;"	m	class:HDMIDisplayManager
m_pSetting	core/mixtureMode_IPC.h	/^	Setting* m_pSetting;$/;"	m	class:MixtureMode_IPC
m_pSetting	core/mixtureMode_SDI.h	/^	Setting* m_pSetting;$/;"	m	class:MixtureMode_SDI
m_pSetting	core/resourceMode_IPC.h	/^	Setting* m_pSetting;$/;"	m	class:ResourceModeHandle_IPC
m_pSetting	core/resourceMode_SDI.h	/^	Setting* m_pSetting;$/;"	m	class:ResourceModeHandle_SDI
m_pSetting	core/rtmpManager.h	/^	Setting* m_pSetting;$/;"	m	class:RtmpManager
m_pSetting	liveCourse/classWxManager.h	/^	Setting* m_pSetting;$/;"	m	class:ClassWxManager
m_pSetting	liveCourse/courseWxManager.h	/^	Setting* m_pSetting;$/;"	m	class:CourseWxManager
m_pSetting	liveCourse/liveCourseManager.h	/^	Setting* m_pSetting;$/;"	m	class:LiveCourseManager
m_pSetting	monitor/monitorSender.h	/^	Setting* m_pSetting;$/;"	m	class:MonitorSender
m_pSpxListener	liveCourse/courseWxManager.h	/^	ILiveCourseManagerObserver* m_pSpxListener;$/;"	m	class:CourseWxManager
m_pStudentSubInterface	liveCourse/subVideoManager.h	/^	KVideoInterface* m_pStudentSubInterface;$/;"	m	class:SubVideoManager
m_pTeacherSubInterface	liveCourse/subVideoManager.h	/^	KVideoInterface* m_pTeacherSubInterface;$/;"	m	class:SubVideoManager
m_pUdpCommandListener	Command/AssistCommandHandle.h	/^	IUDPCommandListener * m_pUdpCommandListener;$/;"	m	class:AssistCommandHandle
m_pUdpCommandListener	Command/KernelBoardCommandHandle.h	/^	IUDPCommandListener * m_pUdpCommandListener;$/;"	m	class:KernelBoardCommandHandle
m_pVGAEncHandle	core/mixtureMode_SDI.h	/^	OMX_HANDLETYPE m_pVGAEncHandle;$/;"	m	class:MixtureMode_SDI
m_pVGAEncHandle	core/resourceMode_SDI.h	/^	OMX_HANDLETYPE m_pVGAEncHandle;$/;"	m	class:ResourceModeHandle_SDI
m_pVGAScaleHandle	core/mixtureMode_IPC.h	/^	OMX_HANDLETYPE m_pVGAScaleHandle; \/**< VGA的处理*\/$/;"	m	class:MixtureMode_IPC
m_pVGAScaleHandle	core/mixtureMode_SDI.h	/^	OMX_HANDLETYPE m_pVGAScaleHandle; \/**< VGA的处理*\/$/;"	m	class:MixtureMode_SDI
m_pVideoInterface	KVideo/streamVideoManager.h	/^	KVideo::KVideoInterface*	m_pVideoInterface[MAX_IPC];$/;"	m	class:StreamVideoManager
m_password	KVideo/CardInfo.h	/^	string m_password;$/;"	m	class:KVideo::CardInfo
m_pc	core/Mp4Player.h	/^	H264_ParsingCtx m_pc;$/;"	m	class:Mp4FilePlayer
m_pcmMutex	core/audioEncodeFAAC.h	/^	Mutex   	m_pcmMutex;$/;"	m	class:AudioEncodeFAAC
m_pcmSem	core/audioEncodeOMX.h	/^	semp_t   m_pcmSem;$/;"	m	class:AudioEncodeOMX
m_pctrlHandle	core/Mp4Player.h	/^	OMX_HANDLETYPE m_pctrlHandle;$/;"	m	class:Mp4FilePlayer
m_pctrlHandle	core/movieHeaderTail.h	/^	OMX_HANDLETYPE m_pctrlHandle;$/;"	m	class:MovieHeaderTail
m_pdAnalyHandle	hikFunc.cpp	/^void   *m_pdAnalyHandle = NULL;$/;"	v
m_pdHikHandle	hikFunc.cpp	/^void   *m_pdHikHandle = NULL; \/**< 动态库指针 *\/$/;"	v
m_periodCount	KVideo/audioCapture.h	/^	unsigned int m_periodCount;$/;"	m	class:AudioCapture
m_periodCount	core/audioEncodeFAAC.h	/^	unsigned int m_periodCount;$/;"	m	class:AudioEncodeFAAC
m_periodTime	KVideo/audioCapture.h	/^	unsigned  int m_periodTime;$/;"	m	class:AudioCapture
m_periodTime	core/audioEncodeFAAC.h	/^	unsigned  int m_periodTime;$/;"	m	class:AudioEncodeFAAC
m_plibHandle	core/rtmpHandle.h	/^	void *m_plibHandle;$/;"	m	class:RtmpHandle
m_port	KVideo/CardInfo.h	/^	int m_port;$/;"	m	class:KVideo::CardInfo
m_port_sem	core/audioEncodeOMX.h	/^	semp_t *m_port_sem;$/;"	m	class:AudioEncodeOMX
m_preExchangeImagePhyAddr	core/mixtureMode_IPC.h	/^	long long m_preExchangeImagePhyAddr;$/;"	m	class:MixtureMode_IPC
m_preExchangeImagePhyAddr	core/mixtureMode_SDI.h	/^	long long m_preExchangeImagePhyAddr;$/;"	m	class:MixtureMode_SDI
m_r14	utils/vgaState.h	/^	unsigned char m_r14;$/;"	m	class:VGAStateHandle
m_r37	utils/vgaState.h	/^	unsigned char m_r37;$/;"	m	class:VGAStateHandle
m_r38	utils/vgaState.h	/^	unsigned char m_r38;$/;"	m	class:VGAStateHandle
m_r39	utils/vgaState.h	/^	unsigned char m_r39;$/;"	m	class:VGAStateHandle
m_r3a	utils/vgaState.h	/^	unsigned char m_r3a;$/;"	m	class:VGAStateHandle
m_rd	core/audioEncodeOMX.h	/^    fd_set m_rd;$/;"	m	class:AudioEncodeOMX
m_readPcmAttr	core/audioEncodeFAAC.h	/^	pthread_attr_t m_readPcmAttr;$/;"	m	class:AudioEncodeFAAC
m_readPcmThreadId	core/audioEncodeFAAC.h	/^	pthread_t m_readPcmThreadId;$/;"	m	class:AudioEncodeFAAC
m_reconnectTimer	core/rtmpHandle.h	/^	Timer m_reconnectTimer;$/;"	m	class:RtmpHandle
m_recordH264fd	core/mixtureMode_IPC.h	/^	int		m_recordH264fd;$/;"	m	class:MixtureMode_IPC
m_recordH264fd	core/mixtureMode_SDI.h	/^	int	  m_recordH264fd;$/;"	m	class:MixtureMode_SDI
m_recordHandle	core/audioEncodeFAAC.h	/^	snd_pcm_t* m_recordHandle;$/;"	m	class:AudioEncodeFAAC
m_recordList	kernel.h	/^	RecordList		m_recordList;$/;"	m	class:Kernel
m_recordMode	setting.h	/^	int			m_recordMode;$/;"	m	class:Setting
m_recordParam	setting.h	/^	BaseRecordParam		m_recordParam;$/;"	m	class:Setting
m_recordTemplate	setting.h	/^	tagRecordTemplate m_recordTemplate[MAX_TEMPLATE_COUNT];$/;"	m	class:Setting
m_recordUtf8Param	setting.h	/^	stUtf8RecordParam   m_recordUtf8Param;$/;"	m	class:Setting
m_resourceH264fd	core/mixtureMode_IPC.h	/^	int		m_resourceH264fd[KResourceNum];$/;"	m	class:MixtureMode_IPC
m_resourceH264fd	core/mixtureMode_SDI.h	/^	int   m_resourceH264fd[KResourceNum];$/;"	m	class:MixtureMode_SDI
m_resourceMP4Sem	core/resourceMode_SDI.h	/^	semp_t		m_resourceMP4Sem[KResourceNum];$/;"	m	class:ResourceModeHandle_SDI
m_role	liveCourse/courseWxManager.h	/^	ELiveCourseRole m_role;$/;"	m	class:CourseWxManager
m_rtmpHandle	core/mixtureMode_SDI.h	/^	RtmpHandle*	m_rtmpHandle;$/;"	m	class:MixtureMode_SDI
m_rtmpHandle	core/resourceMode_IPC.h	/^	RtmpHandle*	m_rtmpHandle;$/;"	m	class:ResourceModeHandle_IPC
m_rtmpHandle	core/resourceMode_SDI.h	/^	RtmpHandle*	m_rtmpHandle;$/;"	m	class:ResourceModeHandle_SDI
m_rtmpHandle	core/rtmpManager.h	/^	RtmpHandle* m_rtmpHandle;$/;"	m	class:RtmpManager
m_rtmpHandle	web/modelStatus.h	/^	RtmpHandle* m_rtmpHandle;$/;"	m	class:ModelStatus
m_rtmpManager	kernel.h	/^	RtmpManager m_rtmpManager;$/;"	m	class:Kernel
m_scaleComponent	KVideo/vgaProviderSystem.h	/^	ComponentWrapper *m_scaleComponent;$/;"	m	class:VGAProviderSystem
m_scaleComponent	core/Mp4Player.h	/^	ComponentWrapper *m_scaleComponent;$/;"	m	class:Mp4FilePlayer
m_scaleComponent	core/mixtureMode_IPC.h	/^	ComponentWrapper *m_scaleComponent[KMaxDecComponentCount];$/;"	m	class:MixtureMode_IPC
m_scaleParams	core/Mp4Player.h	/^	stConnInConnOutThreadArgs m_scaleParams;$/;"	m	class:Mp4FilePlayer
m_scaleParams	core/mixtureMode_IPC.h	/^	stConnInConnOutThreadArgs m_scaleParams[KMaxDecComponentCount];$/;"	m	class:MixtureMode_IPC
m_sceneBackPicInfo	setting.h	/^	SceneBackPicInfo	m_sceneBackPicInfo;$/;"	m	class:Setting
m_sceneMediaFileInfo	setting.h	/^	SceneMeidaFileInfo	m_sceneMediaFileInfo;$/;"	m	class:Setting
m_sceneMixPicInfo	setting.h	/^	SceneMixPicInfo		m_sceneMixPicInfo;$/;"	m	class:Setting
m_sceneStringInfo	setting.h	/^	SceneStringInfo		m_sceneStringInfo;$/;"	m	class:Setting
m_sceneVideoInfo	setting.h	/^	SceneVideoInfo	m_sceneVideoInfo[SOURCE_SCENE_COUNT];$/;"	m	class:Setting
m_sdiDEIComponent	core/mixtureMode_SDI.h	/^	ComponentWrapper *m_sdiDEIComponent;$/;"	m	class:MixtureMode_SDI
m_sdiDEIParams	core/mixtureMode_SDI.h	/^	stConnInConnOutThreadArgs m_sdiDEIParams;$/;"	m	class:MixtureMode_SDI
m_sdiEncComponent	core/mixtureMode_SDI.h	/^	ComponentWrapper *m_sdiEncComponent;$/;"	m	class:MixtureMode_SDI
m_sdiEncParams	core/mixtureMode_SDI.h	/^	stConnInConnOutThreadArgs m_sdiEncParams;$/;"	m	class:MixtureMode_SDI
m_sdiNfComponent	core/mixtureMode_SDI.h	/^	ComponentWrapper *m_sdiNfComponent;$/;"	m	class:MixtureMode_SDI
m_sdiNfParams	core/mixtureMode_SDI.h	/^	stConnInConnOutThreadArgs m_sdiNfParams;$/;"	m	class:MixtureMode_SDI
m_sdiProvider	core/resourceMode_SDI.h	/^	SDIVideoProviderSystem m_sdiProvider;$/;"	m	class:ResourceModeHandle_SDI
m_sdiScaleComponent	core/mixtureMode_SDI.h	/^	ComponentWrapper *m_sdiScaleComponent;$/;"	m	class:MixtureMode_SDI
m_sdiScaleParams	core/mixtureMode_SDI.h	/^	stConnInConnOutThreadArgs m_sdiScaleParams;$/;"	m	class:MixtureMode_SDI
m_sdiVideoProvider	kernel.h	/^	SDIVideoProviderSystem m_sdiVideoProvider;$/;"	m	class:Kernel
m_setting	kernel.h	/^	Setting 		m_setting;$/;"	m	class:Kernel
m_src	core/audioEncodeFAAC.h	/^    XDAS_Int8                  *m_src[XDM_MAX_IO_BUFFERS];$/;"	m	class:AudioEncodeFAAC
m_stRTPPack	core/mixtureMode_SDI.h	/^	stRTPPacket m_stRTPPack;$/;"	m	class:MixtureMode_SDI
m_stRTPPack	core/resourceMode_IPC.h	/^	stRTPPacket m_stRTPPack;$/;"	m	class:ResourceModeHandle_IPC
m_stRTPPack	core/resourceMode_SDI.h	/^	stRTPPacket m_stRTPPack;$/;"	m	class:ResourceModeHandle_SDI
m_state	liveMediaState.h	/^	StreamMediaState 		m_state;$/;"	m	class:StateHandle
m_stateHandle	kernel.h	/^	StateHandle		m_stateHandle;$/;"	m	class:Kernel
m_state_sem	core/audioEncodeOMX.h	/^	semp_t *m_state_sem;$/;"	m	class:AudioEncodeOMX
m_strACCCourseID	setting.h	/^	string			m_strACCCourseID;$/;"	m	class:Setting
m_strACCFolderID	setting.h	/^	string			m_strACCFolderID;$/;"	m	class:Setting
m_strACCFolderName	setting.h	/^	string			m_strACCFolderName;$/;"	m	class:Setting
m_strACCFolderTreeID	setting.h	/^	string 			m_strACCFolderTreeID;$/;"	m	class:Setting
m_strACCFolderType	setting.h	/^	string			m_strACCFolderType;$/;"	m	class:Setting
m_strACCLoginName	setting.h	/^	string 			m_strACCLoginName;$/;"	m	class:Setting
m_strACCLoginPassword	setting.h	/^	string			m_strACCLoginPassword;$/;"	m	class:Setting
m_strACCProductID	setting.h	/^	string			m_strACCProductID;$/;"	m	class:Setting
m_strACCServerID	setting.h	/^	string			m_strACCServerID;$/;"	m	class:Setting
m_strAudioDeviceName	setting.h	/^	string 		m_strAudioDeviceName;$/;"	m	class:Setting
m_strBkImgName	core/osdManager.h	/^	string  m_strBkImgName; 		\/**< 背景图片		*\/$/;"	m	class:OSDManager
m_strBuilding	setting.h	/^	char*			m_strBuilding;$/;"	m	class:Setting
m_strCampus	setting.h	/^	char*			m_strCampus;$/;"	m	class:Setting
m_strClassRoomID	setting.h	/^	string 		m_strClassRoomID;$/;"	m	class:Setting
m_strClassStatusPath	liveCourse/classWxManager.h	/^	string  m_strClassStatusPath;$/;"	m	class:ClassWxManager
m_strClassStatusPath	liveCourse/courseWxManager.h	/^	string  m_strClassStatusPath;$/;"	m	class:CourseWxManager
m_strCourseName	Command/AssistCommandHandle.h	/^	string 	 m_strCourseName;$/;"	m	class:AssistCommandHandle
m_strCourseStatusPath	liveCourse/classWxManager.h	/^	string	m_strCourseStatusPath;$/;"	m	class:ClassWxManager
m_strCourseStatusPath	liveCourse/courseWxManager.h	/^	string	m_strCourseStatusPath;$/;"	m	class:CourseWxManager
m_strDestPath	setting.h	/^	string			m_strDestPath;$/;"	m	class:Setting
m_strDeviceName	KVideo/audioCapture.h	/^	string 	m_strDeviceName;$/;"	m	class:AudioCapture
m_strDeviceName	core/audioEncodeFAAC.h	/^	string 	m_strDeviceName;$/;"	m	class:AudioEncodeFAAC
m_strEnterPath	liveCourse/classWxManager.h	/^	string	m_strEnterPath;$/;"	m	class:ClassWxManager
m_strEnterPath	liveCourse/courseWxManager.h	/^	string	m_strEnterPath;$/;"	m	class:CourseWxManager
m_strFilename	core/mp4Output.h	/^	string  m_strFilename;$/;"	m	class:Mp4Output
m_strForegroundImgName	core/osdManager.h	/^	string	m_strForegroundImgName;	\/**< 前景图片 	*\/$/;"	m	class:OSDManager
m_strHDMIDisplayDeviceName	setting.h	/^	string			m_strHDMIDisplayDeviceName;$/;"	m	class:Setting
m_strInterRtmpUrl	setting.h	/^	string		m_strInterRtmpUrl;$/;"	m	class:Setting
m_strLCAACPath	setting.h	/^	string		m_strLCAACPath;$/;"	m	class:Setting
m_strLCRecordPath	setting.h	/^	string 		m_strLCRecordPath;$/;"	m	class:Setting
m_strLCRtmpUrl	setting.h	/^	string		m_strLCRtmpUrl;$/;"	m	class:Setting
m_strLCSpeexPath	setting.h	/^	string 		m_strLCSpeexPath;$/;"	m	class:Setting
m_strLCStudentPath	setting.h	/^	string		m_strLCStudentPath;$/;"	m	class:Setting
m_strLCTeacherPath	setting.h	/^	string		m_strLCTeacherPath;$/;"	m	class:Setting
m_strLCVGAPath	setting.h	/^	string 		m_strLCVGAPath;$/;"	m	class:Setting
m_strLeavePath	liveCourse/classWxManager.h	/^	string  m_strLeavePath;$/;"	m	class:ClassWxManager
m_strLeavePath	liveCourse/courseWxManager.h	/^	string  m_strLeavePath;$/;"	m	class:CourseWxManager
m_strLiveCourseIP	setting.h	/^	string 		m_strLiveCourseIP;$/;"	m	class:Setting
m_strMac	monitor/monitorSender.h	/^	string  m_strMac;$/;"	m	class:MonitorSender
m_strMessage	monitor/monitorSender.h	/^	string 	m_strMessage;$/;"	m	class:MonitorSender
m_strMp4FileName	core/mixtureMode_IPC.h	/^	string m_strMp4FileName;$/;"	m	class:MixtureMode_IPC
m_strMp4FileName	core/mixtureMode_SDI.h	/^	string m_strMp4FileName;$/;"	m	class:MixtureMode_SDI
m_strMp4FileName	core/resourceMode_IPC.h	/^	string m_strMp4FileName;$/;"	m	class:ResourceModeHandle_IPC
m_strMp4FileName	core/resourceMode_SDI.h	/^	string m_strMp4FileName;$/;"	m	class:ResourceModeHandle_SDI
m_strMtgIP	core/mtgClient.h	/^	string m_strMtgIP;$/;"	m	class:MtgClient
m_strMtgIp	liveCourse/classWxManager.h	/^	string m_strMtgIp;$/;"	m	class:ClassWxManager
m_strMtgIp	liveCourse/courseWxManager.h	/^	string  m_strMtgIp;$/;"	m	class:CourseWxManager
m_strMtgIp	monitor/monitorSender.h	/^	string	m_strMtgIp;$/;"	m	class:MonitorSender
m_strMtgIp	setting.h	/^	string 		m_strMtgIp;$/;"	m	class:Setting
m_strOwnIP	Command/KernelBoardCommandHandle.h	/^	string m_strOwnIP;$/;"	m	class:KernelBoardCommandHandle
m_strOwnIP	setting.h	/^	string 		m_strOwnIP;$/;"	m	class:Setting
m_strRecordTemplatePath	setting.h	/^	string 			m_strRecordTemplatePath; \/\/in this path, saved png files$/;"	m	class:Setting
m_strRecordTemplateXMl	setting.h	/^	string 		m_strRecordTemplateXMl;	\/**< 模板文件的名字 *\/$/;"	m	class:Setting
m_strResponsePath	liveCourse/classWxManager.h	/^	string  m_strResponsePath;$/;"	m	class:ClassWxManager
m_strRoomId	liveCourse/classWxManager.h	/^	string m_strRoomId;$/;"	m	class:ClassWxManager
m_strRoomName	setting.h	/^	char* 			m_strRoomName;$/;"	m	class:Setting
m_strRouter	monitor/monitorSender.h	/^	string 	m_strRouter;$/;"	m	class:MonitorSender
m_strRtmpPath	liveCourse/classWxManager.h	/^	string 	m_strRtmpPath;$/;"	m	class:ClassWxManager
m_strSaveFile	setting.h	/^	string		m_strSaveFile;$/;"	m	class:Setting
m_strSavePath	setting.h	/^	string		m_strSavePath;$/;"	m	class:Setting
m_strSchool	setting.h	/^	char* 			m_strSchool;$/;"	m	class:Setting
m_strSharePath	setting.h	/^	string		m_strSharePath;$/;"	m	class:Setting
m_strSharePathUsername	setting.h	/^	string 		m_strSharePathUsername;$/;"	m	class:Setting
m_strSubscribeListPath	liveCourse/classWxManager.h	/^	string  m_strSubscribeListPath;$/;"	m	class:ClassWxManager
m_strSubscribeListPath	liveCourse/courseWxManager.h	/^	string  m_strSubscribeListPath;$/;"	m	class:CourseWxManager
m_strTeacherName	Command/AssistCommandHandle.h	/^	string   m_strTeacherName;$/;"	m	class:AssistCommandHandle
m_strTempPath	setting.h	/^	string		m_strTempPath;$/;"	m	class:Setting
m_strUnicodeRelateFileName	setting.h	/^	string 	    m_strUnicodeRelateFileName;$/;"	m	class:Setting
m_strUnitIP	Command/KernelBoardCommandHandle.h	/^	string 	m_strUnitIP;;$/;"	m	class:KernelBoardCommandHandle
m_strUnitIP	setting.h	/^	string 		m_strUnitIP;$/;"	m	class:Setting
m_strUploadCourseId	Command/AssistCommandHandle.h	/^	string 	 m_strUploadCourseId;$/;"	m	class:AssistCommandHandle
m_strUrl	core/rtmpHandle.h	/^	string		m_strUrl;$/;"	m	class:RtmpHandle
m_strUtf8RelateFileName	setting.h	/^	string		m_strUtf8RelateFileName;$/;"	m	class:Setting
m_strVGADisplayDeviceName	setting.h	/^	string 			m_strVGADisplayDeviceName;$/;"	m	class:Setting
m_strVideoListPath	liveCourse/classWxManager.h	/^	string  m_strVideoListPath;$/;"	m	class:ClassWxManager
m_strVideoListPath	liveCourse/courseWxManager.h	/^	string  m_strVideoListPath;$/;"	m	class:CourseWxManager
m_strWebID	setting.h	/^	string		m_strWebID;$/;"	m	class:Setting
m_strWebMonitorPath	liveCourse/courseWxManager.h	/^	string  m_strWebMonitorPath;$/;"	m	class:CourseWxManager
m_streamOnCount	KVideo/captureSDIVideo.cpp	/^int CaptureSDI::m_streamOnCount = 0;$/;"	m	class:CaptureSDI	file:
m_streamOnCount	KVideo/captureSDIVideo.h	/^	static  int m_streamOnCount;$/;"	m	class:CaptureSDI
m_streamVideoManager	core/mixtureMode_IPC.h	/^	StreamVideoManager m_streamVideoManager;$/;"	m	class:MixtureMode_IPC
m_streamVideoManager	core/resourceMode_IPC.h	/^	StreamVideoManager m_streamVideoManager;$/;"	m	class:ResourceModeHandle_IPC
m_studentSceneInfo	core/mixtureMode_IPC.h	/^	SceneVideoInfo	m_studentSceneInfo;$/;"	m	class:MixtureMode_IPC
m_studentSceneInfo	core/mixtureMode_SDI.h	/^	SceneVideoInfo	m_studentSceneInfo;$/;"	m	class:MixtureMode_SDI
m_subVideoManager	liveCourse/liveCourseManager.h	/^	SubVideoManager	m_subVideoManager;$/;"	m	class:LiveCourseManager
m_teacherSceneInfo	core/mixtureMode_IPC.h	/^	SceneVideoInfo 	m_teacherSceneInfo;$/;"	m	class:MixtureMode_IPC
m_teacherSceneInfo	core/mixtureMode_SDI.h	/^	SceneVideoInfo 	m_teacherSceneInfo;$/;"	m	class:MixtureMode_SDI
m_threadAttr	Command/udp.h	/^	pthread_attr_t m_threadAttr;$/;"	m	class:Udp
m_threadAttr	KVideo/captureSDIVideo.h	/^	pthread_attr_t m_threadAttr;$/;"	m	class:CaptureSDI
m_threadAttr	KVideo/captureVga.h	/^	pthread_attr_t m_threadAttr;$/;"	m	class:CaptureVGA
m_threadAttr	core/rtmpHandle.h	/^	pthread_attr_t m_threadAttr;$/;"	m	class:RtmpHandle
m_threadAttr	kernel.h	/^	pthread_attr_t m_threadAttr;$/;"	m	class:Kernel
m_threadID	KVideo/captureSDIVideo.h	/^	pthread_t	m_threadID;$/;"	m	class:CaptureSDI
m_threadID	KVideo/captureVga.h	/^	pthread_t	m_threadID;$/;"	m	class:CaptureVGA
m_threadId	Command/udp.h	/^	pthread_t m_threadId;$/;"	m	class:Udp
m_threadId	core/rtmpHandle.h	/^	pthread_t m_threadId;$/;"	m	class:RtmpHandle
m_threadId	kernel.h	/^	pthread_t m_threadId;$/;"	m	class:Kernel
m_threadId	monitor/monitorSender.h	/^	pthread_t	m_threadId;$/;"	m	class:MonitorSender
m_threadSendId	monitor/monitorSender.h	/^	pthread_t	m_threadSendId;$/;"	m	class:MonitorSender
m_threadSend_attr	monitor/monitorSender.h	/^	pthread_attr_t m_threadSend_attr;$/;"	m	class:MonitorSender
m_thread_attr	monitor/monitorSender.h	/^	pthread_attr_t m_thread_attr;$/;"	m	class:MonitorSender
m_timeout	timer.h	/^	struct event m_timeout;$/;"	m	class:Timer	typeref:struct:Timer::event
m_timer	core/HDMIDisplayManager.h	/^	Timer m_timer;$/;"	m	class:HDMIDisplayManager
m_timer	liveCourse/classWxManager.h	/^	Timer	m_timer;$/;"	m	class:ClassWxManager
m_timer	liveCourse/courseWxManager.h	/^	Timer	m_timer;$/;"	m	class:CourseWxManager
m_timerCount	KVideo/HikVideo.h	/^	int		m_timerCount;$/;"	m	class:KVideo::HikVideo
m_tv	core/movieHeaderTail.h	/^	struct timeval m_tv;$/;"	m	class:MovieHeaderTail	typeref:struct:MovieHeaderTail::timeval
m_tv	timer.h	/^	struct timeval m_tv;$/;"	m	class:Timer	typeref:struct:Timer::timeval
m_type	core/v4lDisplay.h	/^	int	m_type; \/**< 1:HDMI, 2:vga*\/$/;"	m	class:DisplayHandle
m_unitPort	setting.h	/^	WORD		m_unitPort;$/;"	m	class:Setting
m_userId	KVideo/HikVideo.h	/^	long	m_userId;$/;"	m	class:KVideo::HikVideo
m_userId	core/mtgClient.h	/^	int	 m_userId;$/;"	m	class:MtgClient
m_userId	liveCourse/classWxManager.h	/^	int	   m_userId;$/;"	m	class:ClassWxManager
m_userId	liveCourse/courseWxManager.h	/^	int		m_userId;$/;"	m	class:CourseWxManager
m_userSeq	core/mtgClient.h	/^	char m_userSeq[8];$/;"	m	class:MtgClient
m_username	KVideo/CardInfo.h	/^	string m_username;$/;"	m	class:KVideo::CardInfo
m_vecDestName	kernel.h	/^	vector<string> m_vecDestName;$/;"	m	class:Kernel
m_vecListeners	KVideo/captureSDIVideo.h	/^	vector<ICaptureSDIListener*> m_vecListeners;$/;"	m	class:CaptureSDI
m_vecListeners	KVideo/captureVga.h	/^	vector<ICaptureVGAListener*> m_vecListeners;$/;"	m	class:CaptureVGA
m_vecListeners	KVideo/sdiVideoProviderSystem.h	/^	vector<ISDIVideoProviderObserver*> m_vecListeners;$/;"	m	class:SDIVideoProviderSystem
m_vecListeners	core/audioEncodeFAAC.h	/^	vector<IAudioEncodeListener*> m_vecListeners;$/;"	m	class:AudioEncodeFAAC
m_vecListeners	core/audioEncodeOMX.h	/^	vector<IAudioEncodeListener*> m_vecListeners;$/;"	m	class:AudioEncodeOMX
m_vecListeners	core/mtgClient.h	/^	vector<IMtgListener*> m_vecListeners;$/;"	m	class:MtgClient
m_vecListeners	core/rtmpHandle.h	/^	vector <IRtmpListener *> m_vecListeners;$/;"	m	class:RtmpHandle
m_vecObservers	liveCourse/classWxManager.h	/^	vector<IClassWxObserver*> m_vecObservers;$/;"	m	class:ClassWxManager
m_vecObservers	liveCourse/courseWxManager.h	/^	vector<ICourseWxObserver*> m_vecObservers;$/;"	m	class:CourseWxManager
m_vecObservers	liveCourse/liveCourseManager.h	/^	vector<ILiveCourseManagerObserver*> m_vecObservers;$/;"	m	class:LiveCourseManager
m_vecSrcName	kernel.h	/^	vector<string> m_vecSrcName;$/;"	m	class:Kernel
m_vecStreamInfos	liveCourse/courseWxManager.h	/^	vector<tagStreamInfo> m_vecStreamInfos;$/;"	m	class:CourseWxManager
m_vecSubscribeInfos	liveCourse/courseWxManager.h	/^	vector<stSubscribeInfo> m_vecSubscribeInfos;$/;"	m	class:CourseWxManager
m_vgaCaptureaftTime	KVideo/vgaProviderSystem.h	/^	long long m_vgaCaptureaftTime;$/;"	m	class:VGAProviderSystem
m_vgaCapturebefTime	KVideo/vgaProviderSystem.h	/^	long long m_vgaCapturebefTime;$/;"	m	class:VGAProviderSystem
m_vgaChangedMutex	core/mixtureMode_IPC.h	/^	Mutex		m_vgaChangedMutex;$/;"	m	class:MixtureMode_IPC
m_vgaChangedMutex	core/mixtureMode_SDI.h	/^	Mutex		m_vgaChangedMutex;$/;"	m	class:MixtureMode_SDI
m_vgaDisplay	kernel.h	/^	DisplayHandle m_vgaDisplay;$/;"	m	class:Kernel
m_vgaEncBitrate	setting.h	/^	int				m_vgaEncBitrate;$/;"	m	class:Setting
m_vgaEncComponent	core/mixtureMode_SDI.h	/^	ComponentWrapper *m_vgaEncComponent;$/;"	m	class:MixtureMode_SDI
m_vgaEncParams	core/resourceMode_SDI.h	/^	stConnInConnOutThreadArgs m_vgaEncParams;$/;"	m	class:ResourceModeHandle_SDI
m_vgaFreezeTimer	kernel.h	/^	Timer		m_vgaFreezeTimer;$/;"	m	class:Kernel
m_vgaFreezeTimerValid	kernel.h	/^	bool		m_vgaFreezeTimerValid;$/;"	m	class:Kernel
m_vgaH264fd	core/mixtureMode_IPC.h	/^	int		m_vgaH264fd;$/;"	m	class:MixtureMode_IPC
m_vgaMutex	KVideo/vgaProviderSystem.h	/^	Mutex		m_vgaMutex;$/;"	m	class:VGAProviderSystem
m_vgaProviderSystem	kernel.h	/^	VGAProviderSystem m_vgaProviderSystem;$/;"	m	class:Kernel
m_vgaScaleComponent	core/mixtureMode_IPC.h	/^	ComponentWrapper* m_vgaScaleComponent;	\/**< VGA处理*\/$/;"	m	class:MixtureMode_IPC
m_vgaScaleComponent	core/mixtureMode_SDI.h	/^	ComponentWrapper* m_vgaScaleComponent;	\/**< VGA处理*\/$/;"	m	class:MixtureMode_SDI
m_vgaScaleParams	core/Mp4Player.h	/^	stConnInConnOutThreadArgs m_vgaScaleParams;$/;"	m	class:Mp4FilePlayer
m_videoCounts	core/rtmpHandle.h	/^	unsigned int m_videoCounts;$/;"	m	class:RtmpHandle
m_videoDelayParams	setting.h	/^	stVideoDelayParam m_videoDelayParams[MAX_RESOLUTION_COUNT];$/;"	m	class:Setting
m_videoFrameCount	core/rtmpHandle.h	/^	int				m_videoFrameCount;$/;"	m	class:RtmpHandle
m_videoFramerate	core/rtmpHandle.h	/^	int m_videoFramerate;$/;"	m	class:RtmpHandle
m_videoFramerate	setting.h	/^	int 		m_videoFramerate;$/;"	m	class:Setting
m_videoHeight	core/rtmpHandle.h	/^	int			m_videoHeight;$/;"	m	class:RtmpHandle
m_videoSampleCount	core/Mp4Player.h	/^	int				m_videoSampleCount;$/;"	m	class:Mp4FilePlayer
m_videoSampleId	core/Mp4Player.h	/^	int				m_videoSampleId;$/;"	m	class:Mp4FilePlayer
m_videoWidth	core/rtmpHandle.h	/^	int			m_videoWidth;$/;"	m	class:RtmpHandle
m_wEncodeServicePort	Command/AssistCommandHandle.h	/^	WORD			m_wEncodeServicePort;$/;"	m	class:AssistCommandHandle
m_wOwnPort	Command/KernelBoardCommandHandle.h	/^	WORD m_wOwnPort;$/;"	m	class:KernelBoardCommandHandle
m_wUnitPort	Command/KernelBoardCommandHandle.h	/^	WORD 	m_wUnitPort;$/;"	m	class:KernelBoardCommandHandle
m_webServiceParam	setting.h	/^	WebServiceParam	m_webServiceParam;$/;"	m	class:Setting
m_wr	core/audioEncodeOMX.h	/^    fd_set m_wr;$/;"	m	class:AudioEncodeOMX
magic	liveCourse/livemtgConstDefine.h	/^	int magic;														\/\/魔数$/;"	m	struct:tagLiveMtgHeader
main	main_native.cpp	/^Int main(Int argc, String argv[])$/;"	f
make	monitor/json_value.cpp	/^Path::make( Value &root ) const$/;"	f	class:Json::Path
makeMemberName	monitor/json_value.cpp	/^   virtual char *makeMemberName( const char *memberName )$/;"	f	class:Json::DefaultValueAllocator
makePath	monitor/json_value.cpp	/^Path::makePath( const std::string &path,$/;"	f	class:Json::Path
map_	monitor/value.h	/^         ObjectValues *map_;$/;"	m	union:Json::Value::ValueHolder
map_	monitor/value.h	/^         ValueInternalMap *map_;$/;"	m	struct:Json::ValueInternalMap::IteratorState
map_	monitor/value.h	/^         ValueInternalMap *map_;$/;"	m	union:Json::Value::ValueHolder
map_	monitor/value.h	/^         ValueInternalMap::IteratorState map_;$/;"	m	union:Json::ValueIteratorBase::__anon11
marker	KVideo/audio/rtpstruct.h	/^	uint8_t marker:1;$/;"	m	struct:RTPHeader
match	monitor/json_reader.cpp	/^Reader::match( Location pattern, $/;"	f	class:Json::Reader
maxInt	monitor/json_value.cpp	/^const Int Value::maxInt = Int( UInt(-1)\/2 );$/;"	m	class:Json::Value	file:
maxInt	monitor/value.h	/^      static const Int maxInt;$/;"	m	class:Json::Value
maxUInt	monitor/json_value.cpp	/^const UInt Value::maxUInt = UInt(-1);$/;"	m	class:Json::Value	file:
maxUInt	monitor/value.h	/^      static const UInt maxUInt;$/;"	m	class:Json::Value
mcfgs	package/ti_sdo_ce_examples_apps_armlivemedia.java	/^    ArrayList<Object> mcfgs = new ArrayList<Object>();$/;"	f	class:ti_sdo_ce_examples_apps_armlivemedia
memUsed	liveCourse/livemtgConstDefine.h	/^	int memUsed;	\/\/使用百分比$/;"	m	struct:tagLiveMtgWebMessage
message	log.cpp	/^void Log::message(const char *str) {$/;"	f	class:Log
messageType	liveCourse/livemtgConstDefine.h	/^	int messageType;$/;"	m	struct:tagLiveMtgWebMessage
message_	monitor/reader.h	/^         std::string message_;$/;"	m	class:Json::Reader::ErrorInfo
minInt	monitor/json_value.cpp	/^const Int Value::minInt = Int( ~(UInt(-1)\/2) );$/;"	m	class:Json::Value	file:
minInt	monitor/value.h	/^      static const Int minInt;$/;"	m	class:Json::Value
mix_adj	KVideo/audio/audio_mixer.h	/^	int mix_adj;				\/\/ adjustment level for mixbuf$/;"	m	struct:__anon4
mix_deinit	KVideo/audio/audio_mixer.cpp	/^void audio_mixer::mix_deinit(stChannelInfo* channel)$/;"	f	class:audio_mixer
mix_frame	KVideo/audio/audio_mixer.cpp	/^void audio_mixer::mix_frame(stAudioMixLevel* plevel, short* mix_in_buffer, int* mix_out_buffer)$/;"	f	class:audio_mixer
mix_init	KVideo/audio/audio_mixer.cpp	/^stChannelInfo* audio_mixer::mix_init(bool key)$/;"	f	class:audio_mixer
mixprocess	KVideo/audio/audio_mixer.cpp	/^void audio_mixer::mixprocess(char* frame, int len)$/;"	f	class:audio_mixer
mode	core/edma.h	/^	int mode; \/\/0和1两种模式$/;"	m	struct:edma_arg
mode	netprotocal/SCSMCommandStruct.h	/^	int	mode;$/;"	m	struct:tagStragyMode
modeID	liveCourse/livemtgConstDefine.h	/^	int modeID[LIVEMTG_LIST_MAXCOUNT];$/;"	m	struct:tagLiveMtgRecorderModeList
moveFile	kernel.cpp	/^void Kernel::moveFile() {$/;"	f	class:Kernel
moveFileThread	kernel.cpp	/^void* moveFileThread(void* pParam) {$/;"	f
mtgHeartbeatCallback	core/mtgInit.cpp	/^void* MtgHeartbeat::mtgHeartbeatCallback(void* pParam) {$/;"	f	class:MtgHeartbeat
mtgIP	core/mtgClient.h	/^	string mtgIP() {$/;"	f	class:MtgClient
mtgjoin_callback	core/mtgClient.cpp	/^int MtgClient::mtgjoin_callback(void* user_data, DWORD conf_id, short msg,$/;"	f	class:MtgClient
mutex	core/Mutex.h	/^	pthread_mutex_t mutex;$/;"	m	class:Mutex
mutex	core/semp.h	/^  pthread_mutex_t mutex;$/;"	m	struct:semp_t
mylist	KVideo/audio/fifo.h	/^typedef std::list<int> mylist;$/;"	t
nBufferCountActual	core/OMXCommonDef.h	/^  OMX_U32 nBufferCountActual;$/;"	m	struct:tagInportParams
nBufferCountActual	core/OMXCommonDef.h	/^  OMX_U32 nBufferCountActual;$/;"	m	struct:tagOutportParams
nBufferSize	core/OMXCommonDef.h	/^  OMX_U32 nBufferSize;$/;"	m	struct:tagInportParams
nBufferSize	core/OMXCommonDef.h	/^  OMX_U32 nBufferSize;$/;"	m	struct:tagOutportParams
nCameraRepeatFrame	setting.h	/^	int 			nCameraRepeatFrame;$/;"	m	struct:stVideoDelayParam
nDiskCheckMinute	kernel.cpp	/^unsigned int nDiskCheckMinute = 0;$/;"	v
nVGASlowFrameCount	setting.h	/^	int				nVGASlowFrameCount;$/;"	m	struct:stVideoDelayParam
name	KVideo/audio/structdef.h	/^	char name[64];$/;"	m	struct:stuserid
name	KVideo/audio/structdef.h	/^	std::string name;$/;"	m	struct:stvideoinfor
name	core/OMXCommonDef.h	/^  char name[16];$/;"	m	struct:tagComponentWrapper
name	utils/commonUtils.cpp	/^char name[20];$/;"	m	struct:__anon1	file:
next_	monitor/json_batchallocator.h	/^      BatchInfo *next_;$/;"	m	struct:Json::BatchAllocator::BatchInfo
next_	monitor/value.h	/^      ValueInternalLink *next_;$/;"	m	class:Json::ValueInternalLink
nice	utils/commonUtils.cpp	/^unsigned int nice;$/;"	m	struct:__anon1	file:
noDuplication	monitor/value.h	/^            noDuplication = 0,$/;"	e	enum:Json::Value::CZString::DuplicationPolicy
nodes_	monitor/reader.h	/^      Nodes nodes_;$/;"	m	class:Json::Reader
normalizeEOL	monitor/json_writer.cpp	/^StyledStreamWriter::normalizeEOL( const std::string &text )$/;"	f	class:Json::StyledStreamWriter
normalizeEOL	monitor/json_writer.cpp	/^StyledWriter::normalizeEOL( const std::string &text )$/;"	f	class:Json::StyledWriter
notifyConnect	Command/AssistCommandHandle.cpp	/^bool AssistCommandHandle::notifyConnect() {$/;"	f	class:AssistCommandHandle
notifyHeartbeatTimerout	KVideo/KVideoInterface.h	/^	virtual void notifyHeartbeatTimerout(KVideoInterface* video) {$/;"	f	class:KVideo::IStreamVideoListener
notifyListener	log.cpp	/^void Log::notifyListener(void (ILogListener::*fun)(Log *log, const char *),$/;"	f	class:Log
notifyRtmpConnect	core/rtmpHandle.h	/^	virtual bool notifyRtmpConnect(RtmpHandle* pRtmpHandle, bool bConnect) {$/;"	f	class:IRtmpListener
notifyRtmpConnect	web/modelStatus.cpp	/^bool ModelStatus::notifyRtmpConnect(RtmpHandle* pRtmpHandle, bool bConnect) {$/;"	f	class:ModelStatus
notifySDIProviderBuffer	core/mixtureMode_SDI.cpp	/^void MixtureMode_SDI::notifySDIProviderBuffer(int index, unsigned char* pNV12Buffer, int width, int height) {$/;"	f	class:MixtureMode_SDI
notifySDIProviderBuffer	core/resourceMode_SDI.cpp	/^void ResourceModeHandle_SDI::notifySDIProviderBuffer(int aIndex, unsigned char* pYUYVBuffer, int width, int height) {$/;"	f	class:ResourceModeHandle_SDI
null	monitor/json_value.cpp	/^const Value Value::null;$/;"	m	class:Json::Value	file:
null	monitor/value.h	/^      static const Value null;$/;"	m	class:Json::Value
nullValue	monitor/value.h	/^      nullValue = 0, \/\/\/< 'null' value$/;"	e	enum:Json::ValueType
numInport	core/OMXCommonDef.h	/^  OMX_U32 numInport;$/;"	m	struct:tagComponentWrapper
numOutport	core/OMXCommonDef.h	/^  OMX_U32 numOutport;$/;"	m	struct:tagComponentWrapper
numberOfCommentPlacement	monitor/value.h	/^      numberOfCommentPlacement$/;"	e	enum:Json::CommentPlacement
numbuffers	KVideo/captureVideoDefines.h	/^	int numbuffers;$/;"	m	struct:capt_obj
numbuffers	core/v4lDisplay.h	/^	int numbuffers;$/;"	m	struct:app_obj
nv12_to_yuv420	utils/colorConvert.cpp	/^ void ColorConvertUtils::nv12_to_yuv420(unsigned char *d, unsigned char *s, int w, int h) {$/;"	f	class:ColorConvertUtils
objectValue	monitor/value.h	/^      objectValue    \/\/\/< object value (collection of name\/value pairs).$/;"	e	enum:Json::ValueType
objectsPerPage_	monitor/json_batchallocator.h	/^   unsigned int objectsPerPage_;$/;"	m	class:Json::BatchAllocator
om	package/ti_sdo_ce_examples_apps_armlivemedia.java	/^    Value.Obj om;$/;"	f	class:ti_sdo_ce_examples_apps_armlivemedia
omx_printf	utils/commonUtils.cpp	/^int CommonUtils::omx_printf(const char *fmt, ...)$/;"	f	class:CommonUtils
onAAC	KVideo/KVideoInterface.h	/^	virtual void onAAC(KVideoInterface* video, void* data, int len) {$/;"	f	class:KVideo::IStreamVideoListener
onAACEncoded	core/audioEncodeInterface.h	/^	virtual void onAACEncoded(unsigned char* pAACBuf, int len) {$/;"	f	class:IAudioEncodeListener
onAACEncoded	core/mixtureMode_IPC.cpp	/^void MixtureMode_IPC::onAACEncoded(unsigned char* pAACBuf, int len) {$/;"	f	class:MixtureMode_IPC
onAACEncoded	core/mixtureMode_SDI.cpp	/^void MixtureMode_SDI::onAACEncoded(unsigned char* pAACBuf, int len) {$/;"	f	class:MixtureMode_SDI
onAACEncoded	core/resourceMode_IPC.cpp	/^void ResourceModeHandle_IPC::onAACEncoded(unsigned char* pAACBuf, int len) {$/;"	f	class:ResourceModeHandle_IPC
onAACEncoded	core/resourceMode_SDI.cpp	/^void ResourceModeHandle_SDI::onAACEncoded(unsigned char* pAACBuf, int len) {$/;"	f	class:ResourceModeHandle_SDI
onAudioOut	core/audioEncodeFAAC.cpp	/^void AudioEncodeFAAC::onAudioOut() {$/;"	f	class:AudioEncodeFAAC
onCaptureSDIBuffer	KVideo/sdiVideoProviderSystem.cpp	/^void SDIVideoProviderSystem::onCaptureSDIBuffer(CaptureSDI* pCaptureSDI,$/;"	f	class:SDIVideoProviderSystem
onCaptureTask	KVideo/captureSDIVideo.cpp	/^bool CaptureSDI::onCaptureTask() {$/;"	f	class:CaptureSDI
onCaptureTask	KVideo/captureVga.cpp	/^bool CaptureVGA::onCaptureTask() {$/;"	f	class:CaptureVGA
onCaptureVGABuffer	KVideo/vgaProviderSystem.cpp	/^void VGAProviderSystem::onCaptureVGABuffer(CaptureVGA* pCaptureHandle, unsigned char* pNV12Buffer, int width, int height) {$/;"	f	class:VGAProviderSystem
onConnectTask	core/Mp4Player.cpp	/^void Mp4FilePlayer::onConnectTask(ComponentWrapper *aComponent) {$/;"	f	class:Mp4FilePlayer
onConnectTask	core/mixtureMode_IPC.cpp	/^void MixtureMode_IPC::onConnectTask(ComponentWrapper *aComponent) {$/;"	f	class:MixtureMode_IPC
onConnectTask	core/mixtureMode_SDI.cpp	/^void MixtureMode_SDI::onConnectTask(ComponentWrapper *aComponent) {$/;"	f	class:MixtureMode_SDI
onConnectTask	core/movieHeaderTail.cpp	/^void MovieHeaderTail::onConnectTask(ComponentWrapper *aComponent) {$/;"	f	class:MovieHeaderTail
onConnectTask	core/resourceMode_SDI.cpp	/^void ResourceModeHandle_SDI::onConnectTask(ComponentWrapper *aComponent) {$/;"	f	class:ResourceModeHandle_SDI
onCourseWxLeave	liveCourse/courseWxManager.h	/^	virtual bool onCourseWxLeave() {$/;"	f	class:ICourseWxObserver
onCourseWxLeave	liveCourse/liveCourseManager.cpp	/^bool LiveCourseManager::onCourseWxLeave() {$/;"	f	class:LiveCourseManager
onError	log.h	/^	virtual void onError(Log *log, const char *str){$/;"	f	class:ILogListener
onH264	KVideo/KVideoInterface.h	/^	virtual void onH264(KVideoInterface* video, int channel, int frameType,$/;"	f	class:KVideo::IStreamVideoListener
onH264	KVideo/streamVideoManager.cpp	/^void StreamVideoManager::onH264(KVideoInterface* video, int channel, int frameType,$/;"	f	class:StreamVideoManager
onH264	liveCourse/subVideoManager.cpp	/^void SubVideoManager::onH264(KVideoInterface* video, int channel, int frameType,$/;"	f	class:SubVideoManager
onHeadTailScaleReadTask	core/mixtureMode_IPC.cpp	/^void MixtureMode_IPC::onHeadTailScaleReadTask() {$/;"	f	class:MixtureMode_IPC
onHeadTailScaleReadTask	core/mixtureMode_SDI.cpp	/^void MixtureMode_SDI::onHeadTailScaleReadTask() {$/;"	f	class:MixtureMode_SDI
onHeadTailScaleWriteTask	core/mixtureMode_IPC.cpp	/^void MixtureMode_IPC::onHeadTailScaleWriteTask() {$/;"	f	class:MixtureMode_IPC
onHeadTailScaleWriteTask	core/mixtureMode_SDI.cpp	/^void MixtureMode_SDI::onHeadTailScaleWriteTask() {$/;"	f	class:MixtureMode_SDI
onJoinCallback	core/mtgClient.h	/^	virtual void onJoinCallback(MtgClient* pMtg, bool bJoinOK) {$/;"	f	class:IMtgListener
onJoinCallback	liveCourse/classWxManager.cpp	/^void ClassWxManager::onJoinCallback(MtgClient* pMtg, bool bJoinOK) {$/;"	f	class:ClassWxManager
onJoinCallback	liveCourse/courseWxManager.cpp	/^void CourseWxManager::onJoinCallback(MtgClient* pMtg, bool bJoinOK) {$/;"	f	class:CourseWxManager
onJoinCallback	web/modelStatus.cpp	/^void ModelStatus::onJoinCallback(MtgClient* pMtg, bool bJoinOK) {$/;"	f	class:ModelStatus
onLiveWriteTask	core/mixtureMode_IPC.cpp	/^void MixtureMode_IPC::onLiveWriteTask(ComponentWrapper *aComponent) {$/;"	f	class:MixtureMode_IPC
onLiveWriteTask	core/mixtureMode_SDI.cpp	/^void MixtureMode_SDI::onLiveWriteTask(ComponentWrapper *aComponent) {$/;"	f	class:MixtureMode_SDI
onMessage	log.h	/^	virtual void onMessage(Log *log, const char *str){$/;"	f	class:ILogListener
onMixReadTask	core/mixtureMode_IPC.cpp	/^void MixtureMode_IPC::onMixReadTask(ComponentWrapper *aComponent) {$/;"	f	class:MixtureMode_IPC
onMixReadTask	core/mixtureMode_SDI.cpp	/^void MixtureMode_SDI::onMixReadTask(ComponentWrapper *aComponent) {$/;"	f	class:MixtureMode_SDI
onNotifyOutStream	core/movieHeaderTail.h	/^	virtual void onNotifyOutStream(unsigned char* pH264Buf, int size) {$/;"	f	class:IMovieHeaderTailStreamListener
onNotifySDIFMT	KVideo/sdiVideoProviderSystem.cpp	/^void SDIVideoProviderSystem::onNotifySDIFMT(CaptureSDI* pCaptureSDI, int width, int height) {$/;"	f	class:SDIVideoProviderSystem
onNotifyStreamVideo	KVideo/streamVideoManager.h	/^	virtual bool onNotifyStreamVideo(const char* pData, int len, bool bIFrame, int index, int channel, bool bChannelChanged = false) {$/;"	f	class:IStreamVideoManagerListener
onNotifyStreamVideo	core/mixtureMode_IPC.cpp	/^bool MixtureMode_IPC::onNotifyStreamVideo(const char* pData, int len, bool bIFrame, int index, int channel, bool bChannelChanged) {$/;"	f	class:MixtureMode_IPC
onNotifyStreamVideo	core/resourceMode_IPC.cpp	/^bool ResourceModeHandle_IPC::onNotifyStreamVideo(const char* pData, int len, bool bIFrame, int index, int channel) {$/;"	f	class:ResourceModeHandle_IPC
onNotifyVGAFMT	KVideo/vgaProviderSystem.cpp	/^void VGAProviderSystem::onNotifyVGAFMT(CaptureVGA* pCaptureHandle, int width, int height) {$/;"	f	class:VGAProviderSystem
onNotifyVGAFreeze	kernel.cpp	/^bool Kernel::onNotifyVGAFreeze() {$/;"	f	class:Kernel
onNotifyVGAStateChanged	kernel.cpp	/^bool Kernel::onNotifyVGAStateChanged(int reason) {$/;"	f	class:Kernel
onNotifyVGAStateChanged	utils/vgaState.h	/^	virtual bool onNotifyVGAStateChanged(int reason) {$/;"	f	class:IVGAStateListener
onOpenUrl	core/rtmpHandle.cpp	/^bool RtmpHandle::onOpenUrl() {$/;"	f	class:RtmpHandle
onProviderH264	KVideo/vgaProviderSystem.h	/^	virtual bool onProviderH264(unsigned char* pH264Buffer, int len) {$/;"	f	class:IVGAProviderObserver
onProviderH264	core/mixtureMode_IPC.cpp	/^bool MixtureMode_IPC::onProviderH264(unsigned char* pH264Buffer, int size) {$/;"	f	class:MixtureMode_IPC
onProviderH264	core/resourceMode_IPC.cpp	/^bool ResourceModeHandle_IPC::onProviderH264(unsigned char* pH264Buffer, int size) {$/;"	f	class:ResourceModeHandle_IPC
onProviderNV12	KVideo/vgaProviderSystem.h	/^	virtual bool onProviderNV12(unsigned char* pNV12Buffer, int width, int height) {$/;"	f	class:IVGAProviderObserver
onProviderNV12	core/mixtureMode_IPC.cpp	/^bool MixtureMode_IPC::onProviderNV12(unsigned char* pNV12Buffer, int width, int height) {$/;"	f	class:MixtureMode_IPC
onProviderNV12	core/mixtureMode_SDI.cpp	/^bool MixtureMode_SDI::onProviderNV12(unsigned char* pNV12Buffer, int width, int height) {$/;"	f	class:MixtureMode_SDI
onProviderNV12	core/resourceMode_IPC.cpp	/^bool ResourceModeHandle_IPC::onProviderNV12(unsigned char* pNV12Buffer, int width, int height) {$/;"	f	class:ResourceModeHandle_IPC
onProviderNV12	core/resourceMode_SDI.cpp	/^bool ResourceModeHandle_SDI::onProviderNV12(unsigned char* pNV12Buffer, int width, int height) {$/;"	f	class:ResourceModeHandle_SDI
onProviderNV12	kernel.cpp	/^bool Kernel::onProviderNV12(unsigned char* pNV12Buffer, int width, int height) {$/;"	f	class:Kernel
onProviderPcm	KVideo/audioCapture.h	/^	virtual bool onProviderPcm(const char* pBuffer, int len) {$/;"	f	class:IAudioCaptureObserver
onProviderPcm	core/audioEncodeInterface.h	/^	virtual bool onProviderPcm(const char* pBuffer, int len) {$/;"	f	class:IAudioEncodeInterface
onProviderPcm	core/audioEncodeOMX.cpp	/^bool AudioEncodeOMX::onProviderPcm(const char* pBuffer, int len) {$/;"	f	class:AudioEncodeOMX
onProviderPcm	kernel.cpp	/^bool Kernel::onProviderPcm(const char* pBuffer, int len) {$/;"	f	class:Kernel
onProviderYUYV	KVideo/vgaProviderSystem.h	/^	virtual bool onProviderYUYV(unsigned char* pYUYVBuffer, int width, int height) {$/;"	f	class:IVGAProviderObserver
onProviderYUYV	core/mixtureMode_IPC.cpp	/^bool MixtureMode_IPC::onProviderYUYV(unsigned char* pYUYVBuffer, int width, int height) {$/;"	f	class:MixtureMode_IPC
onProviderYUYV	core/mixtureMode_SDI.cpp	/^bool MixtureMode_SDI::onProviderYUYV(unsigned char* pYUYVBuffer, int width, int height) {$/;"	f	class:MixtureMode_SDI
onProviderYUYV	core/resourceMode_IPC.cpp	/^bool ResourceModeHandle_IPC::onProviderYUYV(unsigned char* pYUYVBuffer, int width, int height) {$/;"	f	class:ResourceModeHandle_IPC
onProviderYUYV	core/resourceMode_SDI.cpp	/^bool ResourceModeHandle_SDI::onProviderYUYV(unsigned char* pYUYVBuffer, int width, int height) {$/;"	f	class:ResourceModeHandle_SDI
onProviderYUYV	kernel.cpp	/^bool Kernel::onProviderYUYV(unsigned char* pYUYVBuffer, int width, int height) {$/;"	f	class:Kernel
onReadPcm	core/audioEncodeFAAC.cpp	/^void AudioEncodeFAAC::onReadPcm() {$/;"	f	class:AudioEncodeFAAC
onReadTask	core/Mp4Player.cpp	/^void Mp4FilePlayer::onReadTask() {$/;"	f	class:Mp4FilePlayer
onReadTask	core/movieHeaderTail.cpp	/^void MovieHeaderTail::onReadTask() {$/;"	f	class:MovieHeaderTail
onRecv	Command/AssistCommandHandle.cpp	/^void AssistCommandHandle::onRecv(const char *ip, unsigned int port, const char *data, int len) {$/;"	f	class:AssistCommandHandle
onRecv	Command/KernelBoardCommandHandle.cpp	/^void KernelBoardCommandHandle::onRecv(const char *ip, unsigned int port, const char *data,$/;"	f	class:KernelBoardCommandHandle
onRecv	Command/udp.h	/^	virtual void onRecv(const char *ip, unsigned int port, const char *data,$/;"	f	class:IUdpListener
onRecvCourseStatus	liveCourse/classWxManager.h	/^	virtual bool onRecvCourseStatus(int courseId, string strLCMtgIp) {$/;"	f	class:IClassWxObserver
onRecvCourseStatus	liveCourse/liveCourseManager.cpp	/^bool LiveCourseManager::onRecvCourseStatus(int courseId, string strLCMtgIp) {$/;"	f	class:LiveCourseManager
onRecvLCRole	liveCourse/classWxManager.h	/^	virtual bool onRecvLCRole(ELiveCourseRole role) {$/;"	f	class:IClassWxObserver
onRecvLCRole	liveCourse/liveCourseManager.cpp	/^bool LiveCourseManager::onRecvLCRole(ELiveCourseRole role) {$/;"	f	class:LiveCourseManager
onRecvMtgData	core/mtgClient.h	/^	virtual void onRecvMtgData(MtgClient* pMtg, const char* path,$/;"	f	class:IMtgListener
onRecvMtgData	liveCourse/classWxManager.cpp	/^void ClassWxManager::onRecvMtgData(MtgClient* pMtg, const char* path,$/;"	f	class:ClassWxManager
onRecvMtgData	liveCourse/courseWxManager.cpp	/^void CourseWxManager::onRecvMtgData(MtgClient* pMtg, const char* path,$/;"	f	class:CourseWxManager
onRecvMtgData	web/modelStatus.cpp	/^void ModelStatus::onRecvMtgData(MtgClient* pMtg, const char* path,$/;"	f	class:ModelStatus
onRecvMtgSpx	KVideo/audio/codec_engine.cpp	/^bool codec_engine::onRecvMtgSpx(const char* path, const char* data, int len)$/;"	f	class:codec_engine
onRecvMtgSpx	liveCourse/liveCourseManager.h	/^	virtual bool onRecvMtgSpx(const char* path, const char* data, int datalen) {$/;"	f	class:ILiveCourseManagerObserver
onSDIEncWriteTask	core/mixtureMode_SDI.cpp	/^void MixtureMode_SDI::onSDIEncWriteTask(ComponentWrapper* aComponent) {$/;"	f	class:MixtureMode_SDI
onSDIScaleChannel1	core/interactionMode_SDI.cpp	/^void InteractionMode_SDI::onSDIScaleChannel1(ComponentWrapper* aComponent) {$/;"	f	class:InteractionMode_SDI
onSDIScaleChannel1	core/mixtureMode_SDI.cpp	/^void MixtureMode_SDI::onSDIScaleChannel1(ComponentWrapper* aComponent) {$/;"	f	class:MixtureMode_SDI
onSDIScaleChannel2	core/interactionMode_SDI.cpp	/^void InteractionMode_SDI::onSDIScaleChannel2(ComponentWrapper* aComponent) {$/;"	f	class:InteractionMode_SDI
onSDIScaleChannel2	core/mixtureMode_SDI.cpp	/^void MixtureMode_SDI::onSDIScaleChannel2(ComponentWrapper* aComponent) {$/;"	f	class:MixtureMode_SDI
onTimeout	Command/Function.cpp	/^void CFunction::onTimeout(Timer *timer) {$/;"	f	class:CFunction
onTimeout	KVideo/sdiVideoProviderSystem.cpp	/^void SDIVideoProviderSystem::onTimeout(Timer *timer) {$/;"	f	class:SDIVideoProviderSystem
onTimeout	KVideo/vgaProviderSystem.cpp	/^void VGAProviderSystem::onTimeout(Timer* timer) {$/;"	f	class:VGAProviderSystem
onTimeout	core/HDMIDisplayManager.cpp	/^void HDMIDisplayManager::onTimeout(Timer* pTimer) {$/;"	f	class:HDMIDisplayManager
onTimeout	core/mixtureMode_IPC.cpp	/^void MixtureMode_IPC::onTimeout(Timer* pTimer) {$/;"	f	class:MixtureMode_IPC
onTimeout	core/mixtureMode_SDI.cpp	/^void MixtureMode_SDI::onTimeout(Timer* pTimer) {$/;"	f	class:MixtureMode_SDI
onTimeout	core/resourceMode_IPC.cpp	/^void ResourceModeHandle_IPC::onTimeout(Timer* pTimer) {$/;"	f	class:ResourceModeHandle_IPC
onTimeout	core/resourceMode_SDI.cpp	/^void ResourceModeHandle_SDI::onTimeout(Timer* pTimer) {$/;"	f	class:ResourceModeHandle_SDI
onTimeout	core/rtmpHandle.cpp	/^void RtmpHandle::onTimeout(Timer* pTimer) {$/;"	f	class:RtmpHandle
onTimeout	kernel.cpp	/^void Kernel::onTimeout(Timer *timer) {$/;"	f	class:Kernel
onTimeout	liveCourse/classWxManager.cpp	/^void ClassWxManager::onTimeout(Timer* pTimer) {$/;"	f	class:ClassWxManager
onTimeout	liveCourse/courseWxManager.cpp	/^void CourseWxManager::onTimeout(Timer* pTimer) {$/;"	f	class:CourseWxManager
onTimeout	timer.h	/^	virtual void onTimeout(Timer* pTimer) {$/;"	f	class:ITimerListener
onVGAEncodeWriteTask	KVideo/vgaProviderSystem.cpp	/^void VGAProviderSystem::onVGAEncodeWriteTask() {$/;"	f	class:VGAProviderSystem
onVGAEncodeWriteTask	core/mixtureMode_SDI.cpp	/^void MixtureMode_SDI::onVGAEncodeWriteTask() {$/;"	f	class:MixtureMode_SDI
onVGAScaleWriteTask	KVideo/vgaProviderSystem.cpp	/^void VGAProviderSystem::onVGAScaleWriteTask() {$/;"	f	class:VGAProviderSystem
onVGAScaleWriteTask	core/mixtureMode_IPC.cpp	/^void MixtureMode_IPC::onVGAScaleWriteTask() {$/;"	f	class:MixtureMode_IPC
onVGAScaleWriteTask	core/mixtureMode_SDI.cpp	/^void MixtureMode_SDI::onVGAScaleWriteTask() {$/;"	f	class:MixtureMode_SDI
onVgaStatus	KVideo/vgaProviderSystem.h	/^	virtual bool onVgaStatus(EVGAStatus status) {$/;"	f	class:IVGAProviderObserver
onVgaStatus	core/mixtureMode_IPC.cpp	/^bool MixtureMode_IPC::onVgaStatus(EVGAStatus status) {$/;"	f	class:MixtureMode_IPC
onVgaStatus	core/mixtureMode_SDI.cpp	/^bool MixtureMode_SDI::onVgaStatus(EVGAStatus status) {$/;"	f	class:MixtureMode_SDI
onVgaStatus	core/resourceMode_IPC.cpp	/^bool ResourceModeHandle_IPC::onVgaStatus(EVGAStatus status) {$/;"	f	class:ResourceModeHandle_IPC
onVgaStatus	core/resourceMode_SDI.cpp	/^bool ResourceModeHandle_SDI::onVgaStatus(EVGAStatus status) {$/;"	f	class:ResourceModeHandle_SDI
onVgaStatus	kernel.cpp	/^bool Kernel::onVgaStatus(EVGAStatus status) {$/;"	f	class:Kernel
onWarning	log.h	/^	virtual void onWarning(Log *log, const char *str){$/;"	f	class:ILogListener
onWriteTask	core/interactionMode_IPC.cpp	/^void InteractionMode_IPC::onWriteTask(ComponentWrapper *aComponent) {$/;"	f	class:InteractionMode_IPC
onWriteTask	core/mixtureMode_IPC.cpp	/^void MixtureMode_IPC::onWriteTask(ComponentWrapper *aComponent) {$/;"	f	class:MixtureMode_IPC
onWriteTask	core/mixtureMode_SDI.cpp	/^void MixtureMode_SDI::onWriteTask(ComponentWrapper *aComponent) {$/;"	f	class:MixtureMode_SDI
onWriteTask	core/movieHeaderTail.cpp	/^void MovieHeaderTail::onWriteTask() {$/;"	f	class:MovieHeaderTail
onWriteTask	core/resourceMode_SDI.cpp	/^void ResourceModeHandle_SDI::onWriteTask(ComponentWrapper* aComp) {$/;"	f	class:ResourceModeHandle_SDI
opBufPipe	core/OMXCommonDef.h	/^  OMX_S32 opBufPipe[2];       \/* output pipe *\/$/;"	m	struct:tagOutportParams
open	KVideo/HikVideo.cpp	/^bool HikVideo::open(bool aSubStream) {$/;"	f	class:HikVideo
open	KVideo/sdiVideoProviderSystem.cpp	/^bool SDIVideoProviderSystem::open() {$/;"	f	class:SDIVideoProviderSystem
open	core/membufUtils.cpp	/^bool MemBufUtils::open() {$/;"	f	class:MemBufUtils
openFileHandles	core/mixtureMode_IPC.cpp	/^void MixtureMode_IPC::openFileHandles() {$/;"	f	class:MixtureMode_IPC
openFileHandles	core/mixtureMode_SDI.cpp	/^void MixtureMode_SDI::openFileHandles() {$/;"	f	class:MixtureMode_SDI
openFileHandles	core/resourceMode_IPC.cpp	/^void ResourceModeHandle_IPC::openFileHandles() {$/;"	f	class:ResourceModeHandle_IPC
openFileHandles	core/resourceMode_SDI.cpp	/^void ResourceModeHandle_SDI::openFileHandles() {$/;"	f	class:ResourceModeHandle_SDI
openSubVideos	liveCourse/subVideoManager.cpp	/^bool SubVideoManager::openSubVideos() {$/;"	f	class:SubVideoManager
openURLThreadProc	core/rtmpHandle.cpp	/^void* RtmpHandle::openURLThreadProc(void* pParam) {$/;"	f	class:RtmpHandle
openVideos	KVideo/streamVideoManager.cpp	/^bool StreamVideoManager::openVideos() {$/;"	f	class:StreamVideoManager
operator !	monitor/json_value.cpp	/^Value::operator!() const$/;"	f	class:Json::Value
operator !=	monitor/json_value.cpp	/^Value::operator !=( const Value &other ) const$/;"	f	class:Json::Value
operator !=	monitor/value.h	/^      bool operator !=( const SelfType &other ) const$/;"	f	class:Json::ValueIteratorBase
operator *	monitor/value.h	/^      reference operator *() const$/;"	f	class:Json::ValueConstIterator
operator *	monitor/value.h	/^      reference operator *() const$/;"	f	class:Json::ValueIterator
operator ++	monitor/value.h	/^      SelfType &operator++()$/;"	f	class:Json::ValueConstIterator
operator ++	monitor/value.h	/^      SelfType &operator++()$/;"	f	class:Json::ValueIterator
operator ++	monitor/value.h	/^      SelfType operator++( int )$/;"	f	class:Json::ValueConstIterator
operator ++	monitor/value.h	/^      SelfType operator++( int )$/;"	f	class:Json::ValueIterator
operator -	monitor/value.h	/^      difference_type operator -( const SelfType &other ) const$/;"	f	class:Json::ValueIteratorBase
operator --	monitor/value.h	/^      SelfType &operator--()$/;"	f	class:Json::ValueConstIterator
operator --	monitor/value.h	/^      SelfType &operator--()$/;"	f	class:Json::ValueIterator
operator --	monitor/value.h	/^      SelfType operator--( int )$/;"	f	class:Json::ValueConstIterator
operator --	monitor/value.h	/^      SelfType operator--( int )$/;"	f	class:Json::ValueIterator
operator <	monitor/json_value.cpp	/^Value::CZString::operator<( const CZString &other ) const $/;"	f	class:Json::Value::CZString
operator <	monitor/json_value.cpp	/^Value::operator <( const Value &other ) const$/;"	f	class:Json::Value
operator <<	log.cpp	/^Log &Log::operator <<(const char *str) {$/;"	f	class:Log
operator <<	log.cpp	/^Log &Log::operator <<(const std::string &str) {$/;"	f	class:Log
operator <<	log.cpp	/^Log &Log::operator <<(int *p) {$/;"	f	class:Log
operator <<	log.cpp	/^Log &Log::operator <<(int v) {$/;"	f	class:Log
operator <<	log.cpp	/^Log &Log::operator <<(void (Log::*fun)(const char *str)) {$/;"	f	class:Log
operator <<	log.cpp	/^Log &Log::operator <<(void *p) {$/;"	f	class:Log
operator <<	monitor/json_writer.cpp	/^std::ostream& operator<<( std::ostream &sout, const Value &root )$/;"	f	namespace:Json
operator <=	monitor/json_value.cpp	/^Value::operator <=( const Value &other ) const$/;"	f	class:Json::Value
operator =	monitor/json_value.cpp	/^Value::CZString::operator =( const CZString &other )$/;"	f	class:Json::Value::CZString
operator =	monitor/json_value.cpp	/^Value::operator=( const Value &other )$/;"	f	class:Json::Value
operator ==	monitor/json_value.cpp	/^Value::CZString::operator==( const CZString &other ) const $/;"	f	class:Json::Value::CZString
operator ==	monitor/json_value.cpp	/^Value::operator ==( const Value &other ) const$/;"	f	class:Json::Value
operator ==	monitor/value.h	/^      bool operator ==( const SelfType &other ) const$/;"	f	class:Json::ValueIteratorBase
operator >	monitor/json_value.cpp	/^Value::operator >( const Value &other ) const$/;"	f	class:Json::Value
operator >=	monitor/json_value.cpp	/^Value::operator >=( const Value &other ) const$/;"	f	class:Json::Value
operator >>	monitor/json_reader.cpp	/^std::istream& operator>>( std::istream &sin, Value &root )$/;"	f	namespace:Json
operator []	monitor/json_value.cpp	/^Value::operator[]( UInt index ) const$/;"	f	class:Json::Value
operator []	monitor/json_value.cpp	/^Value::operator[]( UInt index )$/;"	f	class:Json::Value
operator []	monitor/json_value.cpp	/^Value::operator[]( const CppTL::ConstString &key ) const$/;"	f	class:Json::Value
operator []	monitor/json_value.cpp	/^Value::operator[]( const CppTL::ConstString &key )$/;"	f	class:Json::Value
operator []	monitor/json_value.cpp	/^Value::operator[]( const StaticString &key )$/;"	f	class:Json::Value
operator []	monitor/json_value.cpp	/^Value::operator[]( const char *key ) const$/;"	f	class:Json::Value
operator []	monitor/json_value.cpp	/^Value::operator[]( const char *key )$/;"	f	class:Json::Value
operator []	monitor/json_value.cpp	/^Value::operator[]( const std::string &key ) const$/;"	f	class:Json::Value
operator []	monitor/json_value.cpp	/^Value::operator[]( const std::string &key )$/;"	f	class:Json::Value
operator const char *	monitor/value.h	/^      operator const char *() const$/;"	f	class:Json::StaticString
otherMixLevel	KVideo/audio/audio_mixer.cpp	/^	stAudioMixLevel otherMixLevel;$/;"	m	namespace:__anon7	file:
outBuf	core/DecodeUtils.h	/^  AVChunk_Buf outBuf;$/;"	m	struct:__anon15
outDataStrmThrdId	core/OMXCommonDef.h	/^  pthread_t outDataStrmThrdId;$/;"	m	struct:tagComponentWrapper
outDataThreadId	core/OMXCommonDef.h	/^  pthread_t outDataThreadId[2];$/;"	m	struct:tagComponentWrapper
outPortParams	core/OMXCommonDef.h	/^  OutportParams *outPortParams;    \/* Common o\/p port params *\/$/;"	m	struct:tagComponentWrapper
over_flow	KVideo/captureVideoDefines.h	/^	struct ti81xxvin_overflow_status over_flow;$/;"	m	struct:capt_obj	typeref:struct:capt_obj::ti81xxvin_overflow_status
over_flow	core/v4lDisplay.h	/^	struct ti81xxvin_overflow_status over_flow;$/;"	m	struct:app_obj	typeref:struct:app_obj::ti81xxvin_overflow_status
pBuffer	core/cameraBufferPool.h	/^	char*	pBuffer;$/;"	m	struct:stCameraFrameBuffer
pBuffer	core/framePool.h	/^	char*	pBuffer;$/;"	m	struct:stFrameBuffer
pBuffer	core/shareMem.h	/^	char* pBuffer;$/;"	m	struct:stShareMem
pComponent	core/OMXCommonDef.h	/^	ComponentWrapper *pComponent;$/;"	m	struct:tagConnInConnOutThreadArgs
pInBuff	core/OMXCommonDef.h	/^  OMX_BUFFERHEADERTYPE *pInBuff[MAX_NUM_OUT_BUFS];$/;"	m	struct:tagInportParams
pOutBuff	core/OMXCommonDef.h	/^  OMX_BUFFERHEADERTYPE *pOutBuff[MAX_NUM_OUT_BUFS];$/;"	m	struct:tagOutportParams
pParent	core/OMXCommonDef.h	/^	void *pParent;$/;"	m	struct:tagConnInConnOutThreadArgs
pParent	core/OMXCommonDef.h	/^  void*	pParent;$/;"	m	struct:tagComponentWrapper
pValid	core/shareMem.h	/^	bool* pValid;$/;"	m	struct:stShareMem
padding	KVideo/audio/rtpstruct.h	/^	uint8_t padding:1;$/;"	m	struct:RTPHeader
pageCount_	monitor/value.h	/^      PageIndex pageCount_;$/;"	m	class:Json::ValueInternalArray
pages_	monitor/value.h	/^      Value **pages_;$/;"	m	class:Json::ValueInternalArray
parse	monitor/json_reader.cpp	/^Reader::parse( const char *beginDoc, const char *endDoc, $/;"	f	class:Json::Reader
parse	monitor/json_reader.cpp	/^Reader::parse( const std::string &document, $/;"	f	class:Json::Reader
parse	monitor/json_reader.cpp	/^Reader::parse( std::istream& sin,$/;"	f	class:Json::Reader
parseClassRoomId	utils/liveCourseUtils.cpp	/^bool LiveCourseUtils::parseClassRoomId(const char* pInfo, string& strRoomID) {$/;"	f	class:LiveCourseUtils
parsePathToCmd	utils/liveCourseUtils.cpp	/^bool LiveCourseUtils::parsePathToCmd(const char* pPath, ELiveCourseCmd &nCmd, string& strRoomID, string& strUid) {$/;"	f	class:LiveCourseUtils
path	KVideo/audio/codec_engine.h	/^	char path[32];$/;"	m	struct:channelinfo
path	liveCourse/courseWxManager.h	/^	string path;$/;"	m	struct:stSubscribeInfo
path	liveCourse/livemtgConstDefine.h	/^	char path[LIVEMTG_MAX_PATH];											\/\/视频路径(全路径)$/;"	m	struct:tagLiveMtgInteractiveListItem
path	liveCourse/livemtgConstDefine.h	/^	char path[LIVEMTG_MAX_PATH];											\/\/视频路径(全路径)$/;"	m	struct:tagLiveMtgMonitorListItem
path	liveCourse/livemtgConstDefine.h	/^	char path[LIVEMTG_MAX_PATH];											\/\/视频路径(全路径)$/;"	m	struct:tagLiveMtgSubscribeListItem
path	liveCourse/livemtgConstDefine.h	/^	char path[LIVEMTG_MAX_PATH];											\/\/视频路径(全路径)$/;"	m	struct:tagLiveMtgVGAListItem
path	liveCourse/livemtgConstDefine.h	/^	char path[LIVEMTG_MAX_PATH];$/;"	m	struct:tagLiveMtgCameraControl
path	liveCourse/livemtgConstDefine.h	/^	char path[LIVEMTG_MAX_PATH];$/;"	m	struct:tagLiveMtgKeynoteSpeaker
pathH	liveCourse/livemtgConstDefine.h	/^	char pathH[LIVEMTG_MAX_PATH];											\/\/视频路径(全路径)$/;"	m	struct:tagLiveMtgVideoListItem
pathL	liveCourse/livemtgConstDefine.h	/^	char pathL[LIVEMTG_MAX_PATH];$/;"	m	struct:tagLiveMtgVideoListItem
pathM	liveCourse/livemtgConstDefine.h	/^	char pathM[LIVEMTG_MAX_PATH];$/;"	m	struct:tagLiveMtgVideoListItem
pause	core/Mp4Player.cpp	/^bool Mp4FilePlayer::pause() {$/;"	f	class:Mp4FilePlayer
pause	core/baseMode.cpp	/^BOOL BaseMode::pause(){$/;"	f	class:BaseMode
pause	core/mixtureMode_IPC.cpp	/^BOOL MixtureMode_IPC::pause() {$/;"	f	class:MixtureMode_IPC
pause	core/mixtureMode_SDI.cpp	/^BOOL MixtureMode_SDI::pause() {$/;"	f	class:MixtureMode_SDI
pause	core/movieHeaderTail.cpp	/^BOOL MovieHeaderTail::pause() {$/;"	f	class:MovieHeaderTail
pause	core/resourceMode_IPC.cpp	/^BOOL ResourceModeHandle_IPC::pause() {$/;"	f	class:ResourceModeHandle_IPC
pause	core/resourceMode_SDI.cpp	/^BOOL ResourceModeHandle_SDI::pause() {$/;"	f	class:ResourceModeHandle_SDI
pauseLowerHalf	core/mixtureMode_IPC.cpp	/^bool MixtureMode_IPC::pauseLowerHalf() {$/;"	f	class:MixtureMode_IPC
pauseLowerHalf	core/mixtureMode_SDI.cpp	/^bool MixtureMode_SDI::pauseLowerHalf() {$/;"	f	class:MixtureMode_SDI
pauseRecord	kernel.cpp	/^bool Kernel::pauseRecord() {$/;"	f	class:Kernel
payloadtype	KVideo/audio/rtpstruct.h	/^	uint8_t payloadtype:7;$/;"	m	struct:RTPHeader
pbufHeader	core/OMXCommonDef.h	/^	OMX_BUFFERHEADERTYPE *pbufHeader;   \/* used for EBD\/FBD *\/$/;"	m	struct:tagPipeMsg
pcm	KVideo/audio/codec_engine.cpp	/^	char pcm[640] = {0};$/;"	m	namespace:__anon3	file:
pcm_data	KVideo/audio/SpeexCod.h	/^	unsigned char pcm_data[PCM_LEN];$/;"	m	struct:dec_info
pcm_data	KVideo/audio/SpeexCod.h	/^	unsigned char pcm_data[PCM_LEN];$/;"	m	struct:enc_info
pcm_valid	KVideo/audio/SpeexCod.h	/^	int pcm_valid; \/\/four bytes to avoid algin$/;"	m	struct:enc_info
pfAnalyzeDestroy	hikFunc.cpp	/^void (*pfAnalyzeDestroy)(void*);$/;"	v
pfCreateStreamEx	hikFunc.cpp	/^void * (*pfCreateStreamEx)(unsigned long, unsigned char *);$/;"	v
pfGetOnePacket	hikFunc.cpp	/^int (*pfGetOnePacket)(void *, PACKET_INFO_EX*);$/;"	v
pfInit	hikFunc.cpp	/^BOOL (*pfInit)();$/;"	v
pfInputData	hikFunc.cpp	/^int (*pfInputData)(void *, unsigned char * , unsigned long);$/;"	v
pfLogin	hikFunc.cpp	/^LONG (*pfLogin)(char* pIP, WORD port, char* pUsername, char* pPassword, NET_DVR_DEVICEINFO_V30* pNetDeviceInfo);$/;"	v
pfMakeKeyFrame	hikFunc.cpp	/^BOOL (*pfMakeKeyFrame)(LONG, LONG);$/;"	v
pfNet_DVR_Cleanup	hikFunc.cpp	/^BOOL (*pfNet_DVR_Cleanup)();$/;"	v
pfNet_DVR_Logout	hikFunc.cpp	/^BOOL (*pfNet_DVR_Logout) (LONG);$/;"	v
pfRealPlay	hikFunc.cpp	/^LONG (*pfRealPlay)(LONG, NET_DVR_CLIENTINFO*, void (CALLBACK *)(LONG, DWORD, BYTE*, DWORD, void*), void*, BOOL);$/;"	v
pfSetConnectTime	hikFunc.cpp	/^BOOL (*pfSetConnectTime)(DWORD, DWORD);$/;"	v
pfSetRealDataCallBack	hikFunc.cpp	/^BOOL (*pfSetRealDataCallBack)(LONG, void (CALLBACK*)(LONG, DWORD, BYTE*, DWORD, DWORD), DWORD);$/;"	v
pfSetReconnect	hikFunc.cpp	/^BOOL (*pfSetReconnect)(DWORD, BOOL);$/;"	v
pfStopRealPlay	hikFunc.cpp	/^BOOL (*pfStopRealPlay)(LONG);$/;"	v
pfun_RECORD_Open	core/rtmpHandle.h	/^	RecordHandle (*pfun_RECORD_Open)( const V_char *);$/;"	m	class:RtmpHandle
pfun_RECORD_RecordDestory	core/rtmpHandle.h	/^	void (*pfun_RECORD_RecordDestory)( RecordHandle );$/;"	m	class:RtmpHandle
pfun_RECORD_RecordPush	core/rtmpHandle.h	/^	V_uint32 (*pfun_RECORD_RecordPush)(RecordHandle ,RECORD_PUSH_TYPE ,RECORD_Frame const * );$/;"	m	class:RtmpHandle
pfun_RECORD_SetAudioInfo	core/rtmpHandle.h	/^	V_uint32 (*pfun_RECORD_SetAudioInfo)(RecordHandle ,V_uint32 ,V_uint32 ,V_uint32 ,V_uint32 ,V_char * const ,V_uint32 );$/;"	m	class:RtmpHandle
pfun_RECORD_SetVideoInfo	core/rtmpHandle.h	/^	V_uint32 (*pfun_RECORD_SetVideoInfo)(RecordHandle ,V_uint32 ,V_uint32 ,V_uint32 ,V_uint32 ,V_char * const ,V_uint32 );$/;"	m	class:RtmpHandle
pfun_wx_mtg_detect_stream	mtgFunc.cpp	/^int (*pfun_wx_mtg_detect_stream)(s_handle_t,BYTE);$/;"	v
pfun_wx_mtg_get_buffer_size	mtgFunc.cpp	/^int (*pfun_wx_mtg_get_buffer_size)(s_handle_t,BYTE,DWORD*);$/;"	v
pfun_wx_mtg_get_setting	mtgFunc.cpp	/^int (*pfun_wx_mtg_get_setting)(s_handle_t,int,DWORD*,void*);$/;"	v
pfun_wx_mtg_init	mtgFunc.cpp	/^int (*pfun_wx_mtg_init)(char*,char*,unsigned short,unsigned short);$/;"	v
pfun_wx_mtg_join	mtgFunc.cpp	/^s_handle_t (*pfun_wx_mtg_join)(char*,WxFunCallBack,void*,DWORD,DWORD,WORD,char*,char*,StMbyteData*);$/;"	v
pfun_wx_mtg_leave	mtgFunc.cpp	/^int (*pfun_wx_mtg_leave)(s_handle_t,short);$/;"	v
pfun_wx_mtg_modify	mtgFunc.cpp	/^int (*pfun_wx_mtg_modify)(s_handle_t,WORD,WxDataUpdate*);$/;"	v
pfun_wx_mtg_register	mtgFunc.cpp	/^int (*pfun_wx_mtg_register)(s_handle_t,char*,WxFunCallBack,void*);$/;"	v
pfun_wx_mtg_rejoin	mtgFunc.cpp	/^int (*pfun_wx_mtg_rejoin)(s_handle_t);$/;"	v
pfun_wx_mtg_set_buffer_size	mtgFunc.cpp	/^int (*pfun_wx_mtg_set_buffer_size)(s_handle_t,BYTE,char*,DWORD);$/;"	v
pfun_wx_mtg_set_setting	mtgFunc.cpp	/^int (*pfun_wx_mtg_set_setting)(s_handle_t,int,DWORD*,void*);$/;"	v
pfun_wx_mtg_subscribe	mtgFunc.cpp	/^int (*pfun_wx_mtg_subscribe)(s_handle_t,char*,BYTE);$/;"	v
pfun_wx_mtg_timer	mtgFunc.cpp	/^void (*pfun_wx_mtg_timer)();$/;"	v
pfun_wx_mtg_uninit	mtgFunc.cpp	/^int (*pfun_wx_mtg_uninit)(DWORD );$/;"	v
pix_yuv_to_rgb	utils/colorConvert.cpp	/^  void ColorConvertUtils::pix_yuv_to_rgb(unsigned char y, unsigned char u,$/;"	f	class:ColorConvertUtils
pkgP	package/ti_sdo_ce_examples_apps_armlivemedia.java	/^    Proto.Obj pkgP;$/;"	f	class:ti_sdo_ce_examples_apps_armlivemedia
pkgV	package/ti_sdo_ce_examples_apps_armlivemedia.java	/^    Value.Obj pkgV;$/;"	f	class:ti_sdo_ce_examples_apps_armlivemedia
play	core/Mp4Player.cpp	/^bool Mp4FilePlayer::play() {$/;"	f	class:Mp4FilePlayer
playMedia	Command/AssistCommandHandle.cpp	/^bool AssistCommandHandle::playMedia(string strMediaFile) {$/;"	f	class:AssistCommandHandle
playback	KVideo/audio/audio_playback.cpp	/^int audio_playback::playback(char* sample, int len)$/;"	f	class:audio_playback
pointer	monitor/value.h	/^      typedef Value *pointer;$/;"	t	class:Json::ValueIterator
pointer	monitor/value.h	/^      typedef const Value *pointer;$/;"	t	class:Json::ValueConstIterator
pop	KVideo/audio/fifo.cpp	/^int fifo::pop(char* data, int* length, int* frame_count)$/;"	f	class:fifo
port_sem	core/OMXCommonDef.h	/^  sem_t port_sem;$/;"	m	struct:tagComponentWrapper
postPortSem	core/OMXComponentUtils.cpp	/^void OMXComponentUtils::postPortSem(ComponentWrapper* &aComponent) {$/;"	f	class:OMXComponentUtils
postStateSem	core/OMXComponentUtils.cpp	/^void OMXComponentUtils::postStateSem(ComponentWrapper* &aComponent) {$/;"	f	class:OMXComponentUtils
previewRecord	kernel.cpp	/^bool Kernel::previewRecord() {$/;"	f	class:Kernel
previous_	monitor/value.h	/^      ValueInternalLink *previous_;$/;"	m	class:Json::ValueInternalLink
printFormat	KVideo/captureSDIVideo.cpp	/^static void printFormat(char *string, struct v4l2_format *fmt) {$/;"	f	file:
printFormat	KVideo/captureVga.cpp	/^static void printFormat(char *string, struct v4l2_format *fmt) {$/;"	f	file:
printfifostatus	KVideo/audio/audio_mixer.cpp	/^void audio_mixer::printfifostatus()$/;"	f	class:audio_mixer
procCallbackEmptyBufferDone	KVideo/vgaProviderSystem.cpp	/^OMX_ERRORTYPE VGAProviderSystem::procCallbackEmptyBufferDone(OMX_HANDLETYPE hComponent,$/;"	f	class:VGAProviderSystem
procCallbackEmptyBufferDone	core/Mp4Player.cpp	/^OMX_ERRORTYPE Mp4FilePlayer::procCallbackEmptyBufferDone($/;"	f	class:Mp4FilePlayer
procCallbackEmptyBufferDone	core/mixtureMode_IPC.cpp	/^OMX_ERRORTYPE MixtureMode_IPC::procCallbackEmptyBufferDone(OMX_HANDLETYPE hComponent,$/;"	f	class:MixtureMode_IPC
procCallbackEmptyBufferDone	core/mixtureMode_SDI.cpp	/^OMX_ERRORTYPE MixtureMode_SDI::procCallbackEmptyBufferDone(OMX_HANDLETYPE hComponent,$/;"	f	class:MixtureMode_SDI
procCallbackEmptyBufferDone	core/movieHeaderTail.cpp	/^OMX_ERRORTYPE MovieHeaderTail::procCallbackEmptyBufferDone(OMX_HANDLETYPE hComponent,$/;"	f	class:MovieHeaderTail
procCallbackEmptyBufferDone	core/resourceMode_SDI.cpp	/^OMX_ERRORTYPE ResourceModeHandle_SDI::procCallbackEmptyBufferDone(OMX_HANDLETYPE hComponent,$/;"	f	class:ResourceModeHandle_SDI
procCallbackEventHandler	KVideo/vgaProviderSystem.cpp	/^OMX_ERRORTYPE VGAProviderSystem::procCallbackEventHandler(OMX_HANDLETYPE hComponent,$/;"	f	class:VGAProviderSystem
procCallbackEventHandler	core/Mp4Player.cpp	/^OMX_ERRORTYPE Mp4FilePlayer::procCallbackEventHandler(OMX_HANDLETYPE hComponent,$/;"	f	class:Mp4FilePlayer
procCallbackEventHandler	core/mixtureMode_IPC.cpp	/^OMX_ERRORTYPE MixtureMode_IPC::procCallbackEventHandler(OMX_HANDLETYPE hComponent,$/;"	f	class:MixtureMode_IPC
procCallbackEventHandler	core/mixtureMode_SDI.cpp	/^OMX_ERRORTYPE MixtureMode_SDI::procCallbackEventHandler(OMX_HANDLETYPE hComponent,$/;"	f	class:MixtureMode_SDI
procCallbackEventHandler	core/movieHeaderTail.cpp	/^OMX_ERRORTYPE MovieHeaderTail::procCallbackEventHandler(OMX_HANDLETYPE hComponent,$/;"	f	class:MovieHeaderTail
procCallbackEventHandler	core/resourceMode_SDI.cpp	/^OMX_ERRORTYPE ResourceModeHandle_SDI::procCallbackEventHandler(OMX_HANDLETYPE hComponent,$/;"	f	class:ResourceModeHandle_SDI
procCallbackFillBufferDone	KVideo/vgaProviderSystem.cpp	/^OMX_ERRORTYPE VGAProviderSystem::procCallbackFillBufferDone(OMX_HANDLETYPE hComponent,$/;"	f	class:VGAProviderSystem
procCallbackFillBufferDone	core/Mp4Player.cpp	/^OMX_ERRORTYPE Mp4FilePlayer::procCallbackFillBufferDone($/;"	f	class:Mp4FilePlayer
procCallbackFillBufferDone	core/mixtureMode_IPC.cpp	/^OMX_ERRORTYPE MixtureMode_IPC::procCallbackFillBufferDone(OMX_HANDLETYPE hComponent,$/;"	f	class:MixtureMode_IPC
procCallbackFillBufferDone	core/mixtureMode_SDI.cpp	/^OMX_ERRORTYPE MixtureMode_SDI::procCallbackFillBufferDone(OMX_HANDLETYPE hComponent,$/;"	f	class:MixtureMode_SDI
procCallbackFillBufferDone	core/movieHeaderTail.cpp	/^OMX_ERRORTYPE MovieHeaderTail::procCallbackFillBufferDone(OMX_HANDLETYPE hComponent,$/;"	f	class:MovieHeaderTail
procCallbackFillBufferDone	core/resourceMode_SDI.cpp	/^OMX_ERRORTYPE ResourceModeHandle_SDI::procCallbackFillBufferDone(OMX_HANDLETYPE hComponent,$/;"	f	class:ResourceModeHandle_SDI
procHeartbeat	core/mtgInit.cpp	/^void MtgHeartbeat::procHeartbeat() {$/;"	f	class:MtgHeartbeat
procJoin	core/mtgClient.cpp	/^bool MtgClient::procJoin() {$/;"	f	class:MtgClient
procJoinCallback	core/mtgClient.cpp	/^void MtgClient::procJoinCallback(short msg, DWORD uParam1, DWORD uParam2, void* pParam) {$/;"	f	class:MtgClient
procPipeCmdEmptyBufferDone	core/OMXComponentUtils.cpp	/^OMX_ERRORTYPE OMXComponentUtils::procPipeCmdEmptyBufferDone(ComponentWrapper *thisComp,$/;"	f	class:OMXComponentUtils
procPipeCmdEmptyThisBuffer	core/OMXComponentUtils.cpp	/^OMX_ERRORTYPE OMXComponentUtils::procPipeCmdEmptyThisBuffer(ComponentWrapper *thisComp,$/;"	f	class:OMXComponentUtils
procPipeCmdFillBufferDone	core/OMXComponentUtils.cpp	/^OMX_ERRORTYPE OMXComponentUtils::procPipeCmdFillBufferDone(ComponentWrapper *thisComp,$/;"	f	class:OMXComponentUtils
procPipeCmdFillThisBuffer	core/OMXComponentUtils.cpp	/^OMX_ERRORTYPE OMXComponentUtils::procPipeCmdFillThisBuffer(ComponentWrapper *thisComp,$/;"	f	class:OMXComponentUtils
procRecvClassStatusCmd	liveCourse/courseWxManager.cpp	/^bool CourseWxManager::procRecvClassStatusCmd(const char* pData, int len) {$/;"	f	class:CourseWxManager
procRecvCourseStatusCmd	liveCourse/classWxManager.cpp	/^bool ClassWxManager::procRecvCourseStatusCmd(const char* pData, int len) {$/;"	f	class:ClassWxManager
procRecvCourseStatusCmd	liveCourse/courseWxManager.cpp	/^bool CourseWxManager::procRecvCourseStatusCmd(const char* pData, int len) {$/;"	f	class:CourseWxManager
procRecvEnterCmd	liveCourse/classWxManager.cpp	/^bool ClassWxManager::procRecvEnterCmd(const char* pData, int len) {$/;"	f	class:ClassWxManager
procRecvEnterCmd	liveCourse/courseWxManager.cpp	/^bool CourseWxManager::procRecvEnterCmd(const char* pData, int len) {$/;"	f	class:CourseWxManager
procRecvLeaveCmd	liveCourse/courseWxManager.cpp	/^bool CourseWxManager::procRecvLeaveCmd(const char* pData, int len) {$/;"	f	class:CourseWxManager
procRecvRtmpPathCmd	liveCourse/classWxManager.cpp	/^bool ClassWxManager::procRecvRtmpPathCmd(const char* pData, int len) {$/;"	f	class:ClassWxManager
procRecvSubscribeListCmd	liveCourse/courseWxManager.cpp	/^bool CourseWxManager::procRecvSubscribeListCmd(const char* pPath, const char* pData, int len) {$/;"	f	class:CourseWxManager
procRecvWebMonitorCmd	liveCourse/courseWxManager.cpp	/^bool CourseWxManager::procRecvWebMonitorCmd(const char* pData, int len) {$/;"	f	class:CourseWxManager
procRtmpThread	core/rtmpHandle.cpp	/^bool RtmpHandle::procRtmpThread() {$/;"	f	class:RtmpHandle
procThreadRouter	monitor/monitorSender.cpp	/^void* procThreadRouter(void* param) {$/;"	f
procThreadSend	monitor/monitorSender.cpp	/^void* procThreadSend(void* pParam) {$/;"	f
protocolType	kerneldef.h	/^    unsigned char protocolType; \/\/协议类型$/;"	m	struct:_s_udp_header
proxies	package/ti_sdo_ce_examples_apps_armlivemedia.java	/^    ArrayList<Object> proxies = new ArrayList<Object>();$/;"	f	class:ti_sdo_ce_examples_apps_armlivemedia
ptr	core/DecodeUtils.h	/^  unsigned char *ptr;$/;"	m	struct:__anon12
ptrAppData	core/OMXCommonDef.h	/^	void *ptrAppData;$/;"	m	struct:tagInputThreadArgs
push	KVideo/audio/fifo.cpp	/^int fifo::push(char* data, int length, int frame_count, bool bCheckDisableCount)$/;"	f	class:fifo
pushAudio	core/rtmpHandle.cpp	/^bool RtmpHandle::pushAudio(char* pAACBuf, int len) {$/;"	f	class:RtmpHandle
pushAudio	core/rtmpManager.cpp	/^bool RtmpManager::pushAudio(const char* pAACBuf, int len) {$/;"	f	class:RtmpManager
pushFrame	core/shareMem.cpp	/^bool ShareMemManager::pushFrame(char* pBuf, int len) {$/;"	f	class:ShareMemManager
pushValue	monitor/json_writer.cpp	/^StyledStreamWriter::pushValue( const std::string &value )$/;"	f	class:Json::StyledStreamWriter
pushValue	monitor/json_writer.cpp	/^StyledWriter::pushValue( const std::string &value )$/;"	f	class:Json::StyledWriter
pushVideo	core/rtmpHandle.cpp	/^bool RtmpHandle::pushVideo(char* pH264Buf, int len) {$/;"	f	class:RtmpHandle
pushVideo	core/rtmpManager.cpp	/^bool RtmpManager::pushVideo(const char* pH264Buf, int len) {$/;"	f	class:RtmpManager
putRGB32Buf	core/movieHeaderTail.cpp	/^BOOL MovieHeaderTail::putRGB32Buf(char* pRGB32Buf) {$/;"	f	class:MovieHeaderTail
queryCameraStatus	web/modelStatus.cpp	/^bool ModelStatus::queryCameraStatus() {$/;"	f	class:ModelStatus
queryDetailStatus	web/modelStatus.cpp	/^bool ModelStatus::queryDetailStatus() {$/;"	f	class:ModelStatus
queryLiveCourseStatus	web/modelStatus.cpp	/^bool ModelStatus::queryLiveCourseStatus() {$/;"	f	class:ModelStatus
queryMtgStatus	web/modelStatus.cpp	/^bool ModelStatus::queryMtgStatus() {$/;"	f	class:ModelStatus
queryRTMPStatus	web/modelStatus.cpp	/^bool ModelStatus::queryRTMPStatus() {$/;"	f	class:ModelStatus
queryStatus	web/modelStatus.cpp	/^bool ModelStatus::queryStatus() {$/;"	f	class:ModelStatus
queryVideoCenterStatus	web/modelStatus.cpp	/^bool ModelStatus::queryVideoCenterStatus() {$/;"	f	class:ModelStatus
queueCaptureBuffers	KVideo/captureSDIVideo.cpp	/^bool CaptureSDI::queueCaptureBuffers() {$/;"	f	class:CaptureSDI
queueCaptureBuffers	KVideo/captureVga.cpp	/^bool CaptureVGA::queueCaptureBuffers() {$/;"	f	class:CaptureVGA
queueDisplayBuffers	core/v4lDisplay.cpp	/^bool DisplayHandle::queueDisplayBuffers() {$/;"	f	class:DisplayHandle
reConnect	core/rtmpHandle.cpp	/^bool RtmpHandle::reConnect() {$/;"	f	class:RtmpHandle
readArray	monitor/json_reader.cpp	/^Reader::readArray( Token &tokenStart )$/;"	f	class:Json::Reader
readBuf	core/DecodeUtils.h	/^  unsigned char *readBuf;$/;"	m	struct:__anon15
readCStyleComment	monitor/json_reader.cpp	/^Reader::readCStyleComment()$/;"	f	class:Json::Reader
readComment	monitor/json_reader.cpp	/^Reader::readComment()$/;"	f	class:Json::Reader
readCourseTemplate	setting.cpp	/^void Setting::readCourseTemplate(TiXmlHandle* pCourseInfo, int index) {$/;"	f	class:Setting
readCppStyleComment	monitor/json_reader.cpp	/^Reader::readCppStyleComment()$/;"	f	class:Json::Reader
readHeaderTemplate	setting.cpp	/^void Setting::readHeaderTemplate(TiXmlHandle* pHeaderInfo, int index) {$/;"	f	class:Setting
readLogoTemplate	setting.cpp	/^void Setting::readLogoTemplate(TiXmlHandle* pLogoInfo, int index) {$/;"	f	class:Setting
readNumber	monitor/json_reader.cpp	/^Reader::readNumber()$/;"	f	class:Json::Reader
readObject	monitor/json_reader.cpp	/^Reader::readObject( Token &tokenStart )$/;"	f	class:Json::Reader
readPcmProc	core/audioEncode.cpp	/^void* readPcmProc(void* pParam) {$/;"	f
readPcmProc	core/audioEncodeFAAC.cpp	/^static void* readPcmProc(void* pParam) {$/;"	f	file:
readPcmThread	KVideo/audioCapture.cpp	/^void* readPcmThread(void* param)$/;"	f
readSetting	setting.cpp	/^bool Setting::readSetting() {$/;"	f	class:Setting
readString	monitor/json_reader.cpp	/^Reader::readString()$/;"	f	class:Json::Reader
readTailTemplate	setting.cpp	/^void Setting::readTailTemplate(TiXmlHandle* pTailInfo, int index) {$/;"	f	class:Setting
readTemplate	setting.cpp	/^bool Setting::readTemplate() {$/;"	f	class:Setting
readToken	monitor/json_reader.cpp	/^Reader::readToken( Token &token )$/;"	f	class:Json::Reader
readValue	monitor/json_reader.cpp	/^Reader::readValue()$/;"	f	class:Json::Reader
readpcmthread	KVideo/audio/audio_capture.cpp	/^void* readpcmthread(void* param)$/;"	f
realValue	monitor/value.h	/^      realValue,     \/\/\/< double value$/;"	e	enum:Json::ValueType
real_	monitor/value.h	/^         double real_;$/;"	m	union:Json::Value::ValueHolder
recCur	netprotocal/ICIICommandStruct.h	/^	RECRecord	recCur[CustomerMaxCount];$/;"	m	struct:tagPR2COM_RECState
recoverFromError	monitor/json_reader.cpp	/^Reader::recoverFromError( TokenType skipUntilToken )$/;"	f	class:Json::Reader
recvBuff	Command/udp.cpp	/^void Udp::recvBuff() {$/;"	f	class:Udp
recvDataThread	Command/udp.cpp	/^void* Udp::recvDataThread(void* pParam) {$/;"	f	class:Udp
recvLive	Command/AssistCommandHandle.cpp	/^bool AssistCommandHandle::recvLive(string strServerIP, WORD port, bool bStart) {$/;"	f	class:AssistCommandHandle
recv_buf	KVideo/audio/structdef.h	/^	char* recv_buf;$/;"	m	struct:stbufferflag
reference	monitor/value.h	/^      typedef Value &reference;$/;"	t	class:Json::ValueIterator
reference	monitor/value.h	/^      typedef const Value &reference;$/;"	t	class:Json::ValueConstIterator
registerToKernelBoard	Command/Function.cpp	/^bool CFunction::registerToKernelBoard() {$/;"	f	class:CFunction
release	monitor/json_batchallocator.h	/^   void release( AllocatedType *object )$/;"	f	class:Json::BatchAllocator
releaseMemberName	monitor/json_value.cpp	/^   virtual void releaseMemberName( char *memberName )$/;"	f	class:Json::DefaultValueAllocator
releaseStringValue	monitor/json_value.cpp	/^   virtual void releaseStringValue( char *value )$/;"	f	class:Json::DefaultValueAllocator
remoteClient	core/OMXCommonDef.h	/^  tagComponentWrapper *remoteClient;       \/* For allocate \/ use buffer *\/$/;"	m	struct:tagSNTConnectInfo
remotePipe	core/OMXCommonDef.h	/^  OMX_S32 remotePipe[2];    \/* for making ETB \/ FTB calls to connected comp *\/$/;"	m	struct:tagSNTConnectInfo
remotePort	core/OMXCommonDef.h	/^  OMX_U32 remotePort;$/;"	m	struct:tagSNTConnectInfo
removeAACListener	KVideo/audio/codec_engine.cpp	/^void codec_engine::removeAACListener()$/;"	f	class:codec_engine
removeListener	KVideo/audio/audio_capture.cpp	/^void audio_capture::removeListener(iaudio* _listener)$/;"	f	class:audio_capture
removeListener	KVideo/audio/audio_mixer.cpp	/^void audio_mixer::removeListener(iaudio* _listener)$/;"	f	class:audio_mixer
removeListener	KVideo/audioCapture.cpp	/^bool AudioCapture::removeListener(IAudioCaptureObserver* _listener) {$/;"	f	class:AudioCapture
removeListener	KVideo/captureSDIVideo.cpp	/^bool CaptureSDI::removeListener(ICaptureSDIListener* pListener) {$/;"	f	class:CaptureSDI
removeListener	KVideo/captureVga.cpp	/^bool CaptureVGA::removeListener(ICaptureVGAListener* pListener) {$/;"	f	class:CaptureVGA
removeListener	KVideo/sdiVideoProviderSystem.cpp	/^bool SDIVideoProviderSystem::removeListener(ISDIVideoProviderObserver* pListener) {$/;"	f	class:SDIVideoProviderSystem
removeListener	KVideo/vgaProviderSystem.cpp	/^bool VGAProviderSystem::removeListener(IVGAProviderObserver* pObserver) {$/;"	f	class:VGAProviderSystem
removeListener	core/audioEncode.cpp	/^bool AudioEncode::removeListener(IAudioEncodeListener* pListener) {$/;"	f	class:AudioEncode
removeListener	core/audioEncodeFAAC.cpp	/^bool AudioEncodeFAAC::removeListener(IAudioEncodeListener* pListener) {$/;"	f	class:AudioEncodeFAAC
removeListener	core/audioEncodeOMX.cpp	/^bool AudioEncodeOMX::removeListener(IAudioEncodeListener* pListener) {$/;"	f	class:AudioEncodeOMX
removeListener	core/mtgClient.cpp	/^bool MtgClient::removeListener(IMtgListener* listener) {$/;"	f	class:MtgClient
removeListener	core/rtmpHandle.cpp	/^bool RtmpHandle::removeListener(IRtmpListener* listener) {$/;"	f	class:RtmpHandle
removeListener	liveCourse/classWxManager.cpp	/^bool ClassWxManager::removeListener(IClassWxObserver* pObserver) {$/;"	f	class:ClassWxManager
removeListener	liveCourse/courseWxManager.cpp	/^bool CourseWxManager::removeListener(ICourseWxObserver* pObserver) {$/;"	f	class:CourseWxManager
removeListener	liveCourse/liveCourseManager.cpp	/^bool LiveCourseManager::removeListener(ILiveCourseManagerObserver* pObserver) {$/;"	f	class:LiveCourseManager
removeMember	monitor/json_value.cpp	/^Value::removeMember( const char* key )$/;"	f	class:Json::Value
removeMember	monitor/json_value.cpp	/^Value::removeMember( const std::string &key )$/;"	f	class:Json::Value
removeSpxListener	KVideo/audio/codec_engine.cpp	/^void codec_engine::removeSpxListener()$/;"	f	class:codec_engine
removeSpxListener	liveCourse/courseWxManager.cpp	/^bool CourseWxManager::removeSpxListener()$/;"	f	class:CourseWxManager
removelistener	KVideo/streamVideoManager.cpp	/^bool StreamVideoManager::removelistener(IStreamVideoManagerListener* plistener) {$/;"	f	class:StreamVideoManager
reopen	KVideo/audio/audio_playback.cpp	/^void audio_playback::reopen()$/;"	f	class:audio_playback
replay	kernel.cpp	/^bool Kernel::replay(char* pFileName) {$/;"	f	class:Kernel
reqbuf	KVideo/captureVideoDefines.h	/^	struct v4l2_requestbuffers reqbuf;$/;"	m	struct:capt_obj	typeref:struct:capt_obj::v4l2_requestbuffers
reqbuf	core/v4lDisplay.h	/^	struct v4l2_requestbuffers reqbuf;$/;"	m	struct:app_obj	typeref:struct:app_obj::v4l2_requestbuffers
reset	KVideo/audio/fifo.cpp	/^void fifo::reset()$/;"	f	class:fifo
resetIPCInfos	setting.cpp	/^void Setting::resetIPCInfos() {$/;"	f	class:Setting
resetSceneInfos	setting.cpp	/^void Setting::resetSceneInfos() {$/;"	f	class:Setting
resize	monitor/json_value.cpp	/^Value::resize( UInt newSize )$/;"	f	class:Json::Value
resolve	monitor/json_value.cpp	/^Path::resolve( const Value &root ) const$/;"	f	class:Json::Path
resolve	monitor/json_value.cpp	/^Path::resolve( const Value &root, $/;"	f	class:Json::Path
resolveReference	monitor/json_value.cpp	/^Value::resolveReference( const char *key, $/;"	f	class:Json::Value
resume	core/Mp4Player.cpp	/^bool Mp4FilePlayer::resume() {$/;"	f	class:Mp4FilePlayer
resume	core/baseMode.cpp	/^BOOL BaseMode::resume() {$/;"	f	class:BaseMode
resume	core/mixtureMode_IPC.cpp	/^BOOL MixtureMode_IPC::resume() {$/;"	f	class:MixtureMode_IPC
resume	core/mixtureMode_SDI.cpp	/^BOOL MixtureMode_SDI::resume() {$/;"	f	class:MixtureMode_SDI
resume	core/movieHeaderTail.cpp	/^BOOL MovieHeaderTail::resume() {$/;"	f	class:MovieHeaderTail
resume	core/resourceMode_IPC.cpp	/^BOOL ResourceModeHandle_IPC::resume() {$/;"	f	class:ResourceModeHandle_IPC
resume	core/resourceMode_SDI.cpp	/^BOOL ResourceModeHandle_SDI::resume() {$/;"	f	class:ResourceModeHandle_SDI
resumeLowerHalf	core/mixtureMode_IPC.cpp	/^bool MixtureMode_IPC::resumeLowerHalf() {$/;"	f	class:MixtureMode_IPC
resumeLowerHalf	core/mixtureMode_SDI.cpp	/^bool MixtureMode_SDI::resumeLowerHalf() {$/;"	f	class:MixtureMode_SDI
rgb15_to_rgb32	utils/colorConvert.cpp	/^void ColorConvertUtils::rgb15_to_rgb32(unsigned char *dest, unsigned char *src,$/;"	f	class:ColorConvertUtils
rgb16_to_rgb32	utils/colorConvert.cpp	/^void ColorConvertUtils::rgb16_to_rgb32(unsigned char *dest, unsigned char *src,$/;"	f	class:ColorConvertUtils
rgb24_rgb24b	utils/colorConvert.cpp	/^void ColorConvertUtils::rgb24_rgb24b(unsigned char *d, unsigned char *s, int w,$/;"	f	class:ColorConvertUtils
rgb24_to_rgb32	utils/colorConvert.cpp	/^void ColorConvertUtils::rgb24_to_rgb32(unsigned char *dest, unsigned char *src,$/;"	f	class:ColorConvertUtils
rgb24_to_yuyv	utils/colorConvert.cpp	/^ void ColorConvertUtils::rgb24_to_yuyv(unsigned char *d, unsigned char *s, int w, int h) {$/;"	f	class:ColorConvertUtils
rgb32_rgb32b	utils/colorConvert.cpp	/^void ColorConvertUtils::rgb32_rgb32b(unsigned char *d, unsigned char *s, int w,$/;"	f	class:ColorConvertUtils
rgb32_to_hi240	utils/colorConvert.cpp	/^void ColorConvertUtils::rgb32_to_hi240(unsigned char *d, unsigned char *s,$/;"	f	class:ColorConvertUtils
rgb32_to_rgb15	utils/colorConvert.cpp	/^void ColorConvertUtils::rgb32_to_rgb15(unsigned char *dest, unsigned char *src,$/;"	f	class:ColorConvertUtils
rgb32_to_rgb16	utils/colorConvert.cpp	/^void ColorConvertUtils::rgb32_to_rgb16(unsigned char *dest, unsigned char *src,$/;"	f	class:ColorConvertUtils
rgb32_to_rgb24	utils/colorConvert.cpp	/^void ColorConvertUtils::rgb32_to_rgb24(unsigned char *dest, unsigned char *src,$/;"	f	class:ColorConvertUtils
rgb32_to_rgb3	utils/colorConvert.cpp	/^void ColorConvertUtils::rgb32_to_rgb3(unsigned char *d, unsigned char *ss,$/;"	f	class:ColorConvertUtils
rgb32_to_rgb8	utils/colorConvert.cpp	/^void ColorConvertUtils::rgb32_to_rgb8(unsigned char *d, unsigned char *src,$/;"	f	class:ColorConvertUtils
rgb32_to_rgb8b	utils/colorConvert.cpp	/^void ColorConvertUtils::rgb32_to_rgb8b(unsigned char *d, unsigned char *src,$/;"	f	class:ColorConvertUtils
rgb32_to_yuv420	utils/colorConvert.cpp	/^ void ColorConvertUtils::rgb32_to_yuv420(unsigned char *d, unsigned char *s, int w, int h) {$/;"	f	class:ColorConvertUtils
rgb32_to_yuyv	utils/colorConvert.cpp	/^ void ColorConvertUtils::rgb32_to_yuyv(unsigned char *d, unsigned char *s, int w, int h) {$/;"	f	class:ColorConvertUtils
rgb3_to_rgb32	utils/colorConvert.cpp	/^void ColorConvertUtils::rgb3_to_rgb32(unsigned char *dd, unsigned char *s,$/;"	f	class:ColorConvertUtils
rgb4b_to_rgb32	utils/colorConvert.cpp	/^void ColorConvertUtils::rgb4b_to_rgb32(unsigned char *dest, unsigned char *s,$/;"	f	class:ColorConvertUtils
rgb8_to_rgb32	utils/colorConvert.cpp	/^void ColorConvertUtils::rgb8_to_rgb32(unsigned char *dest, unsigned char *s,$/;"	f	class:ColorConvertUtils
rgb8b_to_rgb32	utils/colorConvert.cpp	/^void ColorConvertUtils::rgb8b_to_rgb32(unsigned char *dest, unsigned char *s,$/;"	f	class:ColorConvertUtils
rgbBlue	utils/bmpfile.h	/^	U8 rgbBlue;$/;"	m	struct:tagRGBQUAD
rgbGreen	utils/bmpfile.h	/^	U8 rgbGreen;$/;"	m	struct:tagRGBQUAD
rgbRed	utils/bmpfile.h	/^	U8 rgbRed;$/;"	m	struct:tagRGBQUAD
rgbReserved	utils/bmpfile.h	/^	U8 rgbReserved;$/;"	m	struct:tagRGBQUAD
rightMargin_	monitor/writer.h	/^      int rightMargin_;$/;"	m	class:Json::StyledStreamWriter
rightMargin_	monitor/writer.h	/^      int rightMargin_;$/;"	m	class:Json::StyledWriter
role	KVideo/audio/structdef.h	/^	int  role;      \/\/ 1: watch    2: live$/;"	m	struct:stuserid
roomID	liveCourse/livemtgConstDefine.h	/^	char roomID[LIVEMTG_ROOM_ID_LEN];								\/\/Room ID$/;"	m	struct:tagLiveMtgEnter
roomID	liveCourse/livemtgConstDefine.h	/^	char roomID[LIVEMTG_ROOM_ID_LEN];$/;"	m	struct:tagLiveMtgCameraControl
roomID	liveCourse/livemtgConstDefine.h	/^	char roomID[LIVEMTG_ROOM_ID_LEN];$/;"	m	struct:tagLiveMtgInteractiveListItem
roomID	liveCourse/livemtgConstDefine.h	/^	char roomID[LIVEMTG_ROOM_ID_LEN];$/;"	m	struct:tagLiveMtgKeynoteSpeaker
roomID	liveCourse/livemtgConstDefine.h	/^	char roomID[LIVEMTG_ROOM_ID_LEN];$/;"	m	struct:tagLiveMtgMonitorListItem
roomID	liveCourse/livemtgConstDefine.h	/^	char roomID[LIVEMTG_ROOM_ID_LEN];$/;"	m	struct:tagLiveMtgVGAListItem
roomName	liveCourse/livemtgConstDefine.h	/^	char roomName[100];$/;"	m	struct:tagLiveMtgEnter
rtp_recv	KVideo/audio/codec_engine.cpp	/^	stRTPPacket rtp_recv;$/;"	m	namespace:__anon3	file:
rtp_send	KVideo/audio/codec_engine.cpp	/^	stRTPPacket rtp_send;$/;"	m	namespace:__anon3	file:
sAllMixSamplesData	KVideo/audio/audio_mixer.cpp	/^	short sAllMixSamplesData[kSamplesPerFrame] = {0}; \/\/ mix all channels including key channel$/;"	m	namespace:__anon7	file:
sMixSamplesData	KVideo/audio/audio_mixer.cpp	/^	short sMixSamplesData[kSamplesPerFrame] = {0};	  \/\/ mix channels except key channel$/;"	m	namespace:__anon7	file:
sStrExceptionError	constStringDefine.h	/^const char sStrExceptionError[] = {0xef, 0xbb, 0xbf, 0xe5, 0xbc, 0x82, 0xe5,$/;"	v
s_udp_ad	kerneldef.h	/^}__attribute__((packed)) s_udp_ad;$/;"	t	typeref:struct:_s_udp_ad
s_udp_cmd	kerneldef.h	/^}s_udp_cmd;$/;"	t	typeref:struct:_s_udp_cmd
s_udp_header	kerneldef.h	/^}s_udp_header;$/;"	t	typeref:struct:_s_udp_header
sat	utils/colorConvert.cpp	11;"	d	file:
scaleOutWriteTask	KVideo/vgaProviderSystem.cpp	/^void* VGAProviderSystem::scaleOutWriteTask(void* pParam) {$/;"	f	class:VGAProviderSystem
sceneSecond	netprotocal/TPCCommandStruct.h	/^	int sceneSecond;$/;"	m	struct:tagPRRecordParam
school	liveCourse/livemtgConstDefine.h	/^	char school[100];$/;"	m	struct:tagLiveMtgEnter
sdi0_buffer_addr	core/membufUtils.cpp	/^unsigned char *sdi0_buffer_addr[MAX_BUFFER];$/;"	v
sdi1_buffer_addr	core/membufUtils.cpp	/^unsigned char *sdi1_buffer_addr[MAX_BUFFER];$/;"	v
semcount	core/semp.h	/^  unsigned int semcount;$/;"	m	struct:semp_t
semp_deinit	core/semp.cpp	/^void SempUtils::semp_deinit(semp_t *semp) {$/;"	f	class:SempUtils
semp_init	core/semp.cpp	/^void SempUtils::semp_init(semp_t *semp, unsigned int count) {$/;"	f	class:SempUtils
semp_pend	core/semp.cpp	/^void SempUtils::semp_pend(semp_t *semp) {$/;"	f	class:SempUtils
semp_post	core/semp.cpp	/^void SempUtils::semp_post(semp_t *semp) {$/;"	f	class:SempUtils
semp_reset	core/semp.cpp	/^void SempUtils::semp_reset(semp_t *semp) {$/;"	f	class:SempUtils
semp_signal	core/semp.cpp	/^void SempUtils::semp_signal(semp_t *semp) {$/;"	f	class:SempUtils
semp_t	core/semp.h	/^typedef struct semp_t$/;"	s
semp_t	core/semp.h	/^} semp_t;$/;"	t	typeref:struct:semp_t
semp_wait	core/semp.cpp	/^void SempUtils::semp_wait(semp_t *semp) {$/;"	f	class:SempUtils
send	Command/udp.cpp	/^bool Udp::send(DWORD dwDestIP, short port, const char *data, int len){$/;"	f	class:Udp
send	Command/udp.cpp	/^bool Udp::send(const char *ip, short port, const char *data, int len) {$/;"	f	class:Udp
sendAck	Command/KernelBoardCommandHandle.cpp	/^BOOL KernelBoardCommandHandle::sendAck(DWORD dwFromIP, BYTE byteFrameIndex, IC2CMD_CmdID CmdID) {$/;"	f	class:KernelBoardCommandHandle
sendClassStatus	liveCourse/courseWxManager.cpp	/^bool CourseWxManager::sendClassStatus(int classStatus) {$/;"	f	class:CourseWxManager
sendConnect	Command/AssistCommandHandle.cpp	/^bool AssistCommandHandle::sendConnect(DWORD dwDestIP) {$/;"	f	class:AssistCommandHandle
sendCourseInfo	Command/AssistCommandHandle.cpp	/^bool AssistCommandHandle::sendCourseInfo(string strCourseInfo) {$/;"	f	class:AssistCommandHandle
sendCurState	Command/AssistCommandHandle.cpp	/^bool AssistCommandHandle::sendCurState() {$/;"	f	class:AssistCommandHandle
sendCurTime	Command/AssistCommandHandle.cpp	/^bool AssistCommandHandle::sendCurTime() {$/;"	f	class:AssistCommandHandle
sendData	Command/KernelBoardCommandHandle.cpp	/^BOOL KernelBoardCommandHandle::sendData(string strDestIP, WORD wDestPort, BYTE* pBuffer, DWORD dwLen) {$/;"	f	class:KernelBoardCommandHandle
sendData	core/mtgClient.cpp	/^bool MtgClient::sendData(const string& path, const char* pData, int len, int type) {$/;"	f	class:MtgClient
sendData	liveCourse/classWxManager.cpp	/^bool ClassWxManager::sendData(const char* pPath, const char* pData, int dataLen,$/;"	f	class:ClassWxManager
sendData	liveCourse/courseWxManager.cpp	/^bool CourseWxManager::sendData(const char* pPath, const char* pData, int dataLen,$/;"	f	class:CourseWxManager
sendData	liveCourse/liveCourseManager.cpp	/^bool LiveCourseManager::sendData(const char* pPath, const char* pData, int dataLen,$/;"	f	class:LiveCourseManager
sendDisconnect	Command/AssistCommandHandle.cpp	/^bool AssistCommandHandle::sendDisconnect() {$/;"	f	class:AssistCommandHandle
sendEnter	liveCourse/courseWxManager.cpp	/^bool CourseWxManager::sendEnter() {$/;"	f	class:CourseWxManager
sendFreezed	Command/KernelBoardCommandHandle.cpp	/^BOOL KernelBoardCommandHandle::sendFreezed(DWORD dwChannel) {$/;"	f	class:KernelBoardCommandHandle
sendHeartBeat	Command/Function.cpp	/^BOOL CFunction::sendHeartBeat() {$/;"	f	class:CFunction
sendListenerStreamVideo	KVideo/streamVideoManager.cpp	/^bool StreamVideoManager::sendListenerStreamVideo(const char* pData, int len, bool bIFrame,$/;"	f	class:StreamVideoManager
sendMediaFile	Command/AssistCommandHandle.cpp	/^bool AssistCommandHandle::sendMediaFile(string strFileName) {$/;"	f	class:AssistCommandHandle
sendMessage	monitor/monitorSender.cpp	/^bool MonitorSender::sendMessage() {$/;"	f	class:MonitorSender
sendMsg	Command/KernelBoardCommandHandle.cpp	/^BOOL KernelBoardCommandHandle::sendMsg(IC2CMD_CmdID CmdID, IC2CMD_AD_Msg Msg,$/;"	f	class:KernelBoardCommandHandle
sendMsg	Command/KernelBoardCommandHandle.cpp	/^BOOL KernelBoardCommandHandle::sendMsg(IC2CMD_CmdID CmdID, IC2CMD_Data1* pData1,$/;"	f	class:KernelBoardCommandHandle
sendQueryResponce	Command/Function.cpp	/^BOOL CFunction::sendQueryResponce(char* strFromIp) {$/;"	f	class:CFunction
sendRecordTemplate	Command/AssistCommandHandle.cpp	/^bool AssistCommandHandle::sendRecordTemplate() {$/;"	f	class:AssistCommandHandle
sendRtmpBuffer	core/rtmpHandle.cpp	/^void* RtmpHandle::sendRtmpBuffer(void* pParam) {$/;"	f	class:RtmpHandle
sendSaveFile	Command/AssistCommandHandle.cpp	/^bool AssistCommandHandle::sendSaveFile(string strMediaFile) {$/;"	f	class:AssistCommandHandle
sendSharePath	Command/AssistCommandHandle.cpp	/^bool AssistCommandHandle::sendSharePath(string strPath) {$/;"	f	class:AssistCommandHandle
sendStateCmd	Command/KernelBoardCommandHandle.cpp	/^BOOL KernelBoardCommandHandle::sendStateCmd(int state) {$/;"	f	class:KernelBoardCommandHandle
sendStopCmd	Command/KernelBoardCommandHandle.cpp	/^BOOL KernelBoardCommandHandle::sendStopCmd() {$/;"	f	class:KernelBoardCommandHandle
sendStreamMediaState	Command/Function.cpp	/^BOOL CFunction::sendStreamMediaState() {$/;"	f	class:CFunction
sendStreamNotify	Command/AssistCommandHandle.cpp	/^bool AssistCommandHandle::sendStreamNotify(const char* strNotify) {$/;"	f	class:AssistCommandHandle
sendSystemStatusResponse	Command/Function.cpp	/^BOOL CFunction::sendSystemStatusResponse() {$/;"	f	class:CFunction
sendTeacherInfo	Command/AssistCommandHandle.cpp	/^bool AssistCommandHandle::sendTeacherInfo(string strTeacherInfo) {$/;"	f	class:AssistCommandHandle
sendVideoList	liveCourse/courseWxManager.cpp	/^bool CourseWxManager::sendVideoList() {$/;"	f	class:CourseWxManager
sequencenumber	KVideo/audio/rtpstruct.h	/^	uint16_t sequencenumber;$/;"	m	struct:RTPHeader
ses	package/ti_sdo_ce_examples_apps_armlivemedia.java	/^    Session ses;$/;"	f	class:ti_sdo_ce_examples_apps_armlivemedia
setAACListener	KVideo/audio/codec_engine.cpp	/^void codec_engine::setAACListener(iaudio* _listener)$/;"	f	class:codec_engine
setACCParam	setting.cpp	/^void Setting::setACCParam(PRACCParam param) {$/;"	f	class:Setting
setAlsaAudioParam	KVideo/audioCapture.cpp	/^bool AudioCapture::setAlsaAudioParam() {$/;"	f	class:AudioCapture
setAlsaAudioParam	core/audioEncode.cpp	/^bool AudioEncode::setAlsaAudioParam() {$/;"	f	class:AudioEncode
setAlsaAudioParam	core/audioEncodeFAAC.cpp	/^bool AudioEncodeFAAC::setAlsaAudioParam() {$/;"	f	class:AudioEncodeFAAC
setAutoUploadFile	setting.cpp	/^void Setting::setAutoUploadFile(bool bAutoUploadFile) {$/;"	f	class:Setting
setBPIPInfo	setting.cpp	/^void Setting::setBPIPInfo(BPIPINFO info) {$/;"	f	class:Setting
setBaseRecordParams	setting.cpp	/^void Setting::setBaseRecordParams(BaseRecordParam param) {$/;"	f	class:Setting
setCardDescription	KVideo/CardInfo.cpp	/^bool CardInfo::setCardDescription(const string& description) {$/;"	f	class:CardInfo
setChannelID	KVideo/HikVideo.cpp	/^bool HikVideo::setChannelID(int channelID) {$/;"	f	class:HikVideo
setComment	monitor/json_value.cpp	/^Value::CommentInfo::setComment( const char *text )$/;"	f	class:Json::Value::CommentInfo
setComment	monitor/json_value.cpp	/^Value::setComment( const char *comment,$/;"	f	class:Json::Value
setComment	monitor/json_value.cpp	/^Value::setComment( const std::string &comment,$/;"	f	class:Json::Value
setCourseAndTeacherName	Command/AssistCommandHandle.cpp	/^bool AssistCommandHandle::setCourseAndTeacherName(string strTeacherName, string strCourseName) {$/;"	f	class:AssistCommandHandle
setCourseInfo	Command/AssistCommandHandle.cpp	/^bool AssistCommandHandle::setCourseInfo(string strRecordMediaFile, string strMediaServiceURL) {$/;"	f	class:AssistCommandHandle
setCourseInfo	liveCourse/courseWxManager.cpp	/^bool CourseWxManager::setCourseInfo(int courseId, string strMtgIp) {$/;"	f	class:CourseWxManager
setDecodeData	core/mixtureMode_IPC.cpp	/^void MixtureMode_IPC::setDecodeData(char* pData, int length, int aDecIndex, int channel, bool bChannelChanged) {$/;"	f	class:MixtureMode_IPC
setDecodeParams	core/Mp4Player.cpp	/^bool Mp4FilePlayer::setDecodeParams() {$/;"	f	class:Mp4FilePlayer
setDecodeParams	core/mixtureMode_IPC.cpp	/^bool MixtureMode_IPC::setDecodeParams(int nDecIndex) {$/;"	f	class:MixtureMode_IPC
setDeiParams	core/mixtureMode_IPC.cpp	/^bool MixtureMode_IPC::setDeiParams() {$/;"	f	class:MixtureMode_IPC
setDeiParams	core/mixtureMode_SDI.cpp	/^bool MixtureMode_SDI::setDeiParams() {$/;"	f	class:MixtureMode_SDI
setDeiParams	core/movieHeaderTail.cpp	/^bool MovieHeaderTail::setDeiParams() {$/;"	f	class:MovieHeaderTail
setDisplayContext	core/HDMIDisplayManager.cpp	/^bool HDMIDisplayManager::setDisplayContext(EDisplayContext context) {$/;"	f	class:HDMIDisplayManager
setDisplayParams	core/Mp4Player.cpp	/^bool Mp4FilePlayer::setDisplayParams() {$/;"	f	class:Mp4FilePlayer
setDisplayParams	core/movieHeaderTail.cpp	/^bool MovieHeaderTail::setDisplayParams() {$/;"	f	class:MovieHeaderTail
setDisplayResolution	core/HDMIDisplayManager.cpp	/^bool HDMIDisplayManager::setDisplayResolution(int width, int height) {$/;"	f	class:HDMIDisplayManager
setEncodeParams	KVideo/vgaProviderSystem.cpp	/^bool VGAProviderSystem::setEncodeParams() {$/;"	f	class:VGAProviderSystem
setEncodeParams	core/mixtureMode_IPC.cpp	/^bool MixtureMode_IPC::setEncodeParams() {$/;"	f	class:MixtureMode_IPC
setEncodeParams	core/mixtureMode_SDI.cpp	/^bool MixtureMode_SDI::setEncodeParams() {$/;"	f	class:MixtureMode_SDI
setEncodeParams	core/movieHeaderTail.cpp	/^bool MovieHeaderTail::setEncodeParams() {$/;"	f	class:MovieHeaderTail
setEncodeParams	core/resourceMode_SDI.cpp	/^bool ResourceModeHandle_SDI::setEncodeParams() {$/;"	f	class:ResourceModeHandle_SDI
setEventId	setting.h	/^	void setEventId(int eventId) {$/;"	f	class:Setting
setHeadEnable	liveMediaState.cpp	/^void StateHandle::setHeadEnable(BOOL bHeadEnable) {$/;"	f	class:StateHandle
setHeadEnable	setting.cpp	/^void Setting::setHeadEnable(bool bEnable) {$/;"	f	class:Setting
setHeadTailScaleParams	core/mixtureMode_IPC.cpp	/^bool MixtureMode_IPC::setHeadTailScaleParams() {$/;"	f	class:MixtureMode_IPC
setHeadTailScaleParams	core/mixtureMode_SDI.cpp	/^bool MixtureMode_SDI::setHeadTailScaleParams() {$/;"	f	class:MixtureMode_SDI
setIP	KVideo/CardInfo.cpp	/^bool CardInfo::setIP(const string& strIP) {$/;"	f	class:CardInfo
setIPCChannel	setting.cpp	/^bool Setting::setIPCChannel(PRChannel channel) {$/;"	f	class:Setting
setIPCInfo	setting.cpp	/^void Setting::setIPCInfo(IPCInfo* info, int index) {$/;"	f	class:Setting
setInputText	core/osdManager.cpp	/^int OSDManager::setInputText(char* pIntext, int aPosX, int aPosY,$/;"	f	class:OSDManager
setInterval	timer.cpp	/^bool Timer::setInterval(int mill) {$/;"	f	class:Timer
setItemUsed	monitor/value.h	/^      inline void setItemUsed( bool isUsed = true )$/;"	f	class:Json::Value
setLCLive	core/rtmpManager.cpp	/^bool RtmpManager::setLCLive(bool bLCLive) {$/;"	f	class:RtmpManager
setLCRtmpUrl	setting.cpp	/^void Setting::setLCRtmpUrl(const char* pLCRtmpUrl) {$/;"	f	class:Setting
setLCSendResourceEnable	setting.cpp	/^void Setting::setLCSendResourceEnable(bool bLCSendResourceEnable) {$/;"	f	class:Setting
setListener	core/movieHeaderTail.cpp	/^void MovieHeaderTail::setListener(IMovieHeaderTailStreamListener* pListener) {$/;"	f	class:MovieHeaderTail
setLiveCourseRole	core/HDMIDisplayManager.cpp	/^bool HDMIDisplayManager::setLiveCourseRole(ELiveCourseRole role) {$/;"	f	class:HDMIDisplayManager
setLiveEncodeParams	core/mixtureMode_IPC.cpp	/^bool MixtureMode_IPC::setLiveEncodeParams() {$/;"	f	class:MixtureMode_IPC
setLiveEncodeParams	core/mixtureMode_SDI.cpp	/^bool MixtureMode_SDI::setLiveEncodeParams() {$/;"	f	class:MixtureMode_SDI
setLiveNfParams	core/mixtureMode_IPC.cpp	/^bool MixtureMode_IPC::setLiveNfParams() {$/;"	f	class:MixtureMode_IPC
setLiveNfParams	core/mixtureMode_SDI.cpp	/^bool MixtureMode_SDI::setLiveNfParams() {$/;"	f	class:MixtureMode_SDI
setMediaInitialize	liveMediaState.cpp	/^void StateHandle::setMediaInitialize(BOOL bMediaInitialize) {$/;"	f	class:StateHandle
setMemberNameIsStatic	monitor/value.h	/^      inline void setMemberNameIsStatic( bool isStatic )$/;"	f	class:Json::Value
setMixData	core/mixtureMode_IPC.cpp	/^bool MixtureMode_IPC::setMixData(unsigned char* pPhyAddr, int size) {$/;"	f	class:MixtureMode_IPC
setMixData	core/mixtureMode_SDI.cpp	/^bool MixtureMode_SDI::setMixData(unsigned char* pPhyAddr, int size) {$/;"	f	class:MixtureMode_SDI
setMixRemoteEnable	KVideo/audio/codec_engine.cpp	/^void codec_engine::setMixRemoteEnable(bool bMixRemoteEnable) {$/;"	f	class:codec_engine
setMtgEnable	setting.cpp	/^void Setting::setMtgEnable(bool bMtgEnable) {$/;"	f	class:Setting
setNfParams	core/mixtureMode_IPC.cpp	/^bool MixtureMode_IPC::setNfParams() {$/;"	f	class:MixtureMode_IPC
setNfParams	core/mixtureMode_SDI.cpp	/^bool MixtureMode_SDI::setNfParams() {$/;"	f	class:MixtureMode_SDI
setOldIPCStudentChannel	setting.cpp	/^bool Setting::setOldIPCStudentChannel(int dwStudentChannel) {$/;"	f	class:Setting
setOldIPCTeacherChannel	setting.cpp	/^bool Setting::setOldIPCTeacherChannel(int dwTeacherChannel) {$/;"	f	class:Setting
setPRState	liveMediaState.cpp	/^void StateHandle::setPRState(PRState aPRState) {$/;"	f	class:StateHandle
setParamPortDefinition	core/audioEncode.cpp	/^OMX_ERRORTYPE AudioEncode::setParamPortDefinition() {$/;"	f	class:AudioEncode
setParamPortDefinition	core/audioEncodeOMX.cpp	/^OMX_ERRORTYPE AudioEncodeOMX::setParamPortDefinition() {$/;"	f	class:AudioEncodeOMX
setPassword	KVideo/CardInfo.cpp	/^bool CardInfo::setPassword(const string& password) {$/;"	f	class:CardInfo
setPort	Command/udp.cpp	/^bool Udp::setPort(short port) {$/;"	f	class:Udp
setPort	KVideo/CardInfo.cpp	/^bool CardInfo::setPort(int port) {$/;"	f	class:CardInfo
setPowerOff	liveMediaState.cpp	/^void StateHandle::setPowerOff(BOOL bPowerOff) {$/;"	f	class:StateHandle
setRecordMode	setting.cpp	/^void Setting::setRecordMode(int mode) {$/;"	f	class:Setting
setRefTime	liveMediaState.cpp	/^void StateHandle::setRefTime(DWORD aRefTime) {$/;"	f	class:StateHandle
setResolution720P	KVideo/vgaProviderSystem.cpp	/^void VGAProviderSystem::setResolution720P(bool bUnder720P) {$/;"	f	class:VGAProviderSystem
setRole	liveCourse/courseWxManager.cpp	/^bool CourseWxManager::setRole(ELiveCourseRole role) {$/;"	f	class:CourseWxManager
setRtmpEnable	setting.cpp	/^void Setting::setRtmpEnable(bool bRtmpEnable) {$/;"	f	class:Setting
setSDIDEIData	core/mixtureMode_SDI.cpp	/^void MixtureMode_SDI::setSDIDEIData(unsigned char* pPhyAddr, int size, int aSDIIndex) {$/;"	f	class:MixtureMode_SDI
setSDIDEIParams	core/mixtureMode_SDI.cpp	/^bool MixtureMode_SDI::setSDIDEIParams() {$/;"	f	class:MixtureMode_SDI
setSDIDEIParams	core/resourceMode_SDI.cpp	/^bool ResourceModeHandle_SDI::setSDIDEIParams(int nSdiDEIIndex) {$/;"	f	class:ResourceModeHandle_SDI
setSDIData	core/resourceMode_SDI.cpp	/^void ResourceModeHandle_SDI::setSDIData(unsigned char* pPhyAddr, int size, int aSDIIndex, int channel) {$/;"	f	class:ResourceModeHandle_SDI
setSDIEncParams	core/mixtureMode_SDI.cpp	/^bool MixtureMode_SDI::setSDIEncParams() {$/;"	f	class:MixtureMode_SDI
setSDIEncParams	core/resourceMode_SDI.cpp	/^bool ResourceModeHandle_SDI::setSDIEncParams(int aSdiEncIndex) {$/;"	f	class:ResourceModeHandle_SDI
setSDINfParams	core/mixtureMode_SDI.cpp	/^bool MixtureMode_SDI::setSDINfParams() {$/;"	f	class:MixtureMode_SDI
setSDIScaleParams	core/mixtureMode_SDI.cpp	/^bool MixtureMode_SDI::setSDIScaleParams() {$/;"	f	class:MixtureMode_SDI
setSaveTime	liveMediaState.cpp	/^void StateHandle::setSaveTime(DWORD aSaveTime) {$/;"	f	class:StateHandle
setScalarParams	core/Mp4Player.cpp	/^bool Mp4FilePlayer::setScalarParams() {$/;"	f	class:Mp4FilePlayer
setScalarParams	core/mixtureMode_IPC.cpp	/^bool MixtureMode_IPC::setScalarParams(int nScaleIndex) {$/;"	f	class:MixtureMode_IPC
setScaleParams	KVideo/vgaProviderSystem.cpp	/^bool VGAProviderSystem::setScaleParams() {$/;"	f	class:VGAProviderSystem
setSceneBackPicInfo	setting.cpp	/^void Setting::setSceneBackPicInfo(const SceneBackPicInfo* info) {$/;"	f	class:Setting
setSceneMediaFileInfo	setting.cpp	/^void Setting::setSceneMediaFileInfo(const SceneMeidaFileInfo* info) {$/;"	f	class:Setting
setSceneMixPicInfo	setting.cpp	/^void Setting::setSceneMixPicInfo(const SceneMixPicInfo* info) {$/;"	f	class:Setting
setSceneStringInfo	setting.cpp	/^void Setting::setSceneStringInfo(const SceneStringInfo* info) {$/;"	f	class:Setting
setSceneVideoInfo	setting.cpp	/^void Setting::setSceneVideoInfo(const SceneVideoInfo* info) {$/;"	f	class:Setting
setSharePath	Command/AssistCommandHandle.cpp	/^bool AssistCommandHandle::setSharePath(string strSharePath) {$/;"	f	class:AssistCommandHandle
setSpxListener	KVideo/audio/codec_engine.cpp	/^void codec_engine::setSpxListener(iaudio* _listener)$/;"	f	class:codec_engine
setSpxListener	liveCourse/courseWxManager.cpp	/^bool CourseWxManager::setSpxListener(ILiveCourseManagerObserver* pObserver)$/;"	f	class:CourseWxManager
setStreamMediaState	liveMediaState.cpp	/^void StateHandle::setStreamMediaState(StreamMediaState state) {$/;"	f	class:StateHandle
setUsername	KVideo/CardInfo.cpp	/^bool CardInfo::setUsername(const string& username) {$/;"	f	class:CardInfo
setUtf8RecordParam	setting.cpp	/^void Setting::setUtf8RecordParam(stUtf8RecordParam* pParam) {$/;"	f	class:Setting
setVGAEncodeData	KVideo/vgaProviderSystem.cpp	/^void VGAProviderSystem::setVGAEncodeData(unsigned char* pPhyAddr, int size) {$/;"	f	class:VGAProviderSystem
setVGAEncodeData	core/mixtureMode_SDI.cpp	/^void MixtureMode_SDI::setVGAEncodeData(unsigned char* pPhyAddr, int size) {$/;"	f	class:MixtureMode_SDI
setVGAEncodeData	core/resourceMode_SDI.cpp	/^void ResourceModeHandle_SDI::setVGAEncodeData(unsigned char* pPhyAddr, int size) {$/;"	f	class:ResourceModeHandle_SDI
setVGAEncodeParams	core/mixtureMode_SDI.cpp	/^bool MixtureMode_SDI::setVGAEncodeParams() {$/;"	f	class:MixtureMode_SDI
setVGAScalarParams	core/mixtureMode_IPC.cpp	/^bool MixtureMode_IPC::setVGAScalarParams() {$/;"	f	class:MixtureMode_IPC
setVGAScaleData	KVideo/vgaProviderSystem.cpp	/^void VGAProviderSystem::setVGAScaleData(unsigned char* pPhyAddr, int size) {$/;"	f	class:VGAProviderSystem
setVGAScaleData	core/mixtureMode_IPC.cpp	/^void MixtureMode_IPC::setVGAScaleData(unsigned char* pPhyAddr, int size) {$/;"	f	class:MixtureMode_IPC
setVGAScaleData	core/mixtureMode_SDI.cpp	/^void MixtureMode_SDI::setVGAScaleData(unsigned char* pPhyAddr, int size) {$/;"	f	class:MixtureMode_SDI
setVGAScaleParams	core/mixtureMode_SDI.cpp	/^bool MixtureMode_SDI::setVGAScaleParams() {$/;"	f	class:MixtureMode_SDI
setWebServiceParam	setting.cpp	/^void Setting::setWebServiceParam(WebServiceParam param) {$/;"	f	class:Setting
setupCapture	KVideo/captureSDIVideo.cpp	/^bool CaptureSDI::setupCapture() {$/;"	f	class:CaptureSDI
setupCapture	KVideo/captureVga.cpp	/^bool CaptureVGA::setupCapture() {$/;"	f	class:CaptureVGA
setupDisplay	core/v4lDisplay.cpp	/^bool DisplayHandle::setupDisplay(int width, int height) {$/;"	f	class:DisplayHandle
showinfor	KVideo/audio/codec_engine.cpp	/^void codec_engine::showinfor()$/;"	f	class:codec_engine
sigroutine	app.cpp	/^void sigroutine(int dunno) { \/* 信号处理例程，其中dunno将会得到信号的值 *\/$/;"	f
singalThreadProc	app.cpp	/^static void *singalThreadProc(void *pParam) {$/;"	f	file:
size	monitor/json_value.cpp	/^Value::size() const$/;"	f	class:Json::Value
size_	monitor/value.h	/^      ArrayIndex size_;$/;"	m	class:Json::ValueInternalArray
size_t	monitor/value.h	/^      typedef unsigned int size_t;$/;"	t	class:Json::ValueConstIterator
size_t	monitor/value.h	/^      typedef unsigned int size_t;$/;"	t	class:Json::ValueIterator
size_t	monitor/value.h	/^      typedef unsigned int size_t;$/;"	t	class:Json::ValueIteratorBase
sizes	package/ti_sdo_ce_examples_apps_armlivemedia.java	/^    ArrayList<Object> sizes = new ArrayList<Object>();$/;"	f	class:ti_sdo_ce_examples_apps_armlivemedia
skipCommentTokens	monitor/json_reader.cpp	/^Reader::skipCommentTokens( Token &token )$/;"	f	class:Json::Reader
skipSpaces	monitor/json_reader.cpp	/^Reader::skipSpaces()$/;"	f	class:Json::Reader
smain	app.cpp	/^Int smain()$/;"	f
speexdata	KVideo/audio/codec_engine.cpp	/^	char speexdata[256] = {0};$/;"	m	namespace:__anon3	file:
spx_data	KVideo/audio/SpeexCod.h	/^	unsigned char spx_data[PCM_LEN]; \/\/ ec$/;"	m	struct:enc_info
spx_data	KVideo/audio/SpeexCod.h	/^	unsigned char spx_data[SPX_LEN];$/;"	m	struct:dec_info
spx_map	KVideo/audio/codec_engine.h	/^typedef std::map<std::string, channelinfo> spx_map;$/;"	t
spx_valid	KVideo/audio/SpeexCod.h	/^    int spx_valid;$/;"	m	struct:dec_info
spxfifo	KVideo/audio/codec_engine.h	/^	fifo spxfifo;$/;"	m	struct:channelinfo
srcbidx	core/edma.h	/^	int srcbidx;$/;"	m	struct:edma_arg
srccidx	core/edma.h	/^	int srccidx;$/;"	m	struct:edma_arg
ssrc	KVideo/audio/rtpstruct.h	/^	uint32_t ssrc;	$/;"	m	struct:RTPHeader
ssrc	KVideo/audio/rtpstruct.h	/^	uint32_t ssrc;$/;"	m	struct:RTPSourceIdentifier
stAudioMixLevel	KVideo/audio/audio_mixer.h	/^}stAudioMixLevel;$/;"	t	typeref:struct:__anon4
stCameraFrameBuffer	core/cameraBufferPool.h	/^	stCameraFrameBuffer()$/;"	f	struct:stCameraFrameBuffer
stCameraFrameBuffer	core/cameraBufferPool.h	/^typedef struct stCameraFrameBuffer$/;"	s
stChannelInfo	KVideo/audio/audio_mixer.h	/^}stChannelInfo;$/;"	t	typeref:struct:__anon5
stConnInConnOutThreadArgs	core/OMXCommonDef.h	/^} stConnInConnOutThreadArgs;$/;"	t	typeref:struct:tagConnInConnOutThreadArgs
stFrameBuffer	core/framePool.h	/^	stFrameBuffer()$/;"	f	struct:stFrameBuffer
stFrameBuffer	core/framePool.h	/^typedef struct stFrameBuffer$/;"	s
stInputThreadArgs	core/OMXCommonDef.h	/^} stInputThreadArgs;$/;"	t	typeref:struct:tagInputThreadArgs
stRTPPacket	KVideo/audio/rtpstruct.h	/^struct stRTPPacket$/;"	s
stShareMem	core/shareMem.h	/^struct stShareMem {$/;"	s
stStragyMode	netprotocal/SCSMCommandStruct.h	/^}stStragyMode;$/;"	t	typeref:struct:tagStragyMode
stSubscribeInfo	liveCourse/courseWxManager.h	/^struct stSubscribeInfo {$/;"	s
stUtf8RecordParam	netprotocal/SCSMCommandStruct.h	/^}stUtf8RecordParam;$/;"	t	typeref:struct:tagUtf8RecordParam
stVideoDelayParam	setting.h	/^struct stVideoDelayParam {$/;"	s
start	KVideo/audio/audio_capture.cpp	/^int audio_capture::start()$/;"	f	class:audio_capture
start	KVideo/audio/audio_playback.cpp	/^int audio_playback::start()$/;"	f	class:audio_playback
start	KVideo/audio/codec_engine.cpp	/^int codec_engine::start()$/;"	f	class:codec_engine
start	KVideo/audioCapture.cpp	/^bool AudioCapture::start() {$/;"	f	class:AudioCapture
start	KVideo/captureSDIVideo.cpp	/^bool CaptureSDI::start() {$/;"	f	class:CaptureSDI
start	KVideo/captureVga.cpp	/^bool CaptureVGA::start() {$/;"	f	class:CaptureVGA
start	KVideo/captureVideoDefines.h	/^	char *start;$/;"	m	struct:buf_info
start	KVideo/vgaProviderSystem.cpp	/^bool VGAProviderSystem::start() {$/;"	f	class:VGAProviderSystem
start	core/audioEncode.cpp	/^bool AudioEncode::start() {$/;"	f	class:AudioEncode
start	core/audioEncodeFAAC.cpp	/^bool AudioEncodeFAAC::start() {$/;"	f	class:AudioEncodeFAAC
start	core/audioEncodeOMX.cpp	/^bool AudioEncodeOMX::start() {$/;"	f	class:AudioEncodeOMX
start	core/baseMode.cpp	/^BOOL BaseMode::start() {$/;"	f	class:BaseMode
start	core/mixtureMode_IPC.cpp	/^BOOL MixtureMode_IPC::start() {$/;"	f	class:MixtureMode_IPC
start	core/mixtureMode_SDI.cpp	/^BOOL MixtureMode_SDI::start() {$/;"	f	class:MixtureMode_SDI
start	core/movieHeaderTail.cpp	/^int MovieHeaderTail::start() {$/;"	f	class:MovieHeaderTail
start	core/resourceMode_IPC.cpp	/^BOOL ResourceModeHandle_IPC::start() {$/;"	f	class:ResourceModeHandle_IPC
start	core/resourceMode_SDI.cpp	/^BOOL ResourceModeHandle_SDI::start() {$/;"	f	class:ResourceModeHandle_SDI
start	timer.cpp	/^bool Timer::start(ITimerListener* pListener) {$/;"	f	class:Timer
startAACEncode	KVideo/audio/codec_engine.cpp	/^void codec_engine::startAACEncode()$/;"	f	class:codec_engine
startCapture	KVideo/captureSDIVideo.cpp	/^bool CaptureSDI::startCapture(void) {$/;"	f	class:CaptureSDI
startCapture	KVideo/captureVga.cpp	/^bool CaptureVGA::startCapture(void) {$/;"	f	class:CaptureVGA
startDisplay	core/v4lDisplay.cpp	/^bool DisplayHandle::startDisplay() {$/;"	f	class:DisplayHandle
startEchoCancel	KVideo/audio/codec_engine.cpp	/^void codec_engine::startEchoCancel() {$/;"	f	class:codec_engine
startLowerHalfOMXThread	core/mixtureMode_IPC.cpp	/^bool MixtureMode_IPC::startLowerHalfOMXThread() {$/;"	f	class:MixtureMode_IPC
startLowerHalfOMXThread	core/mixtureMode_SDI.cpp	/^bool MixtureMode_SDI::startLowerHalfOMXThread() {$/;"	f	class:MixtureMode_SDI
startOMXThread	KVideo/vgaProviderSystem.cpp	/^bool VGAProviderSystem::startOMXThread() {$/;"	f	class:VGAProviderSystem
startOMXThread	core/Mp4Player.cpp	/^bool Mp4FilePlayer::startOMXThread() {$/;"	f	class:Mp4FilePlayer
startOMXThread	core/resourceMode_SDI.cpp	/^bool ResourceModeHandle_SDI::startOMXThread() {$/;"	f	class:ResourceModeHandle_SDI
startOutportIndex	core/OMXCommonDef.h	/^  OMX_U32 startOutportIndex;$/;"	m	struct:tagComponentWrapper
startRecord	kernel.cpp	/^bool Kernel::startRecord() {$/;"	f	class:Kernel
startRtmp	core/rtmpManager.cpp	/^bool RtmpManager::startRtmp() {$/;"	f	class:RtmpManager
startThread	core/mtgInit.cpp	/^bool MtgHeartbeat::startThread() {$/;"	f	class:MtgHeartbeat
startUpperHalfOMXThread	core/mixtureMode_IPC.cpp	/^bool MixtureMode_IPC::startUpperHalfOMXThread() {$/;"	f	class:MixtureMode_IPC
startUpperHalfOMXThread	core/mixtureMode_SDI.cpp	/^bool MixtureMode_SDI::startUpperHalfOMXThread() {$/;"	f	class:MixtureMode_SDI
startVGAComponentThread	core/mixtureMode_IPC.cpp	/^bool MixtureMode_IPC::startVGAComponentThread() {$/;"	f	class:MixtureMode_IPC
startVGAComponentThread	core/mixtureMode_SDI.cpp	/^bool MixtureMode_SDI::startVGAComponentThread() {$/;"	f	class:MixtureMode_SDI
start_	monitor/reader.h	/^         Location start_;$/;"	m	class:Json::Reader::Token
state	KVideo/audio/structdef.h	/^	int  state;	  \/\/ 1: receive  2: send & receive$/;"	m	struct:stuserid
state	core/DecodeUtils.h	/^  unsigned char state;$/;"	m	struct:__anon14
state_sem	core/OMXCommonDef.h	/^  sem_t state_sem;$/;"	m	struct:tagComponentWrapper
status	liveCourse/livemtgConstDefine.h	/^	int status;														\/\/状态 上课 下课 休息$/;"	m	struct:tagLiveMtgClassStatus
status	liveCourse/livemtgConstDefine.h	/^	int status;$/;"	m	struct:tagLiveMtgCourse
status	liveCourse/livemtgConstDefine.h	/^	int status;$/;"	m	struct:tagLiveMtgWebMessage
stbufferflag	KVideo/audio/structdef.h	/^struct stbufferflag{$/;"	s
stop	KVideo/audio/audio_capture.cpp	/^int audio_capture::stop()$/;"	f	class:audio_capture
stop	KVideo/audio/audio_playback.cpp	/^int audio_playback::stop()$/;"	f	class:audio_playback
stop	KVideo/audio/codec_engine.cpp	/^int codec_engine::stop()$/;"	f	class:codec_engine
stop	KVideo/audioCapture.cpp	/^bool AudioCapture::stop() {$/;"	f	class:AudioCapture
stop	KVideo/captureSDIVideo.cpp	/^bool CaptureSDI::stop() {$/;"	f	class:CaptureSDI
stop	KVideo/captureVga.cpp	/^bool CaptureVGA::stop() {$/;"	f	class:CaptureVGA
stop	KVideo/vgaProviderSystem.cpp	/^bool VGAProviderSystem::stop() {$/;"	f	class:VGAProviderSystem
stop	core/Mp4Player.cpp	/^bool Mp4FilePlayer::stop() {$/;"	f	class:Mp4FilePlayer
stop	core/audioEncode.cpp	/^bool AudioEncode::stop() {$/;"	f	class:AudioEncode
stop	core/audioEncodeFAAC.cpp	/^bool AudioEncodeFAAC::stop() {$/;"	f	class:AudioEncodeFAAC
stop	core/audioEncodeOMX.cpp	/^bool AudioEncodeOMX::stop() {$/;"	f	class:AudioEncodeOMX
stop	core/baseMode.cpp	/^BOOL BaseMode::stop() {$/;"	f	class:BaseMode
stop	core/mixtureMode_IPC.cpp	/^BOOL MixtureMode_IPC::stop() {$/;"	f	class:MixtureMode_IPC
stop	core/mixtureMode_SDI.cpp	/^BOOL MixtureMode_SDI::stop() {$/;"	f	class:MixtureMode_SDI
stop	core/movieHeaderTail.cpp	/^BOOL MovieHeaderTail::stop() {$/;"	f	class:MovieHeaderTail
stop	core/resourceMode_IPC.cpp	/^BOOL ResourceModeHandle_IPC::stop() {$/;"	f	class:ResourceModeHandle_IPC
stop	core/resourceMode_SDI.cpp	/^BOOL ResourceModeHandle_SDI::stop() {$/;"	f	class:ResourceModeHandle_SDI
stop	timer.cpp	/^bool Timer::stop() {$/;"	f	class:Timer
stopAACEncode	KVideo/audio/codec_engine.cpp	/^void codec_engine::stopAACEncode()$/;"	f	class:codec_engine
stopCapture	KVideo/captureSDIVideo.cpp	/^bool CaptureSDI::stopCapture() {$/;"	f	class:CaptureSDI
stopCapture	KVideo/captureVga.cpp	/^bool CaptureVGA::stopCapture() {$/;"	f	class:CaptureVGA
stopDisplay	core/v4lDisplay.cpp	/^bool DisplayHandle::stopDisplay() {$/;"	f	class:DisplayHandle
stopEchoCancel	KVideo/audio/codec_engine.cpp	/^void codec_engine::stopEchoCancel() {$/;"	f	class:codec_engine
stopOMXThread	KVideo/vgaProviderSystem.cpp	/^bool VGAProviderSystem::stopOMXThread() {$/;"	f	class:VGAProviderSystem
stopOMXThread	core/mixtureMode_IPC.cpp	/^bool MixtureMode_IPC::stopOMXThread() {$/;"	f	class:MixtureMode_IPC
stopOMXThread	core/mixtureMode_SDI.cpp	/^bool MixtureMode_SDI::stopOMXThread() {$/;"	f	class:MixtureMode_SDI
stopOMXThread	core/resourceMode_SDI.cpp	/^bool ResourceModeHandle_SDI::stopOMXThread() {$/;"	f	class:ResourceModeHandle_SDI
stopRecord	kernel.cpp	/^bool Kernel::stopRecord() {$/;"	f	class:Kernel
stopRtmp	core/rtmpManager.cpp	/^bool RtmpManager::stopRtmp() {$/;"	f	class:RtmpManager
stopThread	core/mtgInit.cpp	/^bool MtgHeartbeat::stopThread() {$/;"	f	class:MtgHeartbeat
stopVGAComponentThread	core/mixtureMode_IPC.cpp	/^bool MixtureMode_IPC::stopVGAComponentThread() {$/;"	f	class:MixtureMode_IPC
stopVGAComponentThread	core/mixtureMode_SDI.cpp	/^bool MixtureMode_SDI::stopVGAComponentThread() {$/;"	f	class:MixtureMode_SDI
str2int	utils/commonUtils.cpp	/^int CommonUtils::str2int(const string& str) {$/;"	f	class:CommonUtils
strCourse	Command/AssistCommandHandle.h	/^	string		strCourse;$/;"	m	struct:tagPPTConfig
strMServiceURL	Command/AssistCommandHandle.h	/^	string		strMServiceURL;$/;"	m	struct:tagPPTConfig
strOwnIP	Command/AssistCommandHandle.h	/^	string		strOwnIP;$/;"	m	struct:tagPPTConfig
strSaveMediaFile	Command/AssistCommandHandle.h	/^	string		strSaveMediaFile;$/;"	m	struct:tagPPTConfig
strSharePath	Command/AssistCommandHandle.h	/^	string		strSharePath;$/;"	m	struct:tagPPTConfig
strTeacher	Command/AssistCommandHandle.h	/^	string		strTeacher;$/;"	m	struct:tagPPTConfig
str_	monitor/value.h	/^      const char *str_;$/;"	m	class:Json::StaticString
streamContent	liveCourse/livemtgConstDefine.h	/^	char streamContent[16]; \/\/流的含义$/;"	m	struct:tagStreamInfo
streamfps	liveCourse/livemtgConstDefine.h	/^	int streamfps;	\/\/流的帧率$/;"	m	struct:tagStreamInfo
strictMode	monitor/json_reader.cpp	/^Features::strictMode()$/;"	f	class:Json::Features
strictRoot_	monitor/features.h	/^      bool strictRoot_;$/;"	m	class:Json::Features
stringValue	monitor/value.h	/^      stringValue,   \/\/\/< UTF-8 string value$/;"	e	enum:Json::ValueType
string_	monitor/value.h	/^         char *string_;$/;"	m	union:Json::Value::ValueHolder
stsendinfor	KVideo/audio/structdef.h	/^struct stsendinfor$/;"	s
stuAUDIOConnect	netprotocal/ICIIUnitCellDef.h	/^	ConnectParam		stuAUDIOConnect;$/;"	m	struct:tagUnitDevInfo
stuAVConnect	netprotocal/ICIIUnitCellDef.h	/^	ConnectParam		stuAVConnect;$/;"	m	struct:tagUnitDevInfo
stuIOInputConnect	netprotocal/ICIIUnitCellDef.h	/^	IOConnectParam		stuIOInputConnect;$/;"	m	struct:tagUnitDevInfo
stuIOOutnputConnect	netprotocal/ICIIUnitCellDef.h	/^	IOConnectParam		stuIOOutnputConnect;$/;"	m	struct:tagUnitDevInfo
stuVGAConnect	netprotocal/ICIIUnitCellDef.h	/^	ConnectParam		stuVGAConnect;$/;"	m	struct:tagUnitDevInfo
stuserid	KVideo/audio/structdef.h	/^struct stuserid				$/;"	s
stvideoinfor	KVideo/audio/structdef.h	/^struct stvideoinfor$/;"	s
subscribe	core/mtgClient.cpp	/^bool MtgClient::subscribe(const char* pPath, bool bOff) {$/;"	f	class:MtgClient
suspend	KVideo/audioCapture.cpp	/^void AudioCapture::suspend(void)$/;"	f	class:AudioCapture
suspend	core/audioEncode.cpp	/^void AudioEncode::suspend(void)$/;"	f	class:AudioEncode
suspend	core/audioEncodeFAAC.cpp	/^void AudioEncodeFAAC::suspend(void)$/;"	f	class:AudioEncodeFAAC
swap	monitor/json_value.cpp	/^Value::CZString::swap( CZString &other )$/;"	f	class:Json::Value::CZString
swap	monitor/json_value.cpp	/^Value::swap( Value &other )$/;"	f	class:Json::Value
swap16bpp	utils/colorConvert.cpp	/^void ColorConvertUtils::swap16bpp(unsigned char *d, unsigned char *s, int w,$/;"	f	class:ColorConvertUtils
swap1bpp32	utils/colorConvert.cpp	/^void ColorConvertUtils::swap1bpp32(unsigned char *dest, unsigned char *src,$/;"	f	class:ColorConvertUtils
swap24	utils/colorConvert.cpp	/^void ColorConvertUtils::swap24(unsigned char *m, int t) {$/;"	f	class:ColorConvertUtils
swap24bpp	utils/colorConvert.cpp	/^void ColorConvertUtils::swap24bpp(unsigned char *d, unsigned char *s, int w,$/;"	f	class:ColorConvertUtils
swap32bpp	utils/colorConvert.cpp	/^ void ColorConvertUtils::swap32bpp(unsigned char *d, unsigned char *s, int w, int h) {$/;"	f	class:ColorConvertUtils
switchScene	core/baseMode.cpp	/^bool BaseMode::switchScene() {$/;"	f	class:BaseMode
switchScene	core/mixtureMode_IPC.cpp	/^bool MixtureMode_IPC::switchScene() {$/;"	f	class:MixtureMode_IPC
switchScene	core/mixtureMode_SDI.cpp	/^bool MixtureMode_SDI::switchScene() {$/;"	f	class:MixtureMode_SDI
switchScene	core/resourceMode_IPC.cpp	/^bool ResourceModeHandle_IPC::switchScene() {$/;"	f	class:ResourceModeHandle_IPC
switchScene	core/resourceMode_SDI.cpp	/^bool ResourceModeHandle_SDI::switchScene() {$/;"	f	class:ResourceModeHandle_SDI
syllabus	netprotocal/ICIIUnitCellDef.h	/^	UnitSyllabus syllabus[8];$/;"	m	struct:tagSyllabusTable
syncHead	kerneldef.h	/^    unsigned int syncHead;      \/\/同步头$/;"	m	struct:_s_udp_header
system	utils/commonUtils.cpp	/^unsigned int system;$/;"	m	struct:__anon1	file:
szBuilding	netprotocal/ICIIUnitCellDef.h	/^	char				szBuilding[32];$/;"	m	struct:tagUnitBaseInfo
szClassGuid	netprotocal/ICIICommandStruct.h	/^	char		szClassGuid[10];$/;"	m	struct:tagRECRecord
szClassrooom	netprotocal/ICIIUnitCellDef.h	/^	char				szClassrooom[32];$/;"	m	struct:tagUnitBaseInfo
szDescription	netprotocal/ICIIUnitCellDef.h	/^	char				szDescription[32];$/;"	m	struct:tagUnitDevInfo
szExtend	netprotocal/ICIIUnitCellDef.h	/^	char				szExtend[88];$/;"	m	struct:tagUnitBaseInfo
szName	netprotocal/ICIIUnitCellDef.h	/^	char				szName[32];$/;"	m	struct:tagUnitDevInfo
szName	netprotocal/ICIIUnitCellDef.h	/^	char szName[16];$/;"	m	struct:tagUnitSyllabus
szPrivate	netprotocal/ICIIUnitCellDef.h	/^	BYTE				szPrivate[148];$/;"	m	struct:tagUnitDevInfo
szPrivate	netprotocal/ICIIUnitCellDef.h	/^	BYTE szPrivate[13];$/;"	m	struct:tagSyllabusTable
szSchool	netprotocal/ICIIUnitCellDef.h	/^	char				szSchool[32];$/;"	m	struct:tagUnitBaseInfo
szTeacher	netprotocal/ICIIUnitCellDef.h	/^	char szTeacher[10];$/;"	m	struct:tagUnitSyllabus
tagALL2SE	Command/AssistCommandDefines.h	/^typedef enum tagALL2SE$/;"	g
tagASCommonInfo	netprotocal/TPCCommandStruct.h	/^typedef struct tagASCommonInfo {$/;"	s
tagAVInfo	netprotocal/TPCCommandStruct.h	/^typedef struct tagAVInfo {$/;"	s
tagBITMAP	utils/bmpfile.h	/^typedef struct tagBITMAP {$/;"	s
tagBITMAPFILEHEADER	utils/bmpfile.h	/^typedef struct tagBITMAPFILEHEADER{$/;"	s
tagBITMAPINFO	utils/bmpfile.h	/^typedef struct tagBITMAPINFO {$/;"	s
tagBITMAPINFOHEADER	utils/bmpfile.h	/^typedef struct tagBITMAPINFOHEADER {$/;"	s
tagBPIPINFO	netprotocal/SCSMCommandStruct.h	/^typedef struct tagBPIPINFO$/;"	s
tagCommonState	netprotocal/ICIICommandStruct.h	/^typedef enum tagCommonState$/;"	g
tagComponentWrapper	core/OMXCommonDef.h	/^typedef struct tagComponentWrapper tagComponentWrapper;$/;"	t	typeref:struct:tagComponentWrapper
tagComponentWrapper	core/OMXCommonDef.h	/^typedef struct tagComponentWrapper$/;"	s
tagConnInConnOutThreadArgs	core/OMXCommonDef.h	/^typedef struct tagConnInConnOutThreadArgs {$/;"	s
tagDevStatTable	netprotocal/ICIIUnitCellDef.h	/^typedef struct tagDevStatTable$/;"	s
tagDogInfo	netprotocal/ICIICommandStruct.h	/^	tagDogInfo()$/;"	f	struct:tagDogInfo
tagDogInfo	netprotocal/ICIICommandStruct.h	/^struct tagDogInfo{$/;"	s
tagEncodeType	netprotocal/ICIICommandStruct.h	/^typedef enum tagEncodeType$/;"	g
tagIC2CMD_AD_LanKey	netprotocal/ICIICommandDef.h	/^	tagIC2CMD_AD_LanKey() {$/;"	f	struct:tagIC2CMD_AD_LanKey
tagIC2CMD_AD_LanKey	netprotocal/ICIICommandDef.h	/^typedef struct tagIC2CMD_AD_LanKey {$/;"	s
tagIC2CMD_AD_Msg	netprotocal/ICIICommandDef.h	/^typedef struct tagIC2CMD_AD_Msg {$/;"	s
tagIC2CMD_CmdID	netprotocal/ICIICommandDef.h	/^	tagIC2CMD_CmdID() {$/;"	f	struct:tagIC2CMD_CmdID
tagIC2CMD_CmdID	netprotocal/ICIICommandDef.h	/^typedef struct tagIC2CMD_CmdID {$/;"	s
tagIC2CMD_Data1	netprotocal/ICIICommandDef.h	/^	tagIC2CMD_Data1() {$/;"	f	struct:tagIC2CMD_Data1
tagIC2CMD_Data1	netprotocal/ICIICommandDef.h	/^typedef struct tagIC2CMD_Data1 {$/;"	s
tagIC2CMD_Data2	netprotocal/ICIICommandDef.h	/^	tagIC2CMD_Data2() {$/;"	f	struct:tagIC2CMD_Data2
tagIC2CMD_Data2	netprotocal/ICIICommandDef.h	/^typedef struct tagIC2CMD_Data2 {$/;"	s
tagIC2CMD_Header	netprotocal/ICIICommandDef.h	/^typedef struct tagIC2CMD_Header {$/;"	s
tagIPCInfo	netprotocal/SCSMCommandStruct.h	/^	tagIPCInfo()$/;"	f	struct:tagIPCInfo
tagIPCInfo	netprotocal/SCSMCommandStruct.h	/^typedef struct tagIPCInfo$/;"	s
tagInportParams	core/OMXCommonDef.h	/^typedef struct tagInportParams$/;"	s
tagInputThreadArgs	core/OMXCommonDef.h	/^typedef struct tagInputThreadArgs {$/;"	s
tagLiveMtgCameraControl	liveCourse/livemtgConstDefine.h	/^struct tagLiveMtgCameraControl$/;"	s
tagLiveMtgClassStatus	liveCourse/livemtgConstDefine.h	/^struct tagLiveMtgClassStatus$/;"	s
tagLiveMtgCourse	liveCourse/livemtgConstDefine.h	/^struct tagLiveMtgCourse$/;"	s
tagLiveMtgEnter	liveCourse/livemtgConstDefine.h	/^struct tagLiveMtgEnter$/;"	s
tagLiveMtgHeader	liveCourse/livemtgConstDefine.h	/^struct tagLiveMtgHeader$/;"	s
tagLiveMtgInteractiveListItem	liveCourse/livemtgConstDefine.h	/^struct tagLiveMtgInteractiveListItem$/;"	s
tagLiveMtgKeynoteSpeaker	liveCourse/livemtgConstDefine.h	/^struct tagLiveMtgKeynoteSpeaker$/;"	s
tagLiveMtgMonitorListItem	liveCourse/livemtgConstDefine.h	/^struct tagLiveMtgMonitorListItem$/;"	s
tagLiveMtgRecorderModeList	liveCourse/livemtgConstDefine.h	/^struct tagLiveMtgRecorderModeList$/;"	s
tagLiveMtgRtmp	liveCourse/livemtgConstDefine.h	/^struct tagLiveMtgRtmp$/;"	s
tagLiveMtgSubscribeListItem	liveCourse/livemtgConstDefine.h	/^struct tagLiveMtgSubscribeListItem$/;"	s
tagLiveMtgVGAListItem	liveCourse/livemtgConstDefine.h	/^struct tagLiveMtgVGAListItem$/;"	s
tagLiveMtgVideoListItem	liveCourse/livemtgConstDefine.h	/^struct tagLiveMtgVideoListItem$/;"	s
tagLiveMtgWebMessage	liveCourse/livemtgConstDefine.h	/^struct tagLiveMtgWebMessage{$/;"	s
tagLiveState	Command/AssistCommandHandle.h	/^typedef enum tagLiveState$/;"	g
tagOutportParams	core/OMXCommonDef.h	/^typedef struct tagOutportParams$/;"	s
tagPPTConfig	Command/AssistCommandHandle.h	/^typedef struct tagPPTConfig$/;"	s
tagPR2COM_Data1	Command/AssistCommandDefines.h	/^typedef struct tagPR2COM_Data1$/;"	s
tagPR2COM_Data2	Command/AssistCommandDefines.h	/^typedef struct tagPR2COM_Data2$/;"	s
tagPR2COM_HeartState	netprotocal/ICIICommandStruct.h	/^	tagPR2COM_HeartState(){$/;"	f	struct:tagPR2COM_HeartState
tagPR2COM_HeartState	netprotocal/ICIICommandStruct.h	/^struct tagPR2COM_HeartState{$/;"	s
tagPR2COM_ID	Command/AssistCommandDefines.h	/^typedef struct tagPR2COM_ID$/;"	s
tagPR2COM_RECState	netprotocal/ICIICommandStruct.h	/^	tagPR2COM_RECState(){$/;"	f	struct:tagPR2COM_RECState
tagPR2COM_RECState	netprotocal/ICIICommandStruct.h	/^struct tagPR2COM_RECState{$/;"	s
tagPR2COM_UnitBaseInfo	netprotocal/ICIICommandStruct.h	/^typedef struct tagPR2COM_UnitBaseInfo{$/;"	s
tagPR2COM_UnitState	netprotocal/ICIICommandStruct.h	/^	tagPR2COM_UnitState()$/;"	f	struct:tagPR2COM_UnitState
tagPR2COM_UnitState	netprotocal/ICIICommandStruct.h	/^struct tagPR2COM_UnitState$/;"	s
tagPR2COM_UnitSyllabus	netprotocal/ICIICommandStruct.h	/^typedef struct tagPR2COM_UnitSyllabus{$/;"	s
tagPRACCParam	netprotocal/TPCCommandStruct.h	/^typedef struct tagPRACCParam {$/;"	s
tagPRChannel	netprotocal/SCSMCommandStruct.h	/^typedef struct tagPRChannel$/;"	s
tagPRChannelNo	netprotocal/SCSMCommandStruct.h	/^typedef struct tagPRChannelNo$/;"	s
tagPRCourseParam	netprotocal/TPCCommandStruct.h	/^typedef struct tagPRCourseParam {$/;"	s
tagPRMode	netprotocal/ICIICommandStruct.h	/^typedef enum tagPRMode$/;"	g
tagPRParam	netprotocal/SCSMCommandStruct.h	/^typedef struct tagPRParam$/;"	s
tagPRRecordParam	netprotocal/TPCCommandStruct.h	/^typedef struct tagPRRecordParam {$/;"	s
tagPRState	netprotocal/SCSMCommandStruct.h	/^typedef struct tagPRState$/;"	s
tagPipeMsg	core/OMXCommonDef.h	/^typedef struct tagPipeMsg$/;"	s
tagRECCtrl	netprotocal/ICIICommandStruct.h	/^	tagRECCtrl(){$/;"	f	struct:tagRECCtrl
tagRECCtrl	netprotocal/ICIICommandStruct.h	/^typedef struct tagRECCtrl{$/;"	s
tagRECHead	netprotocal/ICIICommandStruct.h	/^typedef struct tagRECHead{$/;"	s
tagRECRecord	netprotocal/ICIICommandStruct.h	/^typedef struct tagRECRecord{$/;"	s
tagRGBQUAD	utils/bmpfile.h	/^typedef struct tagRGBQUAD {$/;"	s
tagRecordMode	netprotocal/ICIICommandStruct.h	/^typedef enum tagRecordMode$/;"	g
tagRecordPos	netprotocal/ICIICommandStruct.h	/^typedef enum tagRecordPos$/;"	g
tagRecordRate	netprotocal/ICIICommandStruct.h	/^typedef enum tagRecordRate$/;"	g
tagRecordSize	netprotocal/ICIICommandStruct.h	/^typedef enum tagRecordSize$/;"	g
tagRecordState	netprotocal/ICIICommandStruct.h	/^typedef enum tagRecordState$/;"	g
tagRecordTemplate	setting.h	/^typedef struct tagRecordTemplate$/;"	s
tagSMCommonInfo	netprotocal/SCSMCommandStruct.h	/^typedef struct tagSMCommonInfo$/;"	s
tagSNTConnectInfo	core/OMXCommonDef.h	/^typedef struct tagSNTConnectInfo$/;"	s
tagSceneBackPicInfo	netprotocal/SCSMCommandStruct.h	/^typedef struct tagSceneBackPicInfo$/;"	s
tagSceneCommonInfo	netprotocal/SCSMCommandStruct.h	/^typedef struct tagSceneCommonInfo$/;"	s
tagSceneMeidaFileInfo	netprotocal/SCSMCommandStruct.h	/^typedef struct tagSceneMeidaFileInfo$/;"	s
tagSceneMixPicInfo	netprotocal/SCSMCommandStruct.h	/^typedef struct tagSceneMixPicInfo$/;"	s
tagSceneStringInfo	netprotocal/SCSMCommandStruct.h	/^typedef struct tagSceneStringInfo$/;"	s
tagSceneVideoInfo	netprotocal/SCSMCommandStruct.h	/^typedef struct tagSceneVideoInfo$/;"	s
tagStragyMode	netprotocal/SCSMCommandStruct.h	/^typedef struct tagStragyMode {$/;"	s
tagStrategyList	netprotocal/TPCCommandStruct.h	/^typedef struct tagStrategyList {$/;"	s
tagStrategyName	netprotocal/TPCCommandStruct.h	/^	tagStrategyName() {$/;"	f	struct:tagStrategyName
tagStrategyName	netprotocal/TPCCommandStruct.h	/^typedef struct tagStrategyName {$/;"	s
tagStreamInfo	liveCourse/livemtgConstDefine.h	/^struct tagStreamInfo {$/;"	s
tagStreamMediaState	netprotocal/SCSMCommandStruct.h	/^typedef struct tagStreamMediaState$/;"	s
tagSyllabusTable	netprotocal/ICIIUnitCellDef.h	/^typedef struct tagSyllabusTable$/;"	s
tagTemplateList	netprotocal/TPCCommandStruct.h	/^typedef struct tagTemplateList {$/;"	s
tagTemplateName	netprotocal/TPCCommandStruct.h	/^	tagTemplateName() {$/;"	f	struct:tagTemplateName
tagTemplateName	netprotocal/TPCCommandStruct.h	/^typedef struct tagTemplateName {$/;"	s
tagUnitBaseInfo	netprotocal/ICIIUnitCellDef.h	/^	tagUnitBaseInfo()$/;"	f	struct:tagUnitBaseInfo
tagUnitBaseInfo	netprotocal/ICIIUnitCellDef.h	/^typedef struct tagUnitBaseInfo$/;"	s
tagUnitCtrl	netprotocal/ICIICommandStruct.h	/^typedef enum tagUnitCtrl$/;"	g
tagUnitDevInfo	netprotocal/ICIIUnitCellDef.h	/^	tagUnitDevInfo(){$/;"	f	struct:tagUnitDevInfo
tagUnitDevInfo	netprotocal/ICIIUnitCellDef.h	/^typedef struct tagUnitDevInfo$/;"	s
tagUnitDevStat	netprotocal/ICIIUnitCellDef.h	/^typedef struct tagUnitDevStat{$/;"	s
tagUnitState	netprotocal/ICIICommandStruct.h	/^typedef enum tagUnitState$/;"	g
tagUnitSyllabus	netprotocal/ICIIUnitCellDef.h	/^typedef struct tagUnitSyllabus$/;"	s
tagUpdateUnitHead	netprotocal/ICIICommandStruct.h	/^typedef struct tagUpdateUnitHead{$/;"	s
tagUtf8RecordParam	netprotocal/SCSMCommandStruct.h	/^typedef struct tagUtf8RecordParam {$/;"	s
tagWebServiceParam	netprotocal/TPCCommandStruct.h	/^typedef struct tagWebServiceParam {$/;"	s
tagePPTRecordAction	Command/AssistCommandHandle.h	/^typedef enum tagePPTRecordAction$/;"	g
tageSMState	netprotocal/SCSMCommandStruct.h	/^typedef enum tageSMState$/;"	g
tageSceneElementType	netprotocal/SCSMCommandStruct.h	/^typedef enum tageSceneElementType$/;"	g
tailLink_	monitor/value.h	/^      ValueInternalLink *tailLink_;$/;"	m	class:Json::ValueInternalMap
takeOver	Command/KernelBoardCommandHandle.cpp	/^BOOL KernelBoardCommandHandle::takeOver(BOOL bTake)$/;"	f	class:KernelBoardCommandHandle
tdefs	package/ti_sdo_ce_examples_apps_armlivemedia.java	/^    ArrayList<Object> tdefs = new ArrayList<Object>();$/;"	f	class:ti_sdo_ce_examples_apps_armlivemedia
teacherName	liveCourse/livemtgConstDefine.h	/^	char teacherName[32];											\/\/老师名称$/;"	m	struct:tagLiveMtgCourse
ti_sdo_ce_examples_apps_armlivemedia	package/ti_sdo_ce_examples_apps_armlivemedia.java	/^public class ti_sdo_ce_examples_apps_armlivemedia$/;"	c
ti_sdo_ce_examples_apps_armlivemedia__	package/package.defs.h	9;"	d
ti_sdo_ce_examples_apps_armlivemedia__dummy__	package/package_ti.sdo.ce.examples.apps.armlivemedia.c	/^__FAR__ char ti_sdo_ce_examples_apps_armlivemedia__dummy__;$/;"	v
timeout_cb	timer.cpp	/^static void timeout_cb(evutil_socket_t fd, short event, void *arg)$/;"	f	file:
timermsub	KVideo/audioCapture.cpp	13;"	d	file:
timermsub	core/audioEncode.cpp	15;"	d	file:
timermsub	core/audioEncodeFAAC.cpp	6;"	d	file:
timestamp	KVideo/audio/rtpstruct.h	/^	uint32_t timestamp;$/;"	m	struct:RTPHeader
timestamp	log.cpp	/^std::string Log::timestamp() {$/;"	f	class:Log
tmp	core/DecodeUtils.h	/^  unsigned int tmp;$/;"	m	struct:__anon15
toIP	kerneldef.h	/^    unsigned int toIP;          \/\/目的IP$/;"	m	struct:_s_udp_header
toStyledString	monitor/json_value.cpp	/^Value::toStyledString() const$/;"	f	class:Json::Value
tokenArrayBegin	monitor/reader.h	/^         tokenArrayBegin,$/;"	e	enum:Json::Reader::TokenType
tokenArrayEnd	monitor/reader.h	/^         tokenArrayEnd,$/;"	e	enum:Json::Reader::TokenType
tokenArraySeparator	monitor/reader.h	/^         tokenArraySeparator,$/;"	e	enum:Json::Reader::TokenType
tokenComment	monitor/reader.h	/^         tokenComment,$/;"	e	enum:Json::Reader::TokenType
tokenEndOfStream	monitor/reader.h	/^         tokenEndOfStream = 0,$/;"	e	enum:Json::Reader::TokenType
tokenError	monitor/reader.h	/^         tokenError$/;"	e	enum:Json::Reader::TokenType
tokenFalse	monitor/reader.h	/^         tokenFalse,$/;"	e	enum:Json::Reader::TokenType
tokenMemberSeparator	monitor/reader.h	/^         tokenMemberSeparator,$/;"	e	enum:Json::Reader::TokenType
tokenNull	monitor/reader.h	/^         tokenNull,$/;"	e	enum:Json::Reader::TokenType
tokenNumber	monitor/reader.h	/^         tokenNumber,$/;"	e	enum:Json::Reader::TokenType
tokenObjectBegin	monitor/reader.h	/^         tokenObjectBegin,$/;"	e	enum:Json::Reader::TokenType
tokenObjectEnd	monitor/reader.h	/^         tokenObjectEnd,$/;"	e	enum:Json::Reader::TokenType
tokenString	monitor/reader.h	/^         tokenString,$/;"	e	enum:Json::Reader::TokenType
tokenTrue	monitor/reader.h	/^         tokenTrue,$/;"	e	enum:Json::Reader::TokenType
token_	monitor/reader.h	/^         Token token_;$/;"	m	class:Json::Reader::ErrorInfo
tx_adj_level	KVideo/audio/audio_mixer.h	/^	int tx_adj_level;$/;"	m	struct:__anon4
tx_level	KVideo/audio/audio_mixer.h	/^	int tx_level;$/;"	m	struct:__anon4
type	KVideo/audio/structdef.h	/^	int  type;$/;"	m	struct:stsendinfor
type	monitor/json_value.cpp	/^Value::type() const$/;"	f	class:Json::Value
type_	monitor/reader.h	/^         TokenType type_;$/;"	m	class:Json::Reader::Token
u16_to_BigEndian	KVideo/audio/rtpstruct.h	/^inline int u16_to_BigEndian(uint16_t num)$/;"	f
u32_to_BigEndian	KVideo/audio/rtpstruct.h	/^inline int u32_to_BigEndian(uint32_t num)$/;"	f
uid	KVideo/audio/structdef.h	/^	char uid[4];	$/;"	m	struct:stuserid
uintToString	monitor/json_writer.cpp	/^static void uintToString( unsigned int value, $/;"	f	namespace:Json
uintValue	monitor/value.h	/^      uintValue,     \/\/\/< unsigned integer value$/;"	e	enum:Json::ValueType
uint_	monitor/value.h	/^         UInt uint_;$/;"	m	union:Json::Value::ValueHolder
unindent	monitor/json_writer.cpp	/^StyledStreamWriter::unindent()$/;"	f	class:Json::StyledStreamWriter
unindent	monitor/json_writer.cpp	/^StyledWriter::unindent()$/;"	f	class:Json::StyledWriter
uninit	Command/AssistCommandHandle.cpp	/^bool AssistCommandHandle::uninit() {$/;"	f	class:AssistCommandHandle
uninit	Command/Function.cpp	/^BOOL CFunction::uninit(){$/;"	f	class:CFunction
uninit	Command/KernelBoardCommandHandle.cpp	/^BOOL KernelBoardCommandHandle::uninit() {$/;"	f	class:KernelBoardCommandHandle
uninit	Command/udp.cpp	/^bool Udp::uninit() {$/;"	f	class:Udp
uninit	KVideo/audio/audio_mixer.cpp	/^int audio_mixer::uninit()$/;"	f	class:audio_mixer
uninit	KVideo/audio/fifo.cpp	/^void fifo::uninit()$/;"	f	class:fifo
uninit	KVideo/audioCapture.cpp	/^bool AudioCapture::uninit() {$/;"	f	class:AudioCapture
uninit	KVideo/captureSDIVideo.cpp	/^bool CaptureSDI::uninit() {$/;"	f	class:CaptureSDI
uninit	KVideo/captureVga.cpp	/^bool CaptureVGA::uninit() {$/;"	f	class:CaptureVGA
uninit	KVideo/sdiVideoProviderSystem.cpp	/^bool SDIVideoProviderSystem::uninit() {$/;"	f	class:SDIVideoProviderSystem
uninit	KVideo/streamVideoManager.cpp	/^bool StreamVideoManager::uninit() {$/;"	f	class:StreamVideoManager
uninit	KVideo/vgaProviderSystem.cpp	/^bool VGAProviderSystem::uninit() {$/;"	f	class:VGAProviderSystem
uninit	core/HDMIDisplayManager.cpp	/^bool HDMIDisplayManager::uninit(EDisplayContext context) {$/;"	f	class:HDMIDisplayManager
uninit	core/Mp4Player.cpp	/^bool Mp4FilePlayer::uninit() {$/;"	f	class:Mp4FilePlayer
uninit	core/Mutex.cpp	/^bool Mutex::uninit() {$/;"	f	class:Mutex
uninit	core/audioEncode.cpp	/^bool AudioEncode::uninit() {$/;"	f	class:AudioEncode
uninit	core/audioEncodeFAAC.cpp	/^bool AudioEncodeFAAC::uninit() {$/;"	f	class:AudioEncodeFAAC
uninit	core/audioEncodeOMX.cpp	/^bool AudioEncodeOMX::uninit() {$/;"	f	class:AudioEncodeOMX
uninit	core/baseMode.cpp	/^BOOL BaseMode::uninit() {$/;"	f	class:BaseMode
uninit	core/cameraBufferPool.cpp	/^bool CameraBufferPool::uninit() {$/;"	f	class:CameraBufferPool
uninit	core/edma.cpp	/^bool EdmaUtils::uninit() {$/;"	f	class:EdmaUtils
uninit	core/framePool.cpp	/^bool FrameBufferPool::uninit() {$/;"	f	class:FrameBufferPool
uninit	core/mixtureMode_IPC.cpp	/^BOOL MixtureMode_IPC::uninit() {$/;"	f	class:MixtureMode_IPC
uninit	core/mixtureMode_SDI.cpp	/^BOOL MixtureMode_SDI::uninit() {$/;"	f	class:MixtureMode_SDI
uninit	core/movieHeaderTail.cpp	/^bool MovieHeaderTail::uninit() {$/;"	f	class:MovieHeaderTail
uninit	core/mp4Output.cpp	/^bool Mp4Output::uninit() {$/;"	f	class:Mp4Output
uninit	core/mtgClient.cpp	/^bool MtgClient::uninit() {$/;"	f	class:MtgClient
uninit	core/mtgInit.cpp	/^bool MtgHeartbeat::uninit() {$/;"	f	class:MtgHeartbeat
uninit	core/osdManager.cpp	/^bool OSDManager::uninit() {$/;"	f	class:OSDManager
uninit	core/resourceMode_IPC.cpp	/^BOOL ResourceModeHandle_IPC::uninit() {$/;"	f	class:ResourceModeHandle_IPC
uninit	core/resourceMode_SDI.cpp	/^BOOL ResourceModeHandle_SDI::uninit() {$/;"	f	class:ResourceModeHandle_SDI
uninit	core/rtmpHandle.cpp	/^bool RtmpHandle::uninit() {$/;"	f	class:RtmpHandle
uninit	core/rtmpManager.cpp	/^bool RtmpManager::uninit() {$/;"	f	class:RtmpManager
uninit	core/shareMem.cpp	/^bool ShareMemManager::uninit() {$/;"	f	class:ShareMemManager
uninit	kernel.cpp	/^bool Kernel::uninit() {$/;"	f	class:Kernel
uninit	liveCourse/classWxManager.cpp	/^bool ClassWxManager::uninit() {$/;"	f	class:ClassWxManager
uninit	liveCourse/courseWxManager.cpp	/^bool CourseWxManager::uninit() {$/;"	f	class:CourseWxManager
uninit	liveCourse/liveCourseManager.cpp	/^bool LiveCourseManager::uninit() {$/;"	f	class:LiveCourseManager
uninit	liveCourse/subVideoManager.cpp	/^bool SubVideoManager::uninit() {$/;"	f	class:SubVideoManager
uninit	monitor/monitorSender.cpp	/^bool MonitorSender::uninit() {$/;"	f	class:MonitorSender
uninit	timer.cpp	/^bool Timer::uninit() {$/;"	f	class:Timer
uninit	utils/vgaState.cpp	/^bool VGAStateHandle::uninit() {$/;"	f	class:VGAStateHandle
uninit	web/modelStatus.cpp	/^bool ModelStatus::uninit() {$/;"	f	class:ModelStatus
uninit	web/recordList.cpp	/^bool RecordList::uninit() {$/;"	f	class:RecordList
uninitCodecEngine	core/audioEncodeFAAC.cpp	/^bool AudioEncodeFAAC::uninitCodecEngine() {$/;"	f	class:AudioEncodeFAAC
uninitComponent	core/OMXComponentUtils.cpp	/^void OMXComponentUtils::uninitComponent(ComponentWrapper* &aComponent) {$/;"	f	class:OMXComponentUtils
uninitVGAComponent	core/mixtureMode_IPC.cpp	/^bool MixtureMode_IPC::uninitVGAComponent() {$/;"	f	class:MixtureMode_IPC
uninitVGAComponent	core/mixtureMode_SDI.cpp	/^bool MixtureMode_SDI::uninitVGAComponent() {$/;"	f	class:MixtureMode_SDI
uninitv4lhandle	core/v4lDisplay.cpp	/^bool DisplayHandle::uninitv4lhandle() {$/;"	f	class:DisplayHandle
unknown	monitor/value.h	/^      enum { unknown = (unsigned)-1 };$/;"	e	enum:Json::ValueAllocator::__anon8
unloadHikFunc	hikFunc.cpp	/^bool unloadHikFunc() {$/;"	f
unloadMtgFunc	mtgFunc.cpp	/^bool unloadMtgFunc() {$/;"	f
unlock	core/Mutex.cpp	/^void Mutex::unlock() {$/;"	f	class:Mutex
unregisterToKernelBoard	Command/Function.cpp	/^bool CFunction::unregisterToKernelBoard() {$/;"	f	class:CFunction
upNetWork	liveCourse/livemtgConstDefine.h	/^	int upNetWork;$/;"	m	struct:tagLiveMtgWebMessage
upPacketLost	liveCourse/livemtgConstDefine.h	/^	int upPacketLost;$/;"	m	struct:tagLiveMtgWebMessage
updateCourseInfo	Command/AssistCommandHandle.cpp	/^void AssistCommandHandle::updateCourseInfo() {$/;"	f	class:AssistCommandHandle
updateSaveFileName	setting.cpp	/^string Setting::updateSaveFileName(bool bPreview) {$/;"	f	class:Setting
updateStreamMediaState	Command/Function.cpp	/^BOOL CFunction::updateStreamMediaState(eSMState CurState) {$/;"	f	class:CFunction
updateframe	KVideo/audio/audio_mixer.cpp	/^static void updateframe(struct timeval* start,struct timeval* now, unsigned int frame_count)$/;"	f	file:
uploadFile	kernel.cpp	/^void Kernel::uploadFile() {$/;"	f	class:Kernel
uploadFileThread	kernel.cpp	/^void* uploadFileThread(void* pParam) {$/;"	f
uploadSaveMediaFile	Command/AssistCommandHandle.cpp	/^bool AssistCommandHandle::uploadSaveMediaFile() {$/;"	f	class:AssistCommandHandle
url	liveCourse/livemtgConstDefine.h	/^	char url[MAX_PATH];$/;"	m	struct:tagLiveMtgRtmp
usage	main_native.cpp	/^static String usage = "%s [-p procId] [-e engineName] [-m mapFileName] [-s serverSuffix] input-file output-file\\n";$/;"	v	file:
use_falg	KVideo/audio/structdef.h	/^	int   use_falg;$/;"	m	struct:stbufferflag
usedCount	netprotocal/ICIIUnitCellDef.h	/^	UINT				usedCount;$/;"	m	struct:tagUnitDevInfo
usedTime	netprotocal/ICIIUnitCellDef.h	/^	UINT				usedTime;$/;"	m	struct:tagUnitDevInfo
used_	monitor/json_batchallocator.h	/^      AllocatedType *used_;$/;"	m	struct:Json::BatchAllocator::BatchInfo
user	utils/commonUtils.cpp	/^unsigned int user;$/;"	m	struct:__anon1	file:
userID	kerneldef.h	/^    char userID[10];            \/\/user id$/;"	m	struct:_s_udp_cmd
userType	liveCourse/livemtgConstDefine.h	/^	int userType;													\/\/角色，直播主机，收视主机，直播助教，收视助教$/;"	m	struct:tagLiveMtgEnter
value	liveCourse/livemtgConstDefine.h	/^	int value;$/;"	m	struct:tagLiveMtgCameraControl
valueAllocator	monitor/json_value.cpp	/^static ValueAllocator *&valueAllocator()$/;"	f	namespace:Json
valueToQuotedString	monitor/json_writer.cpp	/^std::string valueToQuotedString( const char *value )$/;"	f	namespace:Json
valueToString	monitor/json_writer.cpp	/^std::string valueToString( Int value )$/;"	f	namespace:Json
valueToString	monitor/json_writer.cpp	/^std::string valueToString( UInt value )$/;"	f	namespace:Json
valueToString	monitor/json_writer.cpp	/^std::string valueToString( bool value )$/;"	f	namespace:Json
valueToString	monitor/json_writer.cpp	/^std::string valueToString( double value )$/;"	f	namespace:Json
value_	monitor/value.h	/^      } value_;$/;"	m	class:Json::Value	typeref:union:Json::Value::ValueHolder
version	KVideo/audio/rtpstruct.h	/^	uint8_t version:2;$/;"	m	struct:RTPHeader
vgaStatusChanged	KVideo/vgaProviderSystem.cpp	/^bool VGAProviderSystem::vgaStatusChanged(int reason) {$/;"	f	class:VGAProviderSystem
wAVChannel	netprotocal/TPCCommandStruct.h	/^	WORD wAVChannel;$/;"	m	struct:tagAVInfo
wAVPort	netprotocal/TPCCommandStruct.h	/^	WORD wAVPort;$/;"	m	struct:tagAVInfo
wClassroomType	netprotocal/ICIIUnitCellDef.h	/^	WORD				wClassroomType;$/;"	m	struct:tagUnitBaseInfo
wDataLen	netprotocal/ICIICommandDef.h	/^	WORD wDataLen;$/;"	m	struct:tagIC2CMD_Header
wDestPort	Command/AssistCommandHandle.h	/^	WORD		wDestPort;$/;"	m	struct:tagPPTConfig
wDeviceSelectKey	netprotocal/ICIIUnitCellDef.h	/^	WORD				wDeviceSelectKey;$/;"	m	struct:tagUnitDevInfo
wOwnPort	Command/AssistCommandHandle.h	/^	WORD		wOwnPort;$/;"	m	struct:tagPPTConfig
wPowerDelaySeconds	netprotocal/ICIIUnitCellDef.h	/^	WORD				wPowerDelaySeconds;$/;"	m	struct:tagUnitDevInfo
wPowerOff	netprotocal/ICIIUnitCellDef.h	/^	WORD				wPowerOff;$/;"	m	struct:tagUnitDevInfo
wPowerOn	netprotocal/ICIIUnitCellDef.h	/^	WORD				wPowerOn;$/;"	m	struct:tagUnitDevInfo
wUnitType	netprotocal/TPCCommandStruct.h	/^	WORD wUnitType;$/;"	m	struct:tagAVInfo
wVolume	netprotocal/ICIICommandStruct.h	/^	WORD			wVolume;$/;"	m	struct:tagPR2COM_UnitState
waitPortSem	core/OMXComponentUtils.cpp	/^void OMXComponentUtils::waitPortSem(ComponentWrapper* &aComponent) {$/;"	f	class:OMXComponentUtils
waitStateSem	core/OMXComponentUtils.cpp	/^void OMXComponentUtils::waitStateSem(ComponentWrapper* &aComponent) {$/;"	f	class:OMXComponentUtils
warning	log.cpp	/^void Log::warning(const char *str) {$/;"	f	class:Log
width	KVideo/audio/structdef.h	/^	int width;$/;"	m	struct:stvideoinfor
working	KVideo/audio/codec_engine.h	/^	bool working;$/;"	m	struct:channelinfo
workingWord	core/DecodeUtils.h	/^  unsigned int workingWord;$/;"	m	struct:__anon14
write	monitor/json_writer.cpp	/^FastWriter::write( const Value &root )$/;"	f	class:Json::FastWriter
write	monitor/json_writer.cpp	/^StyledStreamWriter::write( std::ostream &out, const Value &root )$/;"	f	class:Json::StyledStreamWriter
write	monitor/json_writer.cpp	/^StyledWriter::write( const Value &root )$/;"	f	class:Json::StyledWriter
writeAACAudio	core/mp4Output.cpp	/^bool Mp4Output::writeAACAudio(const char* pData, int size) {$/;"	f	class:Mp4Output
writeArrayValue	monitor/json_writer.cpp	/^StyledStreamWriter::writeArrayValue( const Value &value )$/;"	f	class:Json::StyledStreamWriter
writeArrayValue	monitor/json_writer.cpp	/^StyledWriter::writeArrayValue( const Value &value )$/;"	f	class:Json::StyledWriter
writeCommentAfterValueOnSameLine	monitor/json_writer.cpp	/^StyledStreamWriter::writeCommentAfterValueOnSameLine( const Value &root )$/;"	f	class:Json::StyledStreamWriter
writeCommentAfterValueOnSameLine	monitor/json_writer.cpp	/^StyledWriter::writeCommentAfterValueOnSameLine( const Value &root )$/;"	f	class:Json::StyledWriter
writeCommentBeforeValue	monitor/json_writer.cpp	/^StyledStreamWriter::writeCommentBeforeValue( const Value &root )$/;"	f	class:Json::StyledStreamWriter
writeCommentBeforeValue	monitor/json_writer.cpp	/^StyledWriter::writeCommentBeforeValue( const Value &root )$/;"	f	class:Json::StyledWriter
writeH264Video	core/mp4Output.cpp	/^bool Mp4Output::writeH264Video(const char* pData, int size) {$/;"	f	class:Mp4Output
writeIndent	monitor/json_writer.cpp	/^StyledStreamWriter::writeIndent()$/;"	f	class:Json::StyledStreamWriter
writeIndent	monitor/json_writer.cpp	/^StyledWriter::writeIndent()$/;"	f	class:Json::StyledWriter
writeSetting	setting.cpp	/^bool Setting::writeSetting() {$/;"	f	class:Setting
writeStatusXML	web/modelStatus.cpp	/^bool ModelStatus::writeStatusXML() {$/;"	f	class:ModelStatus
writeValue	monitor/json_writer.cpp	/^FastWriter::writeValue( const Value &value )$/;"	f	class:Json::FastWriter
writeValue	monitor/json_writer.cpp	/^StyledStreamWriter::writeValue( const Value &value )$/;"	f	class:Json::StyledStreamWriter
writeValue	monitor/json_writer.cpp	/^StyledWriter::writeValue( const Value &value )$/;"	f	class:Json::StyledWriter
writeWithIndent	monitor/json_writer.cpp	/^StyledStreamWriter::writeWithIndent( const std::string &value )$/;"	f	class:Json::StyledStreamWriter
writeWithIndent	monitor/json_writer.cpp	/^StyledWriter::writeWithIndent( const std::string &value )$/;"	f	class:Json::StyledWriter
wxIP1	liveCourse/livemtgConstDefine.h	/^	char wxIP1[16];													\/\/课堂平台主IP$/;"	m	struct:tagLiveMtgCourse
wxIP2	liveCourse/livemtgConstDefine.h	/^	char wxIP2[16];													\/\/课堂平台备用IP$/;"	m	struct:tagLiveMtgCourse
xdcO	package/ti_sdo_ce_examples_apps_armlivemedia.java	/^    Scriptable xdcO;$/;"	f	class:ti_sdo_ce_examples_apps_armlivemedia
xrun	KVideo/audioCapture.cpp	/^void AudioCapture::xrun() {$/;"	f	class:AudioCapture
xrun	core/audioEncode.cpp	/^void AudioEncode::xrun()$/;"	f	class:AudioEncode
xrun	core/audioEncodeFAAC.cpp	/^void AudioEncodeFAAC::xrun()$/;"	f	class:AudioEncodeFAAC
y410_to_y420	utils/colorConvert.cpp	/^ void ColorConvertUtils::y410_to_y420(unsigned char *d, unsigned char *s, int w, int h) {$/;"	f	class:ColorConvertUtils
y41p_to_yuyv	utils/colorConvert.cpp	/^ void ColorConvertUtils::y41p_to_yuyv(unsigned char *d, unsigned char *s, int w, int h) {$/;"	f	class:ColorConvertUtils
y420_to_y410	utils/colorConvert.cpp	/^ void ColorConvertUtils::y420_to_y410(unsigned char *d, unsigned char *s, int w, int h) {$/;"	f	class:ColorConvertUtils
yamlCompatiblityEnabled_	monitor/writer.h	/^      bool yamlCompatiblityEnabled_;$/;"	m	class:Json::FastWriter
yuv411p_to_yuv422p	utils/colorConvert.cpp	/^ void ColorConvertUtils::yuv411p_to_yuv422p(unsigned char *d, unsigned char *s, int w,$/;"	f	class:ColorConvertUtils
yuv420_to_gray8	utils/colorConvert.cpp	/^void ColorConvertUtils::yuv420_to_gray8(unsigned char *dest, unsigned char *src,$/;"	f	class:ColorConvertUtils
yuv420_to_nv12	utils/colorConvert.cpp	/^ void ColorConvertUtils::yuv420_to_nv12(unsigned char *d, unsigned char *s, int w, int h) {$/;"	f	class:ColorConvertUtils
yuv420_to_rgb32	utils/colorConvert.cpp	/^ void ColorConvertUtils::yuv420_to_rgb32(unsigned char *d, unsigned char *s, int w, int h) {$/;"	f	class:ColorConvertUtils
yuv420_to_yuyv	utils/colorConvert.cpp	/^ void ColorConvertUtils::yuv420_to_yuyv(unsigned char *d, unsigned char *s, int w, int h) {$/;"	f	class:ColorConvertUtils
yuv422p_to_yuv411p	utils/colorConvert.cpp	/^ void ColorConvertUtils::yuv422p_to_yuv411p(unsigned char *d, unsigned char *s, int w,$/;"	f	class:ColorConvertUtils
yuv422p_to_yuyv	utils/colorConvert.cpp	/^ void ColorConvertUtils::yuv422p_to_yuyv(unsigned char *d, unsigned char *s, int w, int h) {$/;"	f	class:ColorConvertUtils
yuyv_to_rgb32	utils/colorConvert.cpp	/^ void ColorConvertUtils::yuyv_to_rgb32(unsigned char *d, unsigned char *s, int width,$/;"	f	class:ColorConvertUtils
yuyv_to_y41p	utils/colorConvert.cpp	/^ void ColorConvertUtils::yuyv_to_y41p(unsigned char *d, unsigned char *s, int w, int h) {$/;"	f	class:ColorConvertUtils
yuyv_to_yuv420	utils/colorConvert.cpp	/^ void ColorConvertUtils::yuyv_to_yuv420(unsigned char *d, unsigned char *s, int w, int h) {$/;"	f	class:ColorConvertUtils
yuyv_to_yuv422p	utils/colorConvert.cpp	/^ void ColorConvertUtils::yuyv_to_yuv422p(unsigned char *d, unsigned char *s, int w, int h) {$/;"	f	class:ColorConvertUtils
yvu420_yuv420	utils/colorConvert.cpp	/^void ColorConvertUtils::yvu420_yuv420(unsigned char *d, unsigned char *s, int w,$/;"	f	class:ColorConvertUtils
~AssistCommandHandle	Command/AssistCommandHandle.cpp	/^AssistCommandHandle::~AssistCommandHandle() {$/;"	f	class:AssistCommandHandle
~AudioCapture	KVideo/audioCapture.cpp	/^AudioCapture::~AudioCapture() {$/;"	f	class:AudioCapture
~AudioEncode	core/audioEncode.cpp	/^AudioEncode::~AudioEncode() {$/;"	f	class:AudioEncode
~AudioEncodeFAAC	core/audioEncodeFAAC.cpp	/^AudioEncodeFAAC::~AudioEncodeFAAC() {$/;"	f	class:AudioEncodeFAAC
~AudioEncodeOMX	core/audioEncodeOMX.cpp	/^AudioEncodeOMX::~AudioEncodeOMX() {$/;"	f	class:AudioEncodeOMX
~BaseMode	core/baseMode.cpp	/^BaseMode::~BaseMode() {$/;"	f	class:BaseMode
~BatchAllocator	monitor/json_batchallocator.h	/^   ~BatchAllocator()$/;"	f	class:Json::BatchAllocator
~CFunction	Command/Function.cpp	/^CFunction::~CFunction() {$/;"	f	class:CFunction
~CZString	monitor/json_value.cpp	/^Value::CZString::~CZString()$/;"	f	class:Json::Value::CZString
~CameraBufferPool	core/cameraBufferPool.cpp	/^CameraBufferPool::~CameraBufferPool() {$/;"	f	class:CameraBufferPool
~CaptureSDI	KVideo/captureSDIVideo.cpp	/^CaptureSDI::~CaptureSDI() {$/;"	f	class:CaptureSDI
~CaptureVGA	KVideo/captureVga.cpp	/^CaptureVGA::~CaptureVGA() {$/;"	f	class:CaptureVGA
~CardInfo	KVideo/CardInfo.cpp	/^CardInfo::~CardInfo() {$/;"	f	class:CardInfo
~ClassWxManager	liveCourse/classWxManager.cpp	/^ClassWxManager::~ClassWxManager() {$/;"	f	class:ClassWxManager
~CodeConverter	utils/codeConverter.cpp	/^CodeConverter::~CodeConverter() {$/;"	f	class:CodeConverter
~CommentInfo	monitor/json_value.cpp	/^Value::CommentInfo::~CommentInfo()$/;"	f	class:Json::Value::CommentInfo
~CourseWxManager	liveCourse/courseWxManager.cpp	/^CourseWxManager::~CourseWxManager() {$/;"	f	class:CourseWxManager
~DefaultValueAllocator	monitor/json_value.cpp	/^   virtual ~DefaultValueAllocator()$/;"	f	class:Json::DefaultValueAllocator
~DisplayHandle	core/v4lDisplay.cpp	/^DisplayHandle::~DisplayHandle() {$/;"	f	class:DisplayHandle
~DualScreenMode_IPC	core/dualScreenMode_IPC.cpp	/^DualScreenMode_IPC::~DualScreenMode_IPC() {$/;"	f	class:DualScreenMode_IPC
~DualScreenMode_SDI	core/dualScreenMode_SDI.cpp	/^DualScreenMode_SDI::~DualScreenMode_SDI() {$/;"	f	class:DualScreenMode_SDI
~EdmaUtils	core/edma.cpp	/^EdmaUtils::~EdmaUtils() {$/;"	f	class:EdmaUtils
~FastWriter	monitor/writer.h	/^      virtual ~FastWriter(){}$/;"	f	class:Json::FastWriter
~FrameBufferPool	core/framePool.cpp	/^FrameBufferPool::~FrameBufferPool() {$/;"	f	class:FrameBufferPool
~HDMIDisplayManager	core/HDMIDisplayManager.cpp	/^HDMIDisplayManager::~HDMIDisplayManager() {$/;"	f	class:HDMIDisplayManager
~HikVideo	KVideo/HikVideo.cpp	/^HikVideo::~HikVideo() {$/;"	f	class:HikVideo
~IAudioCaptureObserver	KVideo/audioCapture.h	/^	virtual ~IAudioCaptureObserver() {$/;"	f	class:IAudioCaptureObserver
~IAudioEncodeInterface	core/audioEncodeInterface.h	/^	virtual ~IAudioEncodeInterface() {$/;"	f	class:IAudioEncodeInterface
~IAudioEncodeListener	core/audioEncodeInterface.h	/^	virtual ~IAudioEncodeListener() {$/;"	f	class:IAudioEncodeListener
~ICaptureSDIListener	KVideo/captureSDIVideo.h	/^	virtual ~ICaptureSDIListener() {$/;"	f	class:ICaptureSDIListener
~ICaptureVGAListener	KVideo/captureVga.h	/^	virtual ~ICaptureVGAListener() {$/;"	f	class:ICaptureVGAListener
~IClassWxObserver	liveCourse/classWxManager.h	/^	virtual ~IClassWxObserver() {$/;"	f	class:IClassWxObserver
~ICourseWxObserver	liveCourse/courseWxManager.h	/^	virtual ~ICourseWxObserver() {$/;"	f	class:ICourseWxObserver
~ILiveCourseManagerObserver	liveCourse/liveCourseManager.h	/^	virtual ~ILiveCourseManagerObserver() {$/;"	f	class:ILiveCourseManagerObserver
~ILogListener	log.h	/^	virtual ~ILogListener(){$/;"	f	class:ILogListener
~IMovieHeaderTailStreamListener	core/movieHeaderTail.h	/^	virtual ~IMovieHeaderTailStreamListener() {$/;"	f	class:IMovieHeaderTailStreamListener
~IMtgListener	core/mtgClient.h	/^	virtual ~IMtgListener() {$/;"	f	class:IMtgListener
~IRtmpListener	core/rtmpHandle.h	/^	virtual ~IRtmpListener() {$/;"	f	class:IRtmpListener
~ISDIVideoProviderObserver	KVideo/sdiVideoProviderSystem.h	/^	virtual ~ISDIVideoProviderObserver() {$/;"	f	class:ISDIVideoProviderObserver
~IStreamVideoListener	KVideo/KVideoInterface.h	/^	virtual ~IStreamVideoListener() {$/;"	f	class:KVideo::IStreamVideoListener
~IStreamVideoManagerListener	KVideo/streamVideoManager.h	/^	virtual ~IStreamVideoManagerListener() {}$/;"	f	class:IStreamVideoManagerListener
~ITimerListener	timer.h	/^	virtual ~ITimerListener() {$/;"	f	class:ITimerListener
~IUDPCommandListener	Command/udpCommandListener.h	/^	virtual ~IUDPCommandListener(){$/;"	f	class:IUDPCommandListener
~IUdpListener	Command/udp.h	/^	virtual ~IUdpListener() {$/;"	f	class:IUdpListener
~IVGAProviderObserver	KVideo/vgaProviderSystem.h	/^	virtual ~IVGAProviderObserver() {$/;"	f	class:IVGAProviderObserver
~IVGAStateListener	utils/vgaState.h	/^	virtual ~IVGAStateListener() {$/;"	f	class:IVGAStateListener
~InteractionMode_IPC	core/interactionMode_IPC.cpp	/^InteractionMode_IPC::~InteractionMode_IPC() {$/;"	f	class:InteractionMode_IPC
~InteractionMode_SDI	core/interactionMode_SDI.cpp	/^InteractionMode_SDI::~InteractionMode_SDI() {$/;"	f	class:InteractionMode_SDI
~KVideoInterface	KVideo/KVideoInterface.h	/^	virtual ~KVideoInterface() {$/;"	f	class:KVideo::KVideoInterface
~Kernel	kernel.cpp	/^Kernel::~Kernel() {$/;"	f	class:Kernel
~KernelBoardCommandHandle	Command/KernelBoardCommandHandle.cpp	/^KernelBoardCommandHandle::~KernelBoardCommandHandle() {$/;"	f	class:KernelBoardCommandHandle
~LiveCourseManager	liveCourse/liveCourseManager.cpp	/^LiveCourseManager::~LiveCourseManager() {$/;"	f	class:LiveCourseManager
~Log	log.cpp	/^Log::~Log() {$/;"	f	class:Log
~MemBufUtils	core/membufUtils.cpp	/^MemBufUtils::~MemBufUtils() {$/;"	f	class:MemBufUtils
~MicroMode_IPC	core/microMode_IPC.cpp	/^MicroMode_IPC::~MicroMode_IPC() {$/;"	f	class:MicroMode_IPC
~MicroMode_SDI	core/microMode_SDI.cpp	/^MicroMode_SDI::~MicroMode_SDI() {$/;"	f	class:MicroMode_SDI
~MixtureMode_IPC	core/mixtureMode_IPC.cpp	/^MixtureMode_IPC::~MixtureMode_IPC() {$/;"	f	class:MixtureMode_IPC
~MixtureMode_SDI	core/mixtureMode_SDI.cpp	/^MixtureMode_SDI::~MixtureMode_SDI() {$/;"	f	class:MixtureMode_SDI
~ModelStatus	web/modelStatus.cpp	/^ModelStatus::~ModelStatus() {$/;"	f	class:ModelStatus
~MonitorSender	monitor/monitorSender.cpp	/^MonitorSender::~MonitorSender() {$/;"	f	class:MonitorSender
~MovieHeaderTail	core/movieHeaderTail.cpp	/^MovieHeaderTail::~MovieHeaderTail() {$/;"	f	class:MovieHeaderTail
~MovieMode_IPC	core/movieMode_IPC.cpp	/^MovieMode_IPC::~MovieMode_IPC() {$/;"	f	class:MovieMode_IPC
~MovieMode_SDI	core/movieMode_SDI.cpp	/^MovieMode_SDI::~MovieMode_SDI() {$/;"	f	class:MovieMode_SDI
~Mp4FilePlayer	core/Mp4Player.cpp	/^Mp4FilePlayer::~Mp4FilePlayer() {$/;"	f	class:Mp4FilePlayer
~Mp4Output	core/mp4Output.cpp	/^Mp4Output::~Mp4Output() {$/;"	f	class:Mp4Output
~MtgClient	core/mtgClient.cpp	/^MtgClient::~MtgClient() {$/;"	f	class:MtgClient
~MtgHeartbeat	core/mtgInit.cpp	/^MtgHeartbeat::~MtgHeartbeat() {$/;"	f	class:MtgHeartbeat
~Mutex	core/Mutex.cpp	/^Mutex::~Mutex() {$/;"	f	class:Mutex
~OSDManager	core/osdManager.cpp	/^OSDManager::~OSDManager() {$/;"	f	class:OSDManager
~RecordList	web/recordList.cpp	/^RecordList::~RecordList() {$/;"	f	class:RecordList
~ResourceModeHandle_IPC	core/resourceMode_IPC.cpp	/^ResourceModeHandle_IPC::~ResourceModeHandle_IPC() {$/;"	f	class:ResourceModeHandle_IPC
~ResourceModeHandle_SDI	core/resourceMode_SDI.cpp	/^ResourceModeHandle_SDI::~ResourceModeHandle_SDI() {$/;"	f	class:ResourceModeHandle_SDI
~RtmpHandle	core/rtmpHandle.cpp	/^RtmpHandle::~RtmpHandle() {$/;"	f	class:RtmpHandle
~RtmpManager	core/rtmpManager.cpp	/^RtmpManager::~RtmpManager() {$/;"	f	class:RtmpManager
~SDIVideoProviderSystem	KVideo/sdiVideoProviderSystem.cpp	/^SDIVideoProviderSystem::~SDIVideoProviderSystem() {$/;"	f	class:SDIVideoProviderSystem
~Setting	setting.cpp	/^Setting::~Setting() {$/;"	f	class:Setting
~ShareMemManager	core/shareMem.cpp	/^ShareMemManager::~ShareMemManager() {$/;"	f	class:ShareMemManager
~StateHandle	liveMediaState.cpp	/^StateHandle::~StateHandle() {$/;"	f	class:StateHandle
~StreamVideoManager	KVideo/streamVideoManager.cpp	/^StreamVideoManager::~StreamVideoManager() {$/;"	f	class:StreamVideoManager
~StyledStreamWriter	monitor/writer.h	/^      ~StyledStreamWriter(){}$/;"	f	class:Json::StyledStreamWriter
~StyledWriter	monitor/writer.h	/^      virtual ~StyledWriter(){}$/;"	f	class:Json::StyledWriter
~SubVideoManager	liveCourse/subVideoManager.cpp	/^SubVideoManager::~SubVideoManager() {$/;"	f	class:SubVideoManager
~Timer	timer.cpp	/^Timer::~Timer() {$/;"	f	class:Timer
~Udp	Command/udp.cpp	/^Udp::~Udp() {$/;"	f	class:Udp
~VGAProviderSystem	KVideo/vgaProviderSystem.cpp	/^VGAProviderSystem::~VGAProviderSystem() {$/;"	f	class:VGAProviderSystem
~VGAStateHandle	utils/vgaState.cpp	/^VGAStateHandle::~VGAStateHandle() {$/;"	f	class:VGAStateHandle
~Value	monitor/json_value.cpp	/^Value::~Value()$/;"	f	class:Json::Value
~ValueAllocator	monitor/json_value.cpp	/^ValueAllocator::~ValueAllocator()$/;"	f	class:Json::ValueAllocator
~Writer	monitor/json_writer.cpp	/^Writer::~Writer()$/;"	f	class:Json::Writer
~audio_capture	KVideo/audio/audio_capture.cpp	/^audio_capture::~audio_capture()$/;"	f	class:audio_capture
~audio_mixer	KVideo/audio/audio_mixer.cpp	/^audio_mixer::~audio_mixer()$/;"	f	class:audio_mixer
~audio_playback	KVideo/audio/audio_playback.cpp	/^audio_playback::~audio_playback()$/;"	f	class:audio_playback
~codec_engine	KVideo/audio/codec_engine.cpp	/^codec_engine::~codec_engine()$/;"	f	class:codec_engine
~fifo	KVideo/audio/fifo.cpp	/^fifo::~fifo()$/;"	f	class:fifo
~iaudio	KVideo/audio/iaudio.h	/^	virtual ~iaudio(void) {}$/;"	f	class:iaudio
